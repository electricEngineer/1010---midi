C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN .\obj\power.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE test\power.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOL
                    -S PRINT(.\lst\power.lst) PREPRINT(.\lst\power.i) OBJECT(.\obj\power.obj)

line level    source

   1          /***********************************************************************
   2          MODULE:    POWER MANAGEMENT
   3          VERSION:   1.01
   4          CONTAINS:  Routines for controlling the power features on the Philips
   5                     P89LPC936
   6          COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7          LICENSE:   May be freely used in commercial and non-commercial code
   8                     without royalties provided this copyright notice remains
   9                     in this file and unaltered
  10          WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11                     MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12                     TO CHANGE THE CONTENTS OF THIS FILE
  13          GENERATED: On "Sep 30 2010" at "21:24:02" by Code Architect 2.06
  14          ***********************************************************************/
  15          
  16          // SFR description needs to be included
  17          #include <reg936.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG936.H
   3      =1  
   4      =1  Header file for Philips 89LPC936
   5      =1  Copyright (c) 1988-2006 KEIL - An ARM Company
   6      =1  All rights reserved.
   7      =1  V1.1
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __REG936_H__
  11      =1  #define __REG936_H__
  12      =1  
  13      =1  /*  BYTE Registers  */
  14      =1  sfr P0   = 0x80;
  15      =1  sfr P1   = 0x90;
  16      =1  sfr P2   = 0xA0;
  17      =1  sfr P3   = 0xB0;
  18      =1  sfr PSW  = 0xD0;
  19      =1  sfr ACC  = 0xE0;
  20      =1  sfr B    = 0xF0;
  21      =1  sfr SP   = 0x81;
  22      =1  sfr DPL  = 0x82;
  23      =1  sfr DPH  = 0x83;
  24      =1  sfr PCON = 0x87;
  25      =1  sfr TCON = 0x88;
  26      =1  sfr TMOD = 0x89;
  27      =1  sfr TL0  = 0x8A;
  28      =1  sfr TL1  = 0x8B;
  29      =1  sfr TH0  = 0x8C;
  30      =1  sfr TH1  = 0x8D;
  31      =1  sfr IEN0 = 0xA8;
  32      =1  sfr IP0  = 0xB8;
  33      =1  sfr SCON = 0x98;
  34      =1  sfr SBUF = 0x99;
  35      =1  
  36      =1  sfr ADCON0 = 0x8E;
  37      =1  sfr ADCON1 = 0x97;
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 2   

  38      =1  sfr ADMODA = 0xC0;
  39      =1  sfr ADMODB = 0xA1;
  40      =1  sfr ADINS  = 0xA3;
  41      =1  sfr AD0DAT0= 0xC5;
  42      =1  sfr AD0DAT1= 0xC6;
  43      =1  sfr AD0DAT2= 0xC7;
  44      =1  sfr AD0DAT3= 0xF4;
  45      =1  sfr AD1DAT0= 0xD5;
  46      =1  sfr AD1DAT1= 0xD6;
  47      =1  sfr AD1DAT2= 0xD7;
  48      =1  sfr AD1DAT3= 0xF5;
  49      =1  sfr AD0BH  = 0xBB;
  50      =1  sfr AD0BL  = 0xA6;
  51      =1  sfr AD1BH  = 0xC4;
  52      =1  sfr AD1BL  = 0xBC;
  53      =1  sfr AUXR1  = 0xA2;
  54      =1  sfr SADDR  = 0xA9;
  55      =1  sfr SADEN  = 0xB9;
  56      =1  sfr TL2    = 0xCC;
  57      =1  sfr TH2    = 0xCD;
  58      =1  sfr BRGR0  = 0xBE;
  59      =1  sfr BRGR1  = 0xBF;
  60      =1  sfr BRGCON = 0xBD;
  61      =1  sfr CCCRA  = 0xEA;
  62      =1  sfr CCCRB  = 0xEB;
  63      =1  sfr CCCRC  = 0xEC;
  64      =1  sfr CCCRD  = 0xED;
  65      =1  sfr CMP1   = 0xAC;
  66      =1  sfr CMP2   = 0xAD;
  67      =1  sfr DEECON = 0xF1;
  68      =1  sfr DEEDAT = 0xF2;
  69      =1  sfr DEEADR = 0xF3;
  70      =1  sfr DIVM   = 0x95;
  71      =1  sfr I2ADR  = 0xDB;
  72      =1  sfr I2CON  = 0xD8;
  73      =1  sfr I2DAT  = 0xDA;
  74      =1  sfr I2SCLH = 0xDD;
  75      =1  sfr I2SCLL = 0xDC;
  76      =1  sfr I2STAT = 0xD9;
  77      =1  sfr ICRAH  = 0xAB;
  78      =1  sfr ICRAL  = 0xAA;
  79      =1  sfr ICRBH  = 0xAF;
  80      =1  sfr ICRBL  = 0xAE;
  81      =1  sfr IEN1   = 0xE8;
  82      =1  sfr IP1    = 0xF8;
  83      =1  sfr IP1H   = 0xF7;
  84      =1  sfr KBCON  = 0x94;
  85      =1  sfr KBMASK = 0x86;
  86      =1  sfr KBPATN = 0x93;
  87      =1  sfr OCRAH  = 0xEF;
  88      =1  sfr OCRAL  = 0xEE;
  89      =1  sfr OCRBH  = 0xFB;
  90      =1  sfr OCRBL  = 0xFA;
  91      =1  sfr OCRCH  = 0xFD;
  92      =1  sfr OCRCL  = 0xFC;
  93      =1  sfr OCRDH  = 0xFF;
  94      =1  sfr OCRDL  = 0xFE;
  95      =1  sfr P0M1   = 0x84;
  96      =1  sfr P0M2   = 0x85;
  97      =1  sfr P1M1   = 0x91;
  98      =1  sfr P1M2   = 0x92;
  99      =1  sfr P2M1   = 0xA4;
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 3   

 100      =1  sfr P2M2   = 0xA5;
 101      =1  sfr P3M1   = 0xB1;
 102      =1  sfr P3M2   = 0xB2;
 103      =1  sfr PCONA  = 0xB5;
 104      =1  sfr PT0AD  = 0xF6;
 105      =1  sfr RSTSRC = 0xDF;
 106      =1  sfr RTCCON = 0xD1;
 107      =1  sfr RTCH   = 0xD2;
 108      =1  sfr RTCL   = 0xD3;
 109      =1  sfr SSTAT  = 0xBA;
 110      =1  sfr SPCTL  = 0xE2;
 111      =1  sfr SPSTAT = 0xE1;
 112      =1  sfr SPDAT  = 0xE3;
 113      =1  sfr TAMOD  = 0x8F;
 114      =1  sfr TCR20  = 0xC8;
 115      =1  sfr TCR21  = 0xF9;
 116      =1  sfr TICR2  = 0xC9;
 117      =1  sfr TIFR2  = 0xE9;
 118      =1  sfr TISE2  = 0xDE;
 119      =1  sfr TOR2H  = 0xCF;
 120      =1  sfr TOR2L  = 0xCE;
 121      =1  sfr TPCR2H = 0xCB;
 122      =1  sfr TPCR2L = 0xCA;
 123      =1  sfr TRIM   = 0x96;
 124      =1  sfr WDCON  = 0xA7;
 125      =1  sfr WDL    = 0xC1;
 126      =1  sfr WFEED1 = 0xC2;
 127      =1  sfr WFEED2 = 0xC3;
 128      =1  sfr IP0H   = 0xB7;
 129      =1  
 130      =1  /*  BIT Registers  */
 131      =1  /*  PSW   */
 132      =1  sbit CY   = PSW^7;
 133      =1  sbit AC   = PSW^6;
 134      =1  sbit F0   = PSW^5;
 135      =1  sbit RS1  = PSW^4;
 136      =1  sbit RS0  = PSW^3;
 137      =1  sbit OV   = PSW^2;
 138      =1  sbit F1   = PSW^1;
 139      =1  sbit P    = PSW^0;
 140      =1  
 141      =1  /*  TCON  */
 142      =1  sbit TF1  = TCON^7;
 143      =1  sbit TR1  = TCON^6;
 144      =1  sbit TF0  = TCON^5;
 145      =1  sbit TR0  = TCON^4;
 146      =1  sbit IE1  = TCON^3;
 147      =1  sbit IT1  = TCON^2;
 148      =1  sbit IE0  = TCON^1;
 149      =1  sbit IT0  = TCON^0;
 150      =1  
 151      =1  /*  IEN0   */
 152      =1  sbit EA   = IEN0^7;
 153      =1  sbit EWDRT = IEN0^6;
 154      =1  sbit EBO   = IEN0^5;
 155      =1  sbit ES   = IEN0^4; // alternatively "ESR"
 156      =1  sbit ESR  = IEN0^4;
 157      =1  sbit ET1  = IEN0^3;
 158      =1  sbit EX1  = IEN0^2;
 159      =1  sbit ET0  = IEN0^1;
 160      =1  sbit EX0  = IEN0^0;
 161      =1  
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 4   

 162      =1  /*  IEN1   */
 163      =1  sbit EAD  = IEN1^7; // alternatively "EIEE" 
 164      =1  sbit EIEE = IEN1^7;
 165      =1  sbit EST  = IEN1^6;
 166      =1  sbit ECCU = IEN1^4;
 167      =1  sbit ESPI = IEN1^3;
 168      =1  sbit EC   = IEN1^2;
 169      =1  sbit EKBI = IEN1^1;
 170      =1  sbit EI2C = IEN1^0;
 171      =1  
 172      =1  /*  IP0   */ 
 173      =1  sbit PWDRT = IP0^6;
 174      =1  sbit PB0   = IP0^5;
 175      =1  sbit PS    = IP0^4; // alternatively "PSR"
 176      =1  sbit PSR   = IP0^4;
 177      =1  sbit PT1   = IP0^3;
 178      =1  sbit PX1   = IP0^2;
 179      =1  sbit PT0   = IP0^1;
 180      =1  sbit PX0   = IP0^0;
 181      =1  
 182      =1  /*  IP1   */
 183      =1  sbit PAD  = IP1^7; // alternatively "PIEE" 
 184      =1  sbit PIEE = IP1^7;
 185      =1  sbit PST  = IP1^6;
 186      =1  sbit PCCU = IP1^4;
 187      =1  sbit PSPI = IP1^3;
 188      =1  sbit PC_  = IP1^2;
 189      =1  sbit PKBI = IP1^1;
 190      =1  sbit PI2C = IP1^0;
 191      =1  
 192      =1  /*  SCON  */
 193      =1  sbit SM0  = SCON^7; // alternatively "FE"
 194      =1  sbit FE   = SCON^7;
 195      =1  sbit SM1  = SCON^6;
 196      =1  sbit SM2  = SCON^5;
 197      =1  sbit REN  = SCON^4;
 198      =1  sbit TB8  = SCON^3;
 199      =1  sbit RB8  = SCON^2;
 200      =1  sbit TI   = SCON^1;
 201      =1  sbit RI   = SCON^0;
 202      =1  
 203      =1  /*  I2CON  */
 204      =1  sbit I2EN  = I2CON^6;
 205      =1  sbit STA   = I2CON^5;
 206      =1  sbit STO   = I2CON^4;
 207      =1  sbit SI    = I2CON^3;
 208      =1  sbit AA    = I2CON^2;
 209      =1  sbit CRSEL = I2CON^0;
 210      =1  
 211      =1  /*  P0  */
 212      =1  sbit KB7 = P0^7; // alternatively "T1"
 213      =1  sbit T1 = P0^7;
 214      =1  sbit KB6 = P0^6; // alternatively "CMP1"
 215      =1  //sbit CMP1 = P0^6;
 216      =1  sbit KB5 = P0^5;
 217      =1  sbit KB4 = P0^4;
 218      =1  sbit KB3 = P0^3;
 219      =1  sbit KB2 = P0^2;
 220      =1  sbit KB1 = P0^1;
 221      =1  sbit KB0 = P0^0; // alternatively "CMP2"
 222      =1  //sbit CMP2 = P0^0;
 223      =1  
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 5   

 224      =1  /*  P1  */
 225      =1  sbit OCC     = P1^7;
 226      =1  sbit OCB     = P1^6;
 227      =1  sbit RST     = P1^5;
 228      =1  sbit INT1    = P1^4;
 229      =1  sbit INT0    = P1^3; // alternatively "SDA"
 230      =1  sbit SDA     = P1^3;
 231      =1  sbit T0      = P1^2; // alternatively "SCL"
 232      =1  sbit SCL     = P1^2;
 233      =1  sbit RxD     = P1^1;
 234      =1  sbit TxD     = P1^0;
 235      =1  
 236      =1  /*  P2  */
 237      =1  sbit ICA     = P2^7;
 238      =1  sbit OCA     = P2^6;
 239      =1  sbit SPICLK  = P2^5;
 240      =1  sbit SS      = P2^4;
 241      =1  sbit MISO    = P2^3;
 242      =1  sbit MOSI    = P2^2;
 243      =1  sbit OCD     = P2^1;
 244      =1  sbit ICB     = P2^0;
 245      =1  
 246      =1  /*  P3  */
 247      =1  sbit XTAL1= P3^1;
 248      =1  sbit XTAL2= P3^0;
 249      =1  
 250      =1  /* TCR20 */
 251      =1  sbit PLLEN = TCR20^7;
 252      =1  sbit HLTRN = TCR20^6;
 253      =1  sbit HLTEN = TCR20^5;
 254      =1  sbit ALTCD = TCR20^4;
 255      =1  sbit ALTAB = TCR20^3;
 256      =1  sbit TDIR2 = TCR20^2;
 257      =1  sbit TMOD21= TCR20^1;
 258      =1  sbit TMOD20= TCR20^0;
 259      =1  
 260      =1  /* ADMODA */
 261      =1  sbit BNDI1  = ADMODA^7;
 262      =1  sbit BURST1 = ADMODA^6;
 263      =1  sbit SCC1   = ADMODA^5;
 264      =1  sbit SCAN1  = ADMODA^4;
 265      =1  sbit BNDI0  = ADMODA^3;
 266      =1  sbit BURST0 = ADMODA^2;
 267      =1  sbit SCC0   = ADMODA^1;
 268      =1  sbit SCAN0  = ADMODA^0;
 269      =1  
 270      =1  #endif
 271      =1  
  18          #include "power.h"
   1      =1  /***********************************************************************
   2      =1  MODULE:    POWER MANAGEMENT
   3      =1  VERSION:   1.01
   4      =1  CONTAINS:  Routines for controlling the power features on the Philips
   5      =1             P89LPC936
   6      =1  COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7      =1  LICENSE:   May be freely used in commercial and non-commercial code
   8      =1             without royalties provided this copyright notice remains
   9      =1             in this file and unaltered
  10      =1  WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11      =1             MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12      =1             TO CHANGE THE CONTENTS OF THIS FILE
  13      =1  GENERATED: On "Sep 30 2010" at "21:24:02" by Code Architect 2.06
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 6   

  14      =1  ***********************************************************************/
  15      =1  
  16      =1  #ifndef _POWERH_
  17      =1  #define _POWERH_
  18      =1  
  19      =1  // brownout detection types
  20      =1  #define POWER_BORESET     0
  21      =1  #define POWER_BOINTERRUPT 1
  22      =1  
  23      =1  // power reduction modes
  24      =1  #define POWER_NORMAL            -1
  25      =1  #define POWER_IDLE           0
  26      =1  #define POWER_POWERDOWN      1
  27      =1  #define POWER_TOTALPOWERDOWN 2
  28      =1  
  29      =1  // peripherals that can be powered up or down
  30      =1  // note: do not change the values of the defines!
  31      =1  #define POWER_CCU         0x01
  32      =1  #define POWER_UART        0x02
  33      =1  #define POWER_SPI         0x04
  34      =1  #define POWER_I2C         0x08
  35      =1  #define POWER_ADC         0x10
  36      =1  #define POWER_COMPARATORS 0x20
  37      =1  #define POWER_EEPROM      0x40
  38      =1  #define POWER_RTC         0x80
  39      =1  
  40      =1  /***********************************************************************
  41      =1  DESC:    Enables brownout detection to generate either a reset or
  42      =1           interrupt
  43      =1  RETURNS: Nothing
  44      =1  CAUTION: If interrupts are being used then EA must be set to 1
  45      =1           after calling this function
  46      =1           UCFG1.5 (BOE) must be set to 1
  47      =1  ************************************************************************/
  48      =1  void power_brownoutenable
  49      =1    (
  50      =1    unsigned char type    // POWER_BORESET or POWER_BOINTERRUPT
  51      =1    );
  52      =1  
  53      =1  /***********************************************************************
  54      =1  DESC:    Disabled brownout detection
  55      =1  RETURNS: Nothing
  56      =1  CAUTION: UCFG1.5 (BOE) is ignored
  57      =1  ************************************************************************/
  58      =1  void power_brownoutdisable
  59      =1    (
  60      =1    void
  61      =1    );
  62      =1  
  63      =1  /***********************************************************************
  64      =1  DESC:    Indicates if the last reset was caused by a brownout reset
  65      =1           Only use this if brownout is enabled with POWER_BORESET
  66      =1  RETURNS: 0 if the reset was not a brownout reset
  67      =1           1 if the reset was a brownout reset
  68      =1  ************************************************************************/
  69      =1  unsigned char power_isbrownoutreset
  70      =1    (
  71      =1    void
  72      =1    );
  73      =1  
  74      =1  /***********************************************************************
  75      =1  DESC:    Indicates if the last reset was caused by power on
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 7   

  76      =1  RETURNS: 0 if the reset was not power on
  77      =1           1 if the reset was power on
  78      =1  ************************************************************************/
  79      =1  unsigned char power_ispoweronreset
  80      =1    (
  81      =1    void
  82      =1    );
  83      =1  
  84      =1  /***********************************************************************
  85      =1  DESC:    Selects a power reduction mode
  86      =1  RETURNS: nothing
  87      =1  CAUTION: Some modes will cause various peripherals to either work
  88      =1           differently or stop working
  89      =1  ************************************************************************/
  90      =1  void power_mode
  91      =1    (
  92      =1    unsigned char mode  // power reduction mode POWER_NORMAL, POWER_IDLE
  93      =1                        // POWER_POWERDOWN or POWER_TOTALPOWERDOWN
  94      =1    );
  95      =1  
  96      =1  /***********************************************************************
  97      =1  DESC:    Powers down one or more peripherals
  98      =1  RETURNS: nothing
  99      =1  ************************************************************************/
 100      =1  void power_powerdown
 101      =1    (
 102      =1    unsigned char peripherals   // ORd list of peripherals to power down
 103      =1                                // e.g. POWER_RTC | POWER_SPI
 104      =1    );
 105      =1  
 106      =1  /***********************************************************************
 107      =1  DESC:    Powers up one or more peripherals that were previously powered
 108      =1           down
 109      =1  RETURNS: nothing
 110      =1  ************************************************************************/
 111      =1  void power_powerup
 112      =1    (
 113      =1    unsigned char peripherals   // ORd list of peripherals to power up
 114      =1                                // e.g. POWER_RTC | POWER_SPI
 115      =1    );
 116      =1  
 117      =1  #endif // _POWERH_
 118      =1  
 119      =1  
 120      =1  
  19          
  20          /***********************************************************************
  21          DESC:    Enables brownout detection to generate either a reset or
  22                   interrupt
  23          RETURNS: Nothing
  24          CAUTION: If interrupts are being used then EA must be set to 1
  25                   after calling this function
  26                   UCFG1.5 (BOE) must be set to 1
  27                   Turns off any power reduction mode currently in effect
  28          ************************************************************************/
  29          void power_brownoutenable
  30            (
  31            unsigned char type    // POWER_BORESET or POWER_BOINTERRUPT
  32            )
  33          {
  34   1        if (type == POWER_BORESET)
  35   1        {
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 8   

  36   2          // no power reduction, enable brownout, disable interrupt
  37   2          PCON &= 0xCC;
  38   2          // enable brownout detect
  39   2          EBO = 1;
  40   2        }
  41   1        else if (type == POWER_BOINTERRUPT)
  42   1        {
  43   2          // no power reduction, enable brownout, enable interrupt
  44   2          PCON &= 0xCC;
  45   2          PCON |= 0x10;
  46   2      
  47   2          // set isr priority to 0
  48   2          IP0 &= 0xDF;
  49   2          IP0H &= 0xDF;
  50   2      
  51   2          // enable brownout detect
  52   2          EBO = 1;
  53   2        }
  54   1      } // power_brownoutenable
  55          
  56          /***********************************************************************
  57          DESC:    Disables brownout detection
  58          RETURNS: Nothing
  59          CAUTION: UCFG1.5 (BOE) is ignored
  60          ************************************************************************/
  61          void power_brownoutdisable
  62            (
  63            void
  64            )
  65          {
  66   1        // disable brownout
  67   1        PCON |= 0x20;
  68   1      } // power_brownoutdisable
  69          
  70          /***********************************************************************
  71          DESC:    Indicates if the last reset was caused by a brownout reset
  72                   Only use this if brownout is enabled with POWER_BORESET
  73          RETURNS: 0 if the reset was not a brownout reset
  74                   1 if the reset was a brownout reset
  75          ************************************************************************/
  76          unsigned char power_isbrownoutreset
  77            (
  78            void
  79            )
  80          {
  81   1        unsigned char bof;
  82   1      
  83   1        // get bof
  84   1        bof = (RSTSRC >> 5) & 0x01;
  85   1      
  86   1        // clear bof
  87   1        RSTSRC &= ~0x20;
  88   1      
  89   1        // return bof
  90   1        return bof;
  91   1      } // power_isbrownoutreset
  92          
  93          /***********************************************************************
  94          DESC:    Brownout Interrupt
  95          RETURNS: Nothing
  96          CAUTION: uart_init must be called first
  97                   EA must be set to 1
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 9   

  98          ************************************************************************/
  99          void power_brownoutisr
 100            (
 101            void
 102            ) interrupt 5 using 0
 103          {
 104   1        // clear bof
 105   1        RSTSRC &= ~0x20;
 106   1      } // power_brownoutisr
 107          
 108          /***********************************************************************
 109          DESC:    Indicates if the last reset was caused by power on
 110          RETURNS: 0 if the reset was not power on
 111                   1 if the reset was power on
 112          ************************************************************************/
 113          unsigned char power_ispoweronreset
 114            (
 115            void
 116            )
 117          {
 118   1        unsigned char pof;
 119   1      
 120   1        // get pof
 121   1        pof = (RSTSRC >> 4) & 0x01;
 122   1      
 123   1        // clear pof
 124   1        RSTSRC &= ~0x10;
 125   1      
 126   1        // return pof
 127   1        return pof;
 128   1      } // power_ispoweronreset
 129          
 130          /***********************************************************************
 131          DESC:    Selects a power reduction mode
 132          RETURNS: nothing
 133          CAUTION: Some modes will cause various peripherals to either work
 134                   differently or stop working
 135          ************************************************************************/
 136          void power_mode
 137            (
 138            unsigned char mode  // power reduction mode POWER_NORMAL, POWER_IDLE
 139                                // POWER_POWERDOWN or POWER_TOTALPOWERDOWN
 140            )
 141          {
 142   1        // disable power reduction
 143   1        PCON &= 0xFC;
 144   1      
 145   1        if (mode == POWER_IDLE)
 146   1          PCON |= 0x01;
 147   1        else if (mode == POWER_POWERDOWN)
 148   1          PCON |= 0x02;
 149   1        else if (mode == POWER_TOTALPOWERDOWN)
 150   1          PCON |= 0x03;
 151   1      } // power_mode
 152          
 153          /***********************************************************************
 154          DESC:    Powers down one or more peripherals
 155          RETURNS: nothing
 156          ************************************************************************/
 157          void power_powerdown
 158            (
 159            unsigned char peripherals   // ORd list of peripherals to power down
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 10  

 160                                        // e.g. POWER_RTC | POWER_SPI
 161            )
 162          {
 163   1        // power down peripherals
 164   1        PCONA |= peripherals;
 165   1      } // power_powerdown
 166          
 167          /***********************************************************************
 168          DESC:    Powers up one or more peripherals that were previously powered
 169                   down
 170          RETURNS: nothing
 171          ************************************************************************/
 172          void power_powerup
 173            (
 174            unsigned char peripherals   // ORd list of peripherals to power up
 175                                        // e.g. POWER_RTC | POWER_SPI
 176            )
 177          {
 178   1        // power up peripherals
 179   1        PCONA &= ~peripherals;
 180   1      } // power_powerup
 181          
 182          
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _power_brownoutenable (BEGIN)
                                           ; SOURCE LINE # 29
;---- Variable 'type' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
0000 EF                MOV     A,R7
0001 7006              JNZ     ?C0001
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 37
0003 5387CC            ANL     PCON,#0CCH
                                           ; SOURCE LINE # 39
0006 D2AD              SETB    EBO
                                           ; SOURCE LINE # 40
0008 22                RET     
0009         ?C0001:
                                           ; SOURCE LINE # 41
0009 BF010E            CJNE    R7,#01H,?C0004
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 44
000C 5387CC            ANL     PCON,#0CCH
                                           ; SOURCE LINE # 45
000F 438710            ORL     PCON,#010H
                                           ; SOURCE LINE # 48
0012 53B8DF            ANL     IP0,#0DFH
                                           ; SOURCE LINE # 49
0015 53B7DF            ANL     IP0H,#0DFH
                                           ; SOURCE LINE # 52
0018 D2AD              SETB    EBO
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
001A         ?C0004:
001A 22                RET     
             ; FUNCTION _power_brownoutenable (END)

             ; FUNCTION power_brownoutdisable (BEGIN)
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 67
0000 438720            ORL     PCON,#020H
                                           ; SOURCE LINE # 68
0003 22                RET     
             ; FUNCTION power_brownoutdisable (END)

             ; FUNCTION power_isbrownoutreset (BEGIN)
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 84
0000 E5DF              MOV     A,RSTSRC
0002 C4                SWAP    A
0003 13                RRC     A
0004 5401              ANL     A,#01H
0006 FF                MOV     R7,A
;---- Variable 'bof' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 87
0007 53DFDF            ANL     RSTSRC,#0DFH
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
000A         ?C0006:
000A 22                RET     
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 12  

             ; FUNCTION power_isbrownoutreset (END)

             ; FUNCTION power_brownoutisr (BEGIN)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 105
0000 53DFDF            ANL     RSTSRC,#0DFH
                                           ; SOURCE LINE # 106
0003 32                RETI    
             ; FUNCTION power_brownoutisr (END)

             ; FUNCTION power_ispoweronreset (BEGIN)
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 121
0000 E5DF              MOV     A,RSTSRC
0002 C4                SWAP    A
0003 5401              ANL     A,#01H
0005 FF                MOV     R7,A
;---- Variable 'pof' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 124
0006 53DFEF            ANL     RSTSRC,#0EFH
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
0009         ?C0008:
0009 22                RET     
             ; FUNCTION power_ispoweronreset (END)

             ; FUNCTION _power_mode (BEGIN)
                                           ; SOURCE LINE # 136
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 143
0000 5387FC            ANL     PCON,#0FCH
                                           ; SOURCE LINE # 145
0003 EF                MOV     A,R7
0004 7004              JNZ     ?C0009
                                           ; SOURCE LINE # 146
0006 438701            ORL     PCON,#01H
0009 22                RET     
000A         ?C0009:
                                           ; SOURCE LINE # 147
000A BF0104            CJNE    R7,#01H,?C0011
                                           ; SOURCE LINE # 148
000D 438702            ORL     PCON,#02H
0010 22                RET     
0011         ?C0011:
                                           ; SOURCE LINE # 149
0011 BF0203            CJNE    R7,#02H,?C0014
                                           ; SOURCE LINE # 150
0014 438703            ORL     PCON,#03H
                                           ; SOURCE LINE # 151
0017         ?C0014:
0017 22                RET     
             ; FUNCTION _power_mode (END)

             ; FUNCTION _power_powerdown (BEGIN)
                                           ; SOURCE LINE # 157
;---- Variable 'peripherals' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 164
0000 EF                MOV     A,R7
C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 13  

0001 42B5              ORL     PCONA,A
                                           ; SOURCE LINE # 165
0003 22                RET     
             ; FUNCTION _power_powerdown (END)

             ; FUNCTION _power_powerup (BEGIN)
                                           ; SOURCE LINE # 172
;---- Variable 'peripherals' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 179
0000 EF                MOV     A,R7
0001 F4                CPL     A
0002 52B5              ANL     PCONA,A
                                           ; SOURCE LINE # 180
0004 22                RET     
             ; FUNCTION _power_powerup (END)

C51 COMPILER V8.12   POWER                                                                 11/16/2010 22:45:16 PAGE 14  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
_power_brownoutenable. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  type . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
IEN0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
IEN1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
IP0H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
power_isbrownoutreset. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  bof. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
power_ispoweronreset . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  pof. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_power_powerup . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  peripherals. . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
ADMODA . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
_power_mode. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  mode . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
TCR20. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
EBO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
I2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
RSTSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
power_brownoutisr. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
power_brownoutdisable. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
PCONA. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
_power_powerdown . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  peripherals. . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     89    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
