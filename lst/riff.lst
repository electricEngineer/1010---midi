C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE RIFF
OBJECT MODULE PLACED IN .\obj\riff.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE riff.c OMF2 ROM(COMPACT) BROWSE MODP2 DEBUG CODE LISTINCLUDE SYMBOLS PRINT(
                    -.\lst\riff.lst) PREPRINT(.\lst\riff.i) OBJECT(.\obj\riff.obj)

line level    source

   1          #include "riff.h"
   1      =1  #ifndef RIFF_H
   2      =1  #define RIFF_H
   3      =1  
   4      =1  //utility riffs
   5      =1  extern unsigned char code sthRest[5];
   6      =1  extern unsigned char code eiRest[5];
   7      =1  extern unsigned char code qRest[5];
   8      =1  extern unsigned char code hRest[5];
   9      =1  extern unsigned char code wRest[5];
  10      =1  
  11      =1  //single Piteches plus switches
  12      =1  #define MINORDRONE_ROOT         29
  13      =1  #define WHOLEDRONE_ROOT         30
  14      =1  extern unsigned char code wholeDrone[5];
  15      =1  extern unsigned char code minorDrone[5];
  16      =1  
  17      =1  //COORD UTIL
  18      =1  #define RECO_S  (2+1)
  19      =1  extern unsigned char code sthRestCoord[RECO_S];
  20      =1  extern unsigned char code eiRestCoord[RECO_S];
  21      =1  extern unsigned char code qRestCoord[RECO_S];
  22      =1  extern unsigned char code hRestCoord[RECO_S];
  23      =1  extern unsigned char code wRestCoord[RECO_S]; //one empty bar
  24      =1  
  25      =1  #define CRTLTX_S        (4+1)
  26      =1  extern unsigned char code on0Tx[CRTLTX_S];
  27      =1  extern unsigned char code on2Tx[CRTLTX_S];
  28      =1  extern unsigned char code on4Tx[CRTLTX_S];
  29      =1  extern unsigned char code on6Tx[CRTLTX_S];
  30      =1  extern unsigned char code on8Tx[CRTLTX_S];
  31      =1  extern unsigned char code on10Tx[CRTLTX_S];
  32      =1  extern unsigned char code on12Tx[CRTLTX_S];
  33      =1  extern unsigned char code on14Tx[CRTLTX_S];
  34      =1  
  35      =1  extern unsigned char code off0Tx[CRTLTX_S];
  36      =1  extern unsigned char code off2Tx[CRTLTX_S];
  37      =1  extern unsigned char code off4Tx[CRTLTX_S];
  38      =1  extern unsigned char code off6Tx[CRTLTX_S];
  39      =1  extern unsigned char code off8Tx[CRTLTX_S];
  40      =1  extern unsigned char code off10Tx[CRTLTX_S];
  41      =1  extern unsigned char code off12Tx[CRTLTX_S];
  42      =1  extern unsigned char code off14Tx[CRTLTX_S];
  43      =1  
  44      =1  //special riffs
  45      =1  
  46      =1  ///////////COORD SONG////////////////
  47      =1  /*
  48      =1          Spec for COORD song
  49      =1          word songLen, byte???,
  50      =1          word riffAddy, byte repeats... 
  51      =1  */
  52      =1  /*
  53      =1          spec for COORD riff
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 2   

  54      =1          byte deltaPos, byte MIDI / CC+Ch, byte val
  55      =1                                     o
  56      =1                                     MIDI / Sys or RT,
  57      =1                                     o
  58      =1                                     tempo [hiNibble] val [loNibble], 2 bytes
  59      =1                                     [e.g. 0x7F, 0xF3, 0xFF -> cnt0 = 0f, periodH0 = f3, periodL0 = ff
  60      =1          ideal 77160 [0x12D68] is 120 bpm <- theres a mystery factor of two, but thats a godd thing!!!!
  61      =1          Tempo and future file meta events...  
  62      =1          we reserve the high nibble for meta events
  63      =1          and the low nibble for data...
  64      =1          Meta events are sparse and easily mapped and
  65      =1          even extended to 8 states... (high bit is for real midi)
  66      =1  */
  67      =1  
  68      =1  /////////////WORKER SONG//////////////////
  69      =1  /*
  70      =1  Spec for song:
  71      =1  
  72      =1    word songLen, byte ???,
  73      =1    (word) riffAddress, byte repeats,      (riff_t)
  74      =1    (word) riffAddress, byte repeats,
  75      =1    ... 
  76      =1  */
  77      =1  /*
  78      =1  Spec for riff:
  79      =1  
  80      =1          byte riffLen,
  81      =1          byte deltaSongPos, byte 0-126 Notes [ 127 = NoteOff, 0x80 = V_Chan ]
  82      =1          byte deltaSongPos, byte 0-126 Notes [ 127 = NoteOff, 0x80 = V_Chan ]
  83      =1          ...
  84      =1  */
  85      =1  
  86      =1  #define BEAT_ROOT       (48)
  87      =1  #define BEAT1_TEMPO     (0x6f00/2)  //240
  88      =1  #define BEAT2_TEMPO     (0x6f00/4)  //240
  89      =1  #define BEATCOORD1_S    (69)
  90      =1  #define BEAT1_S         3
  91      =1  extern unsigned char code beatCoord1[BEATCOORD1_S];
  92      =1  extern unsigned char code beatCoord2[BEATCOORD1_S];
  93      =1  extern unsigned char code beat1[BEAT1_S];
  94      =1  
  95      =1  //Driving me back...
  96      =1  #define DMB_ROOT        (25) //C# - yeah we in tune!
  97      =1  #define DMB_PEDAL       (DMB_ROOT-1)
  98      =1  #define DMB_TEMPO       (0x20B61) //~69-70 BPM 0x20B61
  99      =1  
 100      =1  #define DMBINIT_S       37
 101      =1  extern unsigned char code dmbInit[37];//tempo ... does pickup!!!
 102      =1  
 103      =1  #define DMBVAMP_S       (4+1)
 104      =1  extern unsigned char code dmbVamp0[DMBVAMP_S]; //sans downbeat
 105      =1  extern unsigned char code dmbVamp1[DMBVAMP_S]; //cum downbeat
 106      =1  
 107      =1  #define DMBROOT_S       ((104-72)*4+1)
 108      =1  extern unsigned char code dmbRoot0[DMBROOT_S]; //sans downbeat
 109      =1  extern unsigned char code dmbRoot1[DMBROOT_S];
 110      =1  
 111      =1  #define DMBBD_S         7       
 112      =1  extern unsigned char code dmbBDHa[DMBBD_S];
 113      =1  extern unsigned char code dmbBDWh[DMBBD_S];
 114      =1  
 115      =1  #define TEST_LEN        10//easier to parse later
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 3   

 116      =1  extern unsigned char code downR1[];
 117      =1  extern unsigned char code downR2[];
 118      =1  extern unsigned char code downR3[];
 119      =1  extern unsigned char code downR4[];
 120      =1  extern unsigned char code downR5[];
 121      =1  
 122      =1  extern unsigned char code upR1[];
 123      =1  extern unsigned char code upR2[];
 124      =1  extern unsigned char code upR3[];
 125      =1  extern unsigned char code upR4[];
 126      =1  extern unsigned char code upR5[];
 127      =1  
 128      =1  
 129      =1  extern unsigned char code testCo1[];
 130      =1  extern unsigned char code testCo1b[];
 131      =1  extern unsigned char code testCo2[];
 132      =1  
 133      =1  extern unsigned char code testCo3[];
 134      =1  extern unsigned char code testCo3b[];
 135      =1  extern unsigned char code testCo3c[];
 136      =1  
 137      =1  extern unsigned char code testCo4[];
 138      =1  
 139      =1  /*
 140      =1  #define SAUCER_VOLCANO_SONG_SIZE 3
 141      =1  SONG_T saucerVolcano[SAUCER_VOLCANO_SONG_SIZE] = {
 142      =1          (word) saucer1, 8-1, SAUCER_SIZE/2
 143      =1  //      (word) volcano1, 2-1, VOLCANO_SIZE/2
 144      =1  };
 145      =1  
 146      =1  #define HEAVY_11_SONG_SIZE 6      
 147      =1  volatile word code heavy1Song[6] = {
 148      =1          (word) heavy111, 4 - 1, HEAVY_11_SIZE/2,        //4*11
 149      =1          (word) heavy121, 1 - 1, HEAVY_12_SIZE/2         //1*22
 150      =1  };
 151      =1  
 152      =1  volatile word code heavy2Song[6] = {
 153      =1          (word) heavy112, 4 - 1, HEAVY_11_SIZE/2,
 154      =1          (word) heavy122, 1 - 1, HEAVY_12_SIZE/2
 155      =1  };
 156      =1  
 157      =1  #define DRIVE_BACK_SONG0_SIZE 3   
 158      =1  volatile word code driveBackSong0[3] = {
 159      =1          (word) driveBack0, 48 - 1, DRIVE_BACK_0SIZE/2
 160      =1  };
 161      =1  
 162      =1  #define DRIVE_BACK_SONG1_SIZE 3
 163      =1  volatile word code driveBackSong1[3] = {
 164      =1          (word) driveBack1, 48 - 1, DRIVE_BACK_1SIZE/2   
 165      =1  };
 166      =1  
 167      =1  #define DRIVE_BACK_SONG2_SIZE 3   
 168      =1  volatile word code driveBackSong2[3] = {
 169      =1          (word) driveBack2, 256 - 1, DRIVE_BACK_2SIZE/2
 170      =1  };
 171      =1  
 172      =1  #define DRIVE_BACK_SONG3_SIZE 3   
 173      =1  volatile word code driveBackSong3[3] = {
 174      =1          (word) driveBack3, 256 - 1, DRIVE_BACK_3SIZE/2
 175      =1  };
 176      =1  
 177      =1  #define FIRST_SONG_SIZE 24
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 4   

 178      =1  volatile word code firstSong[FIRST_SONG_SIZE] = {
 179      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 180      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 181      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 182      =1          (word) oneRockMod, 3-1, ONEROCKMOD_SIZE/2, //8 - 24     
 183      =1          (word) fourFloor, 2 - 1, FOURFLOOR_SIZE/2,       //4 - 8
 184      =1          (word) fourFloorTX, 2 - 1, FOURFLOORTX_SIZE/2,   //4 - 8
 185      =1          (word) fourFloor, 2 - 1, FOURFLOOR_SIZE/2,       //4 - 8
 186      =1          (word) fourFloorTX, 2 - 1, FOURFLOORTX_SIZE/2    //4 - 8
 187      =1  };
 188      =1  
 189      =1  #define SEC_SONG_SIZE   24 
 190      =1  volatile word code secSong[SEC_SONG_SIZE] = {
 191      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 192      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 193      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 194      =1          (word) oneRockMod, 2-1, ONEROCKMOD_SIZE/2, //8 - 8      
 195      =1          (word) fourFloor, 2 - 1, FOURFLOOR_SIZE/2,       //4 - 8
 196      =1          (word) fourFloorTX, 2 - 1, FOURFLOORTX_SIZE/2,   //4 - 8
 197      =1          (word) fourFloor, 2 - 1, FOURFLOOR_SIZE/2,       //4 - 8
 198      =1          (word) fourFloorTX, 3 - 1, FOURFLOORTX_SIZE/2    //4 - 8
 199      =1  };
 200      =1  #endif
 201      =1  
 202      =1  SONG_T testSong[6] = {
 203      =1          (word) test, 1-1, TEST_SIZE/2,
 204      =1          (word) test, 1-1, TEST_SIZE/2
 205      =1  };
 206      =1  
 207      =1  //begin thumpDream song - not sure about freqs - maybe add high pitch drone?
 208      =1  #define THUMP1_SONG_SIZE        6        
 209      =1  SONG_T thump1Song[THUMP1_SONG_SIZE] = {
 210      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 211      =1          (word) thumpFall8, 4 - 1, THUMP_FALL8_SIZE/2     //4 - 16
 212      =1  };
 213      =1  
 214      =1  #define THUMP2_SONG_SIZE 18      
 215      =1  SONG_T thump2Song[THUMP2_SONG_SIZE] = {
 216      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 217      =1          (word) thumpFall8, 4 - 1, THUMP_FALL8_SIZE/2,    //4 - 16
 218      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 219      =1          (word) thump2, 4 - 1, THUMP_2_SIZE/2,    //4 - 16
 220      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 221      =1          (word) thump2, 4 - 1, THUMP_2_SIZE/2     //4 - 16
 222      =1  };
 223      =1  
 224      =1  #define THUMP3_SONG_SIZE 24      
 225      =1  SONG_T thump3Song[THUMP3_SONG_SIZE] = {
 226      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 227      =1          (word) thumpFall8, 4 - 1, THUMP_FALL8_SIZE/2,    //4 - 16
 228      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 229      =1          (word) thumpFall8, 4 - 1, THUMP_FALL8_SIZE/2,    //4 - 16
 230      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 231      =1          (word) thump3, 4 - 1, THUMP_3_SIZE/2,    //4 - 16
 232      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 233      =1          (word) thump3, 4 - 1, THUMP_3_SIZE/2     //4 - 16
 234      =1  };
 235      =1  
 236      =1  //Begin altSong - space two songs at 3 freqs - slowish interlocking riffage 
 237      =1  #define FIR_SONG_ALT_SIZE       15
 238      =1  volatile word code firSongAlt[FIR_SONG_ALT_SIZE] = {
 239      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 5   

 240      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 241      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 242      =1          (word) oneRockMod, 3-1, ONEROCKMOD_SIZE/2, //8 - 16
 243      =1          (word) oneRockB, 8-1, ONEROCKB_SIZE/2      //4 - 32
 244      =1  };
 245      =1  
 246      =1  #define SEC_SONG_ALT_SIZE       18 
 247      =1  volatile word code secSongAlt[SEC_SONG_ALT_SIZE] = {
 248      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 249      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 250      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 251      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 252      =1          (word) oneRockMod, 2-1, ONEROCKMOD_SIZE/2, //8 - 8
 253      =1          (word) twoRockB, 8-1, TWOROCKB_SIZE/2      //4 - 32
 254      =1  };
 255      =1  
 256      =1  #define THI_SONG_ALT_SIZE       18 
 257      =1  volatile word code thiSongAlt[THI_SONG_ALT_SIZE] = {
 258      =1          (word) oneRockB, 10-1, ONEROCKB_SIZE/2,    //4 - 40
 259      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 260      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 261      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 262      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 263      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2 //8 - 8
 264      =1  };
 265      =1  
 266      =1  
 267      =1  #define FOR_SONG_ALT_SIZE       18 
 268      =1  volatile word code forSongAlt[FOR_SONG_ALT_SIZE] = {
 269      =1          (word) twoRockB, 10-1, TWOROCKB_SIZE/2,    //4 - 40
 270      =1          (word) twoRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 271      =1          (word) oneRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 272      =1          (word) twoRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 273      =1          (word) oneRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 274      =1          (word) twoRockMod, 1-1, ONEROCKMOD_SIZE/2 //8 - 8
 275      =1  };
 276      =1  */
 277      =1  #endif
   2          #include "midi_spec.h"
   1      =1  /*
   2      =1  
   3      =1    thanks Peter Everett!!!!
   4      =1  
   5      =1  */
   6      =1  
   7      =1  #ifndef midi_spec_h
   8      =1  #define midi_spec_h
   9      =1  
  10      =1  //COORD extra codes from midi Files... 
  11      =1  //really only ever gonna be TEMPO
  12      =1  #define TEMPO_SET       0x70//0x51 in file
  13      =1  
  14      =1  //Staion macros for general sliders..
  15      =1  #define STATION_TO_HI(x)        ((unsigned char)(((((unsigned int)x) - 700) >> 2) & 0x7f))
  16      =1  #define STATION_TO_LO(x)        ((unsigned char)(((((unsigned int)x) - 700) << 5) & 0x7f))
  17      =1  
  18      =1  #define NUM_MIDI_CHANS      16    // Number of logical channels
  19      =1  
  20      =1  #define PERCUSSION_CHAN     10    // Channel used for percussuion
  21      =1  
  22      =1  #define MIDI_DATA_RANGE    128    // 7 bit data range
  23      =1  
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 6   

  24      =1  
  25      =1  // Note numbers,
  26      =1  
  27      =1  // lowest note  C0  (0)   =     8.1757989156437073336828122976033Hz
  28      =1  
  29      =1  // middle C is  C5  (60)  =   261.6255653005986346778499935233Hz
  30      =1  
  31      =1  // reference    A6  (69)  =   440Hz
  32      =1  
  33      =1  // highest note G10 (127) = 12543.853951415977410742384974714Hz
  34      =1  
  35      =1  enum
  36      =1  
  37      =1  {
  38      =1  
  39      =1    C0, Cs0, D0, Ds0, E0, Fm0, Fs0, G0, Gs0, A0, As0, B0,
  40      =1  
  41      =1    C1, Cs1, D1, Ds1, E1, Fm1, Fs1, G1, Gs1, A1, As1, B1,
  42      =1  
  43      =1    C2, Cs2, D2, Ds2, E2, F2, Fs2, G2, Gs2, A2, As2, B2,
  44      =1  
  45      =1    C3, Cs3, D3, Ds3, E3, F3, Fs3, G3, Gs3, A3, As3, B3,
  46      =1  
  47      =1    C4, Cs4, D4, Ds4, E4, F4, Fs4, G4, Gs4, A4, As4, B4,
  48      =1  
  49      =1    C5, Cs5, D5, Ds5, E5, F5, Fs5, G5, Gs5, A5, As5, B5,
  50      =1  
  51      =1    C6, Cs6, D6, Ds6, E6, F6, Fs6, G6, Gs6, A6, As6, B6,
  52      =1  
  53      =1    C7, Cs7, D7, Ds7, E7, F7, Fs7, G7, Gs7, A7, As7, B7,
  54      =1  
  55      =1    C8, Cs8, D8, Ds8, E8, F8, Fs8, G8, Gs8, A8, As8, B8,
  56      =1  
  57      =1    C9, Cs9, D9, Ds9, E9, F9, Fs9, G9, Gs9, A9, As9, B9,
  58      =1  
  59      =1    C10,Cs10,D10,Ds10,E10,F10,Fs10,NOTE_OFF,/*G10,*/NUM_NOTES
  60      =1  
  61      =1  };
  62      =1  
  63      =1  
  64      =1  
  65      =1  
  66      =1  // Voice messages. (bits 0..3 are the channel number)
  67      =1  
  68      =1  #define NOTE_OFF            0x80  // + 2 bytes, pitch (note), velocity
  69      =1  
  70      =1  #define NOTE_ON             0x90  // + 2 bytes, pitch (note), velocity
  71      =1  
  72      =1  #define KEY_PRESSURE        0xa0  // + 2 bytes, pitch (note), pressure
  73      =1  
  74      =1  #define CONTROL             0xb0  // + 2 bytes, controller, setting
  75      =1  
  76      =1  #define PROGRAM             0xc0  // + 1 byte, program (patch)
  77      =1  
  78      =1  #define CHAN_PRESSURE       0xd0  // + 1 byte, pressure
  79      =1  
  80      =1  #define PITCH_WHEEL         0xe0  // + 2 bytes, 14bit value, 7 lsb's first
  81      =1  
  82      =1  
  83      =1  // System messages
  84      =1  
  85      =1  #define SYSTEM_EXCLUSIVE    0xf0
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 7   

  86      =1  
  87      =1  #define SONG_POSITION       0xf2
  88      =1  
  89      =1  #define SONG_SELECT         0xf3
  90      =1  
  91      =1  #define TUNE_REQUEST        0xf6
  92      =1  
  93      =1  #define EOX                 0xf7 // system exclusive terminator
  94      =1  
  95      =1  
  96      =1  // Real Time messages
  97      =1  
  98      =1  #define TIMING_CLOCK        0xf8
  99      =1  
 100      =1  #define START               0xfa
 101      =1  
 102      =1  #define CONTINUE            0xfb
 103      =1  
 104      =1  #define STOP                0xfc
 105      =1  
 106      =1  #define ACTIVE_SENSING      0xfe
 107      =1  
 108      =1  #define SYSTEM_RESET        0xff
 109      =1  
 110      =1  
 111      =1  
 112      =1  
 113      =1  // Controllers
 114      =1  
 115      =1  
 116      =1  // msb of 14 bit values
 117      =1  
 118      =1  #define BANK_hi             0x00
 119      =1  
 120      =1  #define MOD_WHEEL_hi        0x01
 121      =1  
 122      =1  #define BREATH_CTRL_hi      0x02
 123      =1  
 124      =1  #define FOOT_PEDAL_hi       0x04
 125      =1  
 126      =1  #define PORTAMENTO_TIME_hi  0x05
 127      =1  
 128      =1  #define DATA_ENTRY_hi       0x06
 129      =1  
 130      =1  #define VOLUME_hi           0x07
 131      =1  
 132      =1  #define BALANCE_hi          0x08
 133      =1  
 134      =1  #define PAN_POSN_hi         0x0a
 135      =1  
 136      =1  #define EXPRESSION_hi       0x0b
 137      =1  
 138      =1  #define EFFECT_CTRL_1_hi    0x0c
 139      =1  
 140      =1  #define EFFECT_CTRL_2_hi    0x0d
 141      =1  
 142      =1  #define GENERAL_SLIDER_1_hi 0x10
 143      =1  
 144      =1  #define GENERAL_SLIDER_2_hi 0x11
 145      =1  
 146      =1  #define GENERAL_SLIDER_3_hi 0x12
 147      =1  
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 8   

 148      =1  #define GENERAL_SLIDER_4_hi 0x13
 149      =1  
 150      =1  
 151      =1  // lsb of 14 bit values
 152      =1  
 153      =1  #define BANK_lo             0x20
 154      =1  
 155      =1  #define MOD_WHEEL_lo        0x21
 156      =1  
 157      =1  #define BREATH_CTRL_lo      0x22
 158      =1  
 159      =1  #define FOOT_PEDAL_lo       0x24
 160      =1  
 161      =1  #define PORTAMENTO_TIME_lo  0x25
 162      =1  
 163      =1  #define DATA_ENTRY_lo       0x26
 164      =1  
 165      =1  #define VOLUME_lo           0x27
 166      =1  
 167      =1  #define BALANCE_lo          0x28
 168      =1  
 169      =1  #define PAN_POSN_lo         0x2a
 170      =1  
 171      =1  #define EXPRESSION_lo       0x2b
 172      =1  
 173      =1  #define EFFECT_CTRL_1_lo    0x2c
 174      =1  
 175      =1  #define EFFECT_CTRL_2_lo    0x2d
 176      =1  
 177      =1  #define GENERAL_SLIDER_1_lo 0x30
 178      =1  
 179      =1  #define GENERAL_SLIDER_2_lo 0x31
 180      =1  
 181      =1  #define GENERAL_SLIDER_3_lo 0x32
 182      =1  
 183      =1  #define GENERAL_SLIDER_4_lo 0x33
 184      =1  
 185      =1  
 186      =1  // switches, >=64 = on, <64 = off
 187      =1  
 188      =1  #define HOLD_PEDAL_on       0x40
 189      =1  
 190      =1  #define PORTAMENTO_on       0x41
 191      =1  
 192      =1  #define SUSTENUTO_PEDAL_on  0x42
 193      =1  
 194      =1  #define SOFT_PEDAL_on       0x43
 195      =1  
 196      =1  #define LEGATO_PEDAL_on     0x44
 197      =1  
 198      =1  #define HOLD_2_PEDAL_on     0x45
 199      =1  
 200      =1  
 201      =1  // 7 bit values
 202      =1  
 203      =1  #define SOUND_VARIATION     0x46
 204      =1  
 205      =1  #define SOUND_TIMBRE        0x47
 206      =1  
 207      =1  #define SOUND_RELEASE_TIME  0x48
 208      =1  
 209      =1  #define SOUND_ATTACK_TIME   0x49
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 9   

 210      =1  
 211      =1  #define SOUND_BRIGHTNESS    0x4a
 212      =1  
 213      =1  #define SOUND_CTRL_6        0x4b
 214      =1  
 215      =1  #define SOUND_CTRL_7        0x4c
 216      =1  
 217      =1  #define SOUND_CTRL_8        0x4d
 218      =1  
 219      =1  #define SOUND_CTRL_9        0x4e
 220      =1  
 221      =1  #define SOUND_CTRL_10       0x4f
 222      =1  
 223      =1  
 224      =1  // switches, >=64 = on, <64 = off
 225      =1  
 226      =1  #define GENERAL_BUTTON_1_on 0x50
 227      =1  
 228      =1  #define GENERAL_BUTTON_2_on 0x51
 229      =1  
 230      =1  #define GENERAL_BUTTON_3_on 0x52
 231      =1  
 232      =1  #define GENERAL_BUTTON_4_on 0x53
 233      =1  
 234      =1  
 235      =1  // 7 bit values
 236      =1  
 237      =1  #define EFFECTS_LEVEL       0x5b
 238      =1  
 239      =1  #define TREMULO_LEVEL       0x5c
 240      =1  
 241      =1  #define CHORUS_LEVEL        0x5d
 242      =1  
 243      =1  #define CELESTE_LEVEL       0x5e
 244      =1  
 245      =1  #define PHASER_LEVEL        0x5f
 246      =1  
 247      =1  
 248      =1  #define DATA_BUTTON_INC     0x60
 249      =1  
 250      =1  #define DATA_BUTTON_DEC     0x61
 251      =1  
 252      =1  
 253      =1  // 14 bit values
 254      =1  
 255      =1  #define NON_REG_PARM_lo     0x62
 256      =1  
 257      =1  #define NON_REG_PARM_hi     0x63
 258      =1  
 259      =1  #define REG_PARM_lo         0x64
 260      =1  
 261      =1  #define REG_PARM_hi         0x65
 262      =1  
 263      =1  
 264      =1  // mode controls
 265      =1  
 266      =1  #define ALL_SOUND_OFF       0x78
 267      =1  
 268      =1  #define ALL_CONTROLLERS_OFF 0x79
 269      =1  
 270      =1  #define LOCAL_KEYBOARD_on   0x7a
 271      =1  
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 10  

 272      =1  #define ALL_NOTES_OFF       0x7b
 273      =1  
 274      =1  #define OMNI_MODE_OFF       0x7c
 275      =1  
 276      =1  #define OMNI_MODE_ON        0x7d
 277      =1  
 278      =1  #define MONO_OPERATION      0x7e
 279      =1  
 280      =1  #define POLY_OPERATION      0x7f
 281      =1  
 282      =1  
 283      =1  
 284      =1  
 285      =1  // System Exclusive ID's
 286      =1  
 287      =1  #define SEQUENTIAL_CIRCUITS 0x01
 288      =1  
 289      =1  #define BIG_BRIAR           0x02
 290      =1  
 291      =1  #define OCTAVE_PLATEAU      0x03
 292      =1  
 293      =1  #define MOOG                0x04
 294      =1  
 295      =1  #define PASSPORT_DESIGNS    0x05
 296      =1  
 297      =1  #define LEXICON             0x06
 298      =1  
 299      =1  #define KURZWEIL            0x07
 300      =1  
 301      =1  #define FENDER              0x08
 302      =1  
 303      =1  #define GULBRANSEN          0x09
 304      =1  
 305      =1  #define DELTA_LABS          0x0a
 306      =1  
 307      =1  #define SOUND_COMP          0x0b
 308      =1  
 309      =1  #define GENERAL_ELECTRO     0x0c
 310      =1  
 311      =1  #define TECHMAR             0x0d
 312      =1  
 313      =1  #define MATTHEWS_RESEARCH   0x0e
 314      =1  
 315      =1  #define OBERHEIM            0x10
 316      =1  
 317      =1  #define PAIA                0x11
 318      =1  
 319      =1  #define SIMMONS             0x12
 320      =1  
 321      =1  #define DIGIDESIGN          0x13
 322      =1  
 323      =1  #define FAIRLIGHT           0x14
 324      =1  
 325      =1  #define JL_COOPER           0x15
 326      =1  
 327      =1  #define LOWERY              0x16
 328      =1  
 329      =1  #define LIN                 0x17
 330      =1  
 331      =1  #define EMU                 0x18
 332      =1  
 333      =1  #define PEAVEY              0x1b
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 11  

 334      =1  
 335      =1  
 336      =1  #define BON_TEMPI           0x20
 337      =1  
 338      =1  #define SEIL                0x21
 339      =1  
 340      =1  #define SYNTHEAXE           0x23
 341      =1  
 342      =1  #define HOHNER              0x24
 343      =1  
 344      =1  #define CRUMAR              0x25
 345      =1  
 346      =1  #define SOLTON              0x26
 347      =1  
 348      =1  #define JELLINGHAUS_MS      0x27
 349      =1  
 350      =1  #define CTS_                0x28
 351      =1  
 352      =1  #define PPG                 0x29
 353      =1  
 354      =1  #define ELKA                0x2f
 355      =1  
 356      =1  #define CHEETAH             0x36
 357      =1  
 358      =1  #define WALDORF             0x3e
 359      =1  
 360      =1  
 361      =1  #define KAWAI               0x40
 362      =1  
 363      =1  #define ROLAND              0x41
 364      =1  
 365      =1  #define KORG                0x42
 366      =1  
 367      =1  #define YAMAHA              0x43
 368      =1  
 369      =1  #define CASIO               0x44
 370      =1  
 371      =1  #define KAMIYA_STUDIO       0x46
 372      =1  
 373      =1  #define AKAI                0x47
 374      =1  
 375      =1  #define VICTOR              0x48
 376      =1  
 377      =1  #define FUJITSU             0x4b
 378      =1  
 379      =1  #define SONY                0x4c
 380      =1  
 381      =1  #define TEAC                0x4e
 382      =1  
 383      =1  #define MATSUSHITA          0x50
 384      =1  
 385      =1  #define FOSTEX              0x51
 386      =1  
 387      =1  #define ZOOM                0x52
 388      =1  
 389      =1  #define MATSUSHITA2         0x54
 390      =1  
 391      =1  #define SUZUKI              0x55
 392      =1  
 393      =1  #define FUJI_SOUND          0x56
 394      =1  
 395      =1  #define ACOUSTIC_TECH_LIB   0x57
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 12  

 396      =1  
 397      =1  
 398      =1  #define EDUCATIONAL_USE_ID  0x7d // for educational or development use only
 399      =1  
 400      =1  #define NON_REAL_TIME_ID    0x7e
 401      =1  
 402      =1  #define REAL_TIME_ID        0x7f
 403      =1  
 404      =1  
 405      =1  #endif
   3          #include "itrip.h"
   1      =1  /*
   2      =1  itrip HEADERZ v1e-9
   3      =1  */
   4      =1  
   5      =1  #ifndef ITRIP_H
   6      =1  #define ITRIP_H 
   7      =1  
   8      =1  #include <REG936.H>
   1      =2  /*--------------------------------------------------------------------------
   2      =2  REG936.H
   3      =2  
   4      =2  Header file for Philips 89LPC936
   5      =2  Copyright (c) 1988-2006 KEIL - An ARM Company
   6      =2  All rights reserved.
   7      =2  V1.1
   8      =2  --------------------------------------------------------------------------*/
   9      =2  
  10      =2  #ifndef __REG936_H__
  11      =2  #define __REG936_H__
  12      =2  
  13      =2  /*  BYTE Registers  */
  14      =2  sfr P0   = 0x80;
  15      =2  sfr P1   = 0x90;
  16      =2  sfr P2   = 0xA0;
  17      =2  sfr P3   = 0xB0;
  18      =2  sfr PSW  = 0xD0;
  19      =2  sfr ACC  = 0xE0;
  20      =2  sfr B    = 0xF0;
  21      =2  sfr SP   = 0x81;
  22      =2  sfr DPL  = 0x82;
  23      =2  sfr DPH  = 0x83;
  24      =2  sfr PCON = 0x87;
  25      =2  sfr TCON = 0x88;
  26      =2  sfr TMOD = 0x89;
  27      =2  sfr TL0  = 0x8A;
  28      =2  sfr TL1  = 0x8B;
  29      =2  sfr TH0  = 0x8C;
  30      =2  sfr TH1  = 0x8D;
  31      =2  sfr IEN0 = 0xA8;
  32      =2  sfr IP0  = 0xB8;
  33      =2  sfr SCON = 0x98;
  34      =2  sfr SBUF = 0x99;
  35      =2  
  36      =2  sfr ADCON0 = 0x8E;
  37      =2  sfr ADCON1 = 0x97;
  38      =2  sfr ADMODA = 0xC0;
  39      =2  sfr ADMODB = 0xA1;
  40      =2  sfr ADINS  = 0xA3;
  41      =2  sfr AD0DAT0= 0xC5;
  42      =2  sfr AD0DAT1= 0xC6;
  43      =2  sfr AD0DAT2= 0xC7;
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 13  

  44      =2  sfr AD0DAT3= 0xF4;
  45      =2  sfr AD1DAT0= 0xD5;
  46      =2  sfr AD1DAT1= 0xD6;
  47      =2  sfr AD1DAT2= 0xD7;
  48      =2  sfr AD1DAT3= 0xF5;
  49      =2  sfr AD0BH  = 0xBB;
  50      =2  sfr AD0BL  = 0xA6;
  51      =2  sfr AD1BH  = 0xC4;
  52      =2  sfr AD1BL  = 0xBC;
  53      =2  sfr AUXR1  = 0xA2;
  54      =2  sfr SADDR  = 0xA9;
  55      =2  sfr SADEN  = 0xB9;
  56      =2  sfr TL2    = 0xCC;
  57      =2  sfr TH2    = 0xCD;
  58      =2  sfr BRGR0  = 0xBE;
  59      =2  sfr BRGR1  = 0xBF;
  60      =2  sfr BRGCON = 0xBD;
  61      =2  sfr CCCRA  = 0xEA;
  62      =2  sfr CCCRB  = 0xEB;
  63      =2  sfr CCCRC  = 0xEC;
  64      =2  sfr CCCRD  = 0xED;
  65      =2  sfr CMP1   = 0xAC;
  66      =2  sfr CMP2   = 0xAD;
  67      =2  sfr DEECON = 0xF1;
  68      =2  sfr DEEDAT = 0xF2;
  69      =2  sfr DEEADR = 0xF3;
  70      =2  sfr DIVM   = 0x95;
  71      =2  sfr I2ADR  = 0xDB;
  72      =2  sfr I2CON  = 0xD8;
  73      =2  sfr I2DAT  = 0xDA;
  74      =2  sfr I2SCLH = 0xDD;
  75      =2  sfr I2SCLL = 0xDC;
  76      =2  sfr I2STAT = 0xD9;
  77      =2  sfr ICRAH  = 0xAB;
  78      =2  sfr ICRAL  = 0xAA;
  79      =2  sfr ICRBH  = 0xAF;
  80      =2  sfr ICRBL  = 0xAE;
  81      =2  sfr IEN1   = 0xE8;
  82      =2  sfr IP1    = 0xF8;
  83      =2  sfr IP1H   = 0xF7;
  84      =2  sfr KBCON  = 0x94;
  85      =2  sfr KBMASK = 0x86;
  86      =2  sfr KBPATN = 0x93;
  87      =2  sfr OCRAH  = 0xEF;
  88      =2  sfr OCRAL  = 0xEE;
  89      =2  sfr OCRBH  = 0xFB;
  90      =2  sfr OCRBL  = 0xFA;
  91      =2  sfr OCRCH  = 0xFD;
  92      =2  sfr OCRCL  = 0xFC;
  93      =2  sfr OCRDH  = 0xFF;
  94      =2  sfr OCRDL  = 0xFE;
  95      =2  sfr P0M1   = 0x84;
  96      =2  sfr P0M2   = 0x85;
  97      =2  sfr P1M1   = 0x91;
  98      =2  sfr P1M2   = 0x92;
  99      =2  sfr P2M1   = 0xA4;
 100      =2  sfr P2M2   = 0xA5;
 101      =2  sfr P3M1   = 0xB1;
 102      =2  sfr P3M2   = 0xB2;
 103      =2  sfr PCONA  = 0xB5;
 104      =2  sfr PT0AD  = 0xF6;
 105      =2  sfr RSTSRC = 0xDF;
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 14  

 106      =2  sfr RTCCON = 0xD1;
 107      =2  sfr RTCH   = 0xD2;
 108      =2  sfr RTCL   = 0xD3;
 109      =2  sfr SSTAT  = 0xBA;
 110      =2  sfr SPCTL  = 0xE2;
 111      =2  sfr SPSTAT = 0xE1;
 112      =2  sfr SPDAT  = 0xE3;
 113      =2  sfr TAMOD  = 0x8F;
 114      =2  sfr TCR20  = 0xC8;
 115      =2  sfr TCR21  = 0xF9;
 116      =2  sfr TICR2  = 0xC9;
 117      =2  sfr TIFR2  = 0xE9;
 118      =2  sfr TISE2  = 0xDE;
 119      =2  sfr TOR2H  = 0xCF;
 120      =2  sfr TOR2L  = 0xCE;
 121      =2  sfr TPCR2H = 0xCB;
 122      =2  sfr TPCR2L = 0xCA;
 123      =2  sfr TRIM   = 0x96;
 124      =2  sfr WDCON  = 0xA7;
 125      =2  sfr WDL    = 0xC1;
 126      =2  sfr WFEED1 = 0xC2;
 127      =2  sfr WFEED2 = 0xC3;
 128      =2  sfr IP0H   = 0xB7;
 129      =2  
 130      =2  /*  BIT Registers  */
 131      =2  ////AUXR1
 132      =2  //sbit DPS  = AUXR1^0;
 133      =2  ////not used
 134      =2  ////hard wired to 0
 135      =2  //sbit SRST = AUXR1^3;
 136      =2  //sbit ENT0 = AUXR1^4; //hardware toggle
 137      =2  //sbit ENT1 = AUXR1^5;
 138      =2  //sbit EBRR = AUXR1^6;
 139      =2  //sbit CLKLP = AUXR1^7;
 140      =2  
 141      =2  /*  PSW   */
 142      =2  sbit CY   = PSW^7;
 143      =2  sbit AC   = PSW^6;
 144      =2  sbit F0   = PSW^5;
 145      =2  sbit RS1  = PSW^4;
 146      =2  sbit RS0  = PSW^3;
 147      =2  sbit OV   = PSW^2;                 
 148      =2  sbit F1   = PSW^1;
 149      =2  sbit P    = PSW^0;
 150      =2  
 151      =2  /*  TCON  */
 152      =2  sbit TF1  = TCON^7;
 153      =2  sbit TR1  = TCON^6;
 154      =2  sbit TF0  = TCON^5;
 155      =2  sbit TR0  = TCON^4;
 156      =2  sbit IE1  = TCON^3;
 157      =2  sbit IT1  = TCON^2;
 158      =2  sbit IE0  = TCON^1;
 159      =2  sbit IT0  = TCON^0;
 160      =2  
 161      =2  /*  IEN0   */
 162      =2  sbit EA   = IEN0^7;
 163      =2  sbit EWDRT = IEN0^6;
 164      =2  sbit EBO   = IEN0^5;
 165      =2  sbit ES   = IEN0^4; // alternatively "ESR"
 166      =2  sbit ESR  = IEN0^4;
 167      =2  sbit ET1  = IEN0^3;
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 15  

 168      =2  sbit EX1  = IEN0^2;
 169      =2  sbit ET0  = IEN0^1;
 170      =2  sbit EX0  = IEN0^0;
 171      =2  
 172      =2  /*  IEN1   */
 173      =2  sbit EAD  = IEN1^7; // alternatively "EIEE" 
 174      =2  sbit EIEE = IEN1^7;
 175      =2  sbit EST  = IEN1^6;
 176      =2  sbit ECCU = IEN1^4;
 177      =2  sbit ESPI = IEN1^3;
 178      =2  sbit EC   = IEN1^2;
 179      =2  sbit EKBI = IEN1^1;
 180      =2  sbit EI2C = IEN1^0;
 181      =2  
 182      =2  /*  IP0   */ 
 183      =2  sbit PWDRT = IP0^6;
 184      =2  sbit PB0   = IP0^5;
 185      =2  sbit PS    = IP0^4; // alternatively "PSR"
 186      =2  sbit PSR   = IP0^4;
 187      =2  sbit PT1   = IP0^3;
 188      =2  sbit PX1   = IP0^2;
 189      =2  sbit PT0   = IP0^1;
 190      =2  sbit PX0   = IP0^0;
 191      =2  
 192      =2  /*  IP1   */
 193      =2  sbit PAD  = IP1^7; // alternatively "PIEE" 
 194      =2  sbit PIEE = IP1^7;
 195      =2  sbit PST  = IP1^6;
 196      =2  sbit PCCU = IP1^4;
 197      =2  sbit PSPI = IP1^3;
 198      =2  sbit PC_  = IP1^2;
 199      =2  sbit PKBI = IP1^1;
 200      =2  sbit PI2C = IP1^0;
 201      =2  
 202      =2  /*  SCON  */
 203      =2  sbit SM0  = SCON^7; // alternatively "FE"
 204      =2  sbit FE   = SCON^7;
 205      =2  sbit SM1  = SCON^6;
 206      =2  sbit SM2  = SCON^5;
 207      =2  sbit REN  = SCON^4;
 208      =2  sbit TB8  = SCON^3;
 209      =2  sbit RB8  = SCON^2;
 210      =2  sbit TI   = SCON^1;
 211      =2  sbit RI   = SCON^0;
 212      =2  
 213      =2  /*  I2CON  */
 214      =2  sbit I2EN  = I2CON^6;
 215      =2  sbit STA   = I2CON^5;
 216      =2  sbit STO   = I2CON^4;
 217      =2  sbit SI    = I2CON^3;
 218      =2  sbit AA    = I2CON^2;
 219      =2  sbit CRSEL = I2CON^0;
 220      =2  
 221      =2  /*  P0  */
 222      =2  sbit KB7 = P0^7; // alternatively "T1"
 223      =2  sbit T1 = P0^7;
 224      =2  sbit KB6 = P0^6; // alternatively "CMP1"
 225      =2  //sbit CMP1 = P0^6;
 226      =2  sbit KB5 = P0^5;
 227      =2  sbit KB4 = P0^4;
 228      =2  sbit KB3 = P0^3;
 229      =2  sbit KB2 = P0^2;
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 16  

 230      =2  sbit KB1 = P0^1;
 231      =2  sbit KB0 = P0^0; // alternatively "CMP2"
 232      =2  //sbit CMP2 = P0^0;
 233      =2  
 234      =2  /*  P1  */
 235      =2  sbit OCC     = P1^7;
 236      =2  sbit OCB     = P1^6;
 237      =2  sbit RST     = P1^5;
 238      =2  sbit INT1    = P1^4;
 239      =2  sbit INT0    = P1^3; // alternatively "SDA"
 240      =2  sbit SDA     = P1^3;
 241      =2  sbit T0      = P1^2; // alternatively "SCL"
 242      =2  sbit SCL     = P1^2;
 243      =2  sbit RxD     = P1^1;
 244      =2  sbit TxD     = P1^0;
 245      =2  
 246      =2  /*  P2  */
 247      =2  sbit ICA     = P2^7;
 248      =2  sbit OCA     = P2^6;
 249      =2  sbit SPICLK  = P2^5;
 250      =2  sbit SS      = P2^4;
 251      =2  sbit MISO    = P2^3;
 252      =2  sbit MOSI    = P2^2;
 253      =2  sbit OCD     = P2^1;
 254      =2  sbit ICB     = P2^0;
 255      =2  
 256      =2  /*  P3  */
 257      =2  sbit XTAL1= P3^1;
 258      =2  sbit XTAL2= P3^0;
 259      =2  
 260      =2  /* TCR20 */
 261      =2  sbit PLLEN = TCR20^7;
 262      =2  sbit HLTRN = TCR20^6;
 263      =2  sbit HLTEN = TCR20^5;
 264      =2  sbit ALTCD = TCR20^4;
 265      =2  sbit ALTAB = TCR20^3;
 266      =2  sbit TDIR2 = TCR20^2;
 267      =2  sbit TMOD21= TCR20^1;
 268      =2  sbit TMOD20= TCR20^0;
 269      =2  
 270      =2  /* ADMODA */
 271      =2  sbit BNDI1  = ADMODA^7;
 272      =2  sbit BURST1 = ADMODA^6;
 273      =2  sbit SCC1   = ADMODA^5;
 274      =2  sbit SCAN1  = ADMODA^4;
 275      =2  sbit BNDI0  = ADMODA^3;
 276      =2  sbit BURST0 = ADMODA^2;
 277      =2  sbit SCC0   = ADMODA^1;
 278      =2  sbit SCAN0  = ADMODA^0;
 279      =2  
 280      =2  #endif
 281      =2  
   9      =1  
  10      =1  /**************************TYPES*******************************************/
  11      =1  typedef unsigned char byte;
  12      =1  typedef unsigned int word; // 16 bits (is short)
  13      =1  
  14      =1  #define SYS_LEN 512
  15      =1  
  16      =1  typedef struct Riff_s {
  17      =1          word rAddy; //the physical address of riff
  18      =1          byte repeats;
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 17  

  19      =1  } RIFF_T;
  20      =1  
  21      =1  
  22      =1  /***********************DEFINE SWITCHES**********************/
  23      =1  //a totally different program actually!!!!
  24      =1  //#define COORD         //blast midi clock out of UArt and drive RT messages
  25      =1  #define BASIC_TX
  26      =1  //#define DEBUG_SIM
  27      =1  
  28      =1  //KEIL!!!!  you get the point!!!
  29      =1  //#ifdef (COORD && BASIC_TX)
  30      =1  //      #error "DUMB!!! L00K UP!!!"
  31      =1  //#endif
  32      =1  
  33      =1  
  34      =1  ///MIDI STUFF
  35      =1  #define MY_L_CHAN       0 //[0-15] //base channel
  36      =1  #define MY_V_CHAN       (MY_L_CHAN+1) //always Lchan++
  37      =1  #define MY_ID           0
  38      =1  
  39      =1  #define MAX_FREQ        1200
  40      =1  #define MIN_FREQ        700
  41      =1  #define NUM_NOTE_CMDS   (127-LUT_NUM_NOTES) //28
  42      =1  //we can either stuff cmds in 0-9 and 110-127 or rewrite storage...
  43      =1  //seems tricky to rewrite, we just map low and hi notes to cmds
  44      =1  //woah!!!  we could double these if we teamed up with NOTE_OFF...
  45      =1  //not ideal for storage....  maybe for todo
  46      =1  enum {
  47      =1          TX_OFF = 0,     //npc
  48      =1          TX_ON = 1,  //npc
  49      =1          UPDOWN_OFF = 2,
  50      =1          STATION_UP = 3,
  51      =1          STATION_DOWN = 4,
  52      =1          DOWN1 = 5,  //todo make relative...   align with pitch wheel
  53      =1          DOWN2 = 6,      
  54      =1          DOWN3 = 7,      
  55      =1          DOWN4 = 8,
  56      =1          DOWN5 = 9,
  57      =1          HOLD0 = 109,
  58      =1          UP1 = 110,
  59      =1          UP2 = 111,
  60      =1          UP3 = 112,
  61      =1          UP4 = 113,
  62      =1          UP5 = 114,
  63      =1          STATION_UP2 = 115,                      //npc
  64      =1          STATION_DOWN2 = 116,                     //npc//npc
  65      =1          STATION_UP3 = 117,
  66      =1          STATION_DOWN3 = 118,                                      //npc
  67      =1          STATION_UP4 = 119,                                                        //npc
  68      =1          STATION_DOWN4 = 120,                                                      //npc
  69      =1          STATION_UP5 = 121,      //npc
  70      =1          STATION_DOWN5 = 122,     //npc
  71      =1          STATION_UP6 = 123,                       //npc
  72      =1          STATION_DOWN6 = 124,                              //npc
  73      =1          HOLD1 = 125,
  74      =1          HOLD2 = 126,
  75      =1          NOTE_OFF_MEM = 127
  76      =1  };
  77      =1  
  78      =1  
  79      =1  /***************************GLOBALS******************************************/
  80      =1  extern volatile byte songNum; //127
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 18  

  81      =1  extern volatile word midiClk;
  82      =1  extern volatile byte xdata sysEx[SYS_LEN];
  83      =1  extern volatile byte sysIx;
  84      =1  
  85      =1  extern volatile RIFF_T* curSong;
  86      =1  extern volatile word nextRiff;
  87      =1  extern volatile byte curRiffCnt;
  88      =1  extern volatile word numRiffs;
  89      =1  extern volatile byte code* riff;
  90      =1  extern volatile word deltaPos;
  91      =1  extern volatile byte numNotes;
  92      =1  extern volatile byte nextNote;
  93      =1  
  94      =1  extern volatile byte bdata midiFlags;
  95      =1  //state flags -- maybe change to sbit????
  96      =1  extern bit AUDIO_L_ON;  
  97      =1  extern bit TX_VCC_ON;   
  98      =1  extern bit STEREO;              
  99      =1  extern bit PLAYING;             
 100      =1  extern bit BUTT_EN;             
 101      =1  extern bit OMNI;                
 102      =1  extern bit SONG_DONE;   
 103      =1  //extern bit SYS_EX_DONE;
 104      =1  
 105      =1  extern volatile byte periodH0;
 106      =1  extern volatile byte periodL0;
 107      =1  extern volatile byte periodH1;
 108      =1  extern volatile byte periodL1;
 109      =1  extern volatile word lDelta;   //a proportion of sorts
 110      =1  extern volatile word txDelta;
 111      =1  extern volatile bit deltaLUp;
 112      =1  extern volatile bit deltaTxUp;
 113      =1  //extern volatile byte deltaLMount; 
 114      =1  //extern volatile byte deltaTxMount;
 115      =1  
 116      =1  extern volatile bit txOffSwitch;
 117      =1  extern word station;
 118      =1  
 119      =1  /****************************PROTOS*********************/
 120      =1  void setup ();  //name and turn on
 121      =1  void delay (word cnt);
 122      =1  void shiftout8 (byte d);
 123      =1  //      void shiftout16 (word d);
 124      =1  //      void shiftout32 (word dh, word dl);
 125      =1  void txProg ();
 126      =1  void setFreq (word freq);
 127      =1  void delayT (word t);
 128      =1  void updateNote(void);
 129      =1  /************************EMPTY Protos****************/  
 130      =1  
 131      =1  
 132      =1  /******************PIN NAMES****************************/       
 133      =1  sbit txVcc = P2^7;
 134      =1  sbit txData = P2^2;
 135      =1  sbit txClk = P2^3;
 136      =1  sbit LED = P2^5;
 137      =1  sbit CE = P2^4;
 138      =1  sbit midButt = P0^0;
 139      =1  sbit hiButt = P0^1;
 140      =1  sbit loButt = P0^2;
 141      =1  sbit audioL = P0^3;
 142      =1  sbit audioN = P0^4;     //must be soldered and AC coupled (DC blocked) with 1 uF
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 19  

 143      =1  //sbit LEDout = P2
 144      =1  #endif
   4          
   5          ////////utility riffs
   6          
   7          unsigned char code sthRest[5] = {
   8                  5,
   9                          0, 255, //notes off
  10                  6, 127
  11          };
  12          
  13          unsigned char code eiRest[5] = {
  14                  5,
  15                          0, 255, //notes off
  16                  12, 127
  17          };
  18          
  19          unsigned char code qRest[5] = {
  20                  5,
  21                          0, 255, //notes off
  22                  24, 127
  23          };
  24          
  25          unsigned char code hRest[5] = {
  26                  5,
  27                          0, 255, //notes off
  28                  24*3, 127
  29          };
  30          
  31          unsigned char code wRest[5] = {
  32                  5,
  33                          0, 255, //notes off
  34                  24*4, 127
  35          };
  36          
  37          //single pitches with switches
  38          unsigned char code minorDrone[5] = {
  39                  5,
  40          #if (MY_L_CHAN == 0)
  41                  0, MINORDRONE_ROOT, 24*4, MINORDRONE_ROOT+0x80
  42          #elif (MY_L_CHAN == 2)
                      0, MINORDRONE_ROOT+2, 24*4, MINORDRONE_ROOT+2+0x80
              #elif (MY_L_CHAN == 4)
                      0, MINORDRONE_ROOT+3, 24*4, MINORDRONE_ROOT+3+0x80
              #elif (MY_L_CHAN == 6)
                      0, MINORDRONE_ROOT+5, 24*4, MINORDRONE_ROOT+5+0x80
              #elif (MY_L_CHAN == 8)
                      0, MINORDRONE_ROOT+7, 24*4, MINORDRONE_ROOT+7+0x80
              #elif (MY_L_CHAN == 10)
                      0, MINORDRONE_ROOT+8, 24*4, MINORDRONE_ROOT+8+0x80
              #elif (MY_L_CHAN == 12)
                      0, MINORDRONE_ROOT+10, 24*4, MINORDRONE_ROOT+10+0x80
              #elif (MY_L_CHAN == 14)
                      0, MINORDRONE_ROOT+11, 24*4, MINORDRONE_ROOT+11+0x80
              #endif
  57          };
  58          
  59          unsigned char code wholeDrone[5] = {
  60                  5,
  61                  0, WHOLEDRONE_ROOT+MY_L_CHAN, 24*4, WHOLEDRONE_ROOT+0x80+MY_L_CHAN
  62          };
  63          
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 20  

  64          //COORD UTILL
  65          unsigned char code sthRestCoord[RECO_S] = {      //one empty bar
  66                  RECO_S,
  67                  6, NOTE_ON
  68          };
  69          
  70          unsigned char code eiRestCoord[RECO_S] = {       //one empty bar
  71                  RECO_S,
  72                  12, NOTE_ON
  73          };
  74          
  75          unsigned char code qRestCoord[RECO_S] = {        //one empty bar
  76                  RECO_S,
  77                  24, NOTE_ON
  78          };
  79          
  80          unsigned char code hRestCoord[RECO_S] = {        //one empty bar
  81                  RECO_S,
  82                  24*2, NOTE_ON
  83          };
  84          
  85          unsigned char code wRestCoord[RECO_S] = {        //one empty bar
  86                  RECO_S,
  87                  24*4, NOTE_ON
  88          };
  89          
  90          unsigned char code on0Tx[CRTLTX_S] = {
  91                  CRTLTX_S,
  92                  0, CONTROL+0, GENERAL_BUTTON_1_on, 127
  93          };
  94          
  95          unsigned char code on2Tx[CRTLTX_S] = {
  96                  CRTLTX_S,
  97                  0, CONTROL+2, GENERAL_BUTTON_1_on, 127
  98          };
  99          
 100          unsigned char code on4Tx[CRTLTX_S] = {
 101                  CRTLTX_S,
 102                  0, CONTROL+4, GENERAL_BUTTON_1_on, 127
 103          };
 104          
 105          unsigned char code on6Tx[CRTLTX_S] = {
 106                  CRTLTX_S,
 107                  0, CONTROL+6, GENERAL_BUTTON_1_on, 127
 108          };
 109          
 110          unsigned char code on8Tx[CRTLTX_S] = {
 111                  CRTLTX_S,
 112                  0, CONTROL+8, GENERAL_BUTTON_1_on, 127
 113          };
 114          
 115          unsigned char code on10Tx[CRTLTX_S] = {
 116                  CRTLTX_S,
 117                  0, CONTROL+10, GENERAL_BUTTON_1_on, 127
 118          };
 119          
 120          unsigned char code on12Tx[CRTLTX_S] = {
 121                  CRTLTX_S,
 122                  0, CONTROL+12, GENERAL_BUTTON_1_on, 127
 123          };
 124          
 125          unsigned char code on14Tx[CRTLTX_S] = {
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 21  

 126                  CRTLTX_S,
 127                  0, CONTROL+14, GENERAL_BUTTON_1_on, 127
 128          };
 129          
 130          unsigned char code off0Tx[CRTLTX_S] = {
 131                  CRTLTX_S,
 132                  0, CONTROL+0, GENERAL_BUTTON_1_on, 0
 133          };
 134          
 135          unsigned char code off2Tx[CRTLTX_S] = {
 136                  CRTLTX_S,
 137                  0, CONTROL+2, GENERAL_BUTTON_1_on, 0
 138          };
 139          
 140          unsigned char code off4Tx[CRTLTX_S] = {
 141                  CRTLTX_S,
 142                  0, CONTROL+4, GENERAL_BUTTON_1_on, 0
 143          };
 144          
 145          unsigned char code off6Tx[CRTLTX_S] = {
 146                  CRTLTX_S,
 147                  0, CONTROL+6, GENERAL_BUTTON_1_on, 0
 148          };
 149          
 150          unsigned char code off8Tx[CRTLTX_S] = {
 151                  CRTLTX_S,
 152                  0, CONTROL+8, GENERAL_BUTTON_1_on, 0
 153          };
 154          
 155          unsigned char code off10Tx[CRTLTX_S] = {
 156                  CRTLTX_S,
 157                  0, CONTROL+10, GENERAL_BUTTON_1_on, 0
 158          };
 159          
 160          unsigned char code off12Tx[CRTLTX_S] = {
 161                  CRTLTX_S,
 162                  0, CONTROL+12, GENERAL_BUTTON_1_on, 0
 163          };
 164          
 165          unsigned char code off14Tx[CRTLTX_S] = {
 166                  CRTLTX_S,
 167                  0, CONTROL+14, GENERAL_BUTTON_1_on, 0
 168          };
 169          
 170          //heavy Beats!!!   ???
 171          #define CLKMULT 8
 172          unsigned char code beatCoord1[BEATCOORD1_S] = {
 173                  BEATCOORD1_S,
 174                  0, TEMPO_SET+((byte)(BEAT1_TEMPO>>16)), ((byte)(BEAT1_TEMPO>>8)), ((byte)(BEAT1_TEMPO)),
 175                          6*CLKMULT, CONTROL+14, GENERAL_BUTTON_1_on, 0,
 176                  7*CLKMULT, CONTROL+8, GENERAL_BUTTON_1_on, 0,
 177                  8*CLKMULT, CONTROL+12, GENERAL_BUTTON_1_on, 0,
 178                  9*CLKMULT, CONTROL+6, GENERAL_BUTTON_1_on, 0,
 179                  10*CLKMULT, CONTROL+10,  GENERAL_BUTTON_1_on, 0,
 180                  11*CLKMULT, CONTROL+4, GENERAL_BUTTON_1_on, 0,
 181                  12*CLKMULT, CONTROL+2, GENERAL_BUTTON_1_on, 0,
 182                  13*CLKMULT, CONTROL+0,  GENERAL_BUTTON_1_on, 0,
 183                          13*CLKMULT, CONTROL, GENERAL_BUTTON_1_on, 127,
 184                  12*CLKMULT, CONTROL+6, GENERAL_BUTTON_1_on, 127,
 185                  11*CLKMULT, CONTROL+2, GENERAL_BUTTON_1_on, 127,
 186                  10*CLKMULT, CONTROL+8, GENERAL_BUTTON_1_on, 127,
 187                  9*CLKMULT, CONTROL+4,  GENERAL_BUTTON_1_on, 127,
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 22  

 188                  8*CLKMULT, CONTROL+10, GENERAL_BUTTON_1_on, 127,
 189                  7*CLKMULT, CONTROL+12, GENERAL_BUTTON_1_on, 127,
 190                  6*CLKMULT, CONTROL+14,  GENERAL_BUTTON_1_on, 127
 191          //              6, CONTROL, GENERAL_BUTTON_1_on, 127,
 192          //      7, CONTROL+2, GENERAL_BUTTON_1_on, 127,
 193          //      8, CONTROL+4, GENERAL_BUTTON_1_on, 127,
 194          //      9, CONTROL+6, GENERAL_BUTTON_1_on, 127,
 195          //      10, CONTROL+8,  GENERAL_BUTTON_1_on, 127,
 196          //      11, CONTROL+10, GENERAL_BUTTON_1_on, 127,
 197          //      12, CONTROL+12, GENERAL_BUTTON_1_on, 127,
 198          //      13, CONTROL+14,  GENERAL_BUTTON_1_on, 127,
 199          //              13, CONTROL, GENERAL_BUTTON_1_on, 0,
 200          //      12, CONTROL+2, GENERAL_BUTTON_1_on, 0,
 201          //      11, CONTROL+4, GENERAL_BUTTON_1_on, 0,
 202          //      10, CONTROL+6, GENERAL_BUTTON_1_on, 0,
 203          //      9, CONTROL+8,  GENERAL_BUTTON_1_on, 0,
 204          //      8, CONTROL+10, GENERAL_BUTTON_1_on, 0,
 205          //      7, CONTROL+12, GENERAL_BUTTON_1_on, 0,
 206          //      6, CONTROL+14,  GENERAL_BUTTON_1_on, 0,
 207          };
 208          
 209          unsigned char code beatCoord2[BEATCOORD1_S] = {
 210                  BEATCOORD1_S,
 211                  0, TEMPO_SET+((byte)(BEAT2_TEMPO>>16)), ((byte)(BEAT2_TEMPO>>8)), ((byte)(BEAT2_TEMPO)),
 212                          6*CLKMULT, CONTROL+14, GENERAL_BUTTON_1_on, 127,
 213                  7*CLKMULT, CONTROL+14, GENERAL_BUTTON_1_on, 0,
 214                  8*CLKMULT, CONTROL+12, GENERAL_BUTTON_1_on, 127,
 215                  9*CLKMULT, CONTROL+12, GENERAL_BUTTON_1_on, 0,
 216                  10*CLKMULT, CONTROL+10,  GENERAL_BUTTON_1_on, 127,
 217                  11*CLKMULT, CONTROL+10, GENERAL_BUTTON_1_on, 0,
 218                  12*CLKMULT, CONTROL+8, GENERAL_BUTTON_1_on, 127,
 219                  13*CLKMULT, CONTROL+8,  GENERAL_BUTTON_1_on, 0,
 220                          13*CLKMULT, CONTROL+6, GENERAL_BUTTON_1_on, 127,
 221                  12*CLKMULT, CONTROL+6, GENERAL_BUTTON_1_on, 0,
 222                  11*CLKMULT, CONTROL+4, GENERAL_BUTTON_1_on, 127,
 223                  10*CLKMULT, CONTROL+4, GENERAL_BUTTON_1_on, 0,
 224                  9*CLKMULT, CONTROL+2,  GENERAL_BUTTON_1_on, 127,
 225                  8*CLKMULT, CONTROL+2, GENERAL_BUTTON_1_on, 0,
 226                  7*CLKMULT, CONTROL, GENERAL_BUTTON_1_on, 127,
 227                  6*CLKMULT, CONTROL,  GENERAL_BUTTON_1_on, 0
 228          };
 229          
 230          unsigned char code beat1[BEAT1_S] = {
 231                  BEAT1_S,
 232                  24*4, BEAT_ROOT//+((MY_L_CHAN*2))
 233          };
 234           
 235          //Our body
 236          
 237          //omes
 238          
 239          //driving me backwards!!!!! Vamp on Vcc....
 240          unsigned char code dmbInit[DMBINIT_S] = {        //tempo... does beat pickup!!! all but 6 off
 241                  DMBINIT_S,
 242                  0, TEMPO_SET+((byte)(DMB_TEMPO>>16)), ((byte)(DMB_TEMPO>>8)), ((byte)(DMB_TEMPO)),
 243                  3, CONTROL, GENERAL_BUTTON_1_on, 0,
 244                  3, CONTROL+2, GENERAL_BUTTON_1_on, 0,
 245                  3, CONTROL+4, GENERAL_BUTTON_1_on, 0,
 246                  3, CONTROL+6, GENERAL_BUTTON_1_on, 127, //only 7 on at first...
 247                  3, CONTROL+8,  GENERAL_BUTTON_1_on, 0,
 248                  3, CONTROL+10, GENERAL_BUTTON_1_on, 0,
 249                  3, CONTROL+12, GENERAL_BUTTON_1_on, 0,
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 23  

 250                  3, CONTROL+14,  GENERAL_BUTTON_1_on, 0  
 251          };
 252          
 253          unsigned char code dmbVamp0[DMBVAMP_S] = {
 254                  DMBVAMP_S,
 255                  12, 255,         //silent on down beat
 256                  12, DMB_PEDAL+0x80
 257          };
 258          
 259          unsigned char code dmbVamp1[DMBVAMP_S] = {
 260                  DMBVAMP_S,
 261                  12,     DMB_ROOT+0x80,
 262                  12, DMB_PEDAL+0x80
 263          };
 264          
 265          unsigned char code dmbRoot0[DMBROOT_S] = {
 266                  DMBROOT_S,
 267                          0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 268                  0, 255, 12, 127,
 269                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 270                  0, 255, 12, 127,
 271                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 272                  0, 255, 12, 127, 
 273                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 274                  0, 255, 12, 127, 
 275                          0, DMB_ROOT+12, 12, DMB_ROOT+7+0x80,
 276                  0, 255, 12, 127, 
 277                  0, DMB_ROOT+12, 12, DMB_ROOT+7+0x80,
 278                  0, 255, 12, 127, 
 279                  0, DMB_ROOT+12, 12, DMB_ROOT+7+0x80,
 280                  0, 255, 12, 127, 
 281                  0, DMB_ROOT+12, 12, DMB_ROOT+7+0x80,
 282                  0, 255, 12, 127, 
 283                          0, DMB_ROOT+12, 12, DMB_ROOT+9+0x80,
 284                  0, 255, 12, 127, 
 285                  0, DMB_ROOT+12, 12, DMB_ROOT+9+0x80,
 286                  0, 255, 12, 127, 
 287                  0, DMB_ROOT+12, 12, DMB_ROOT+9+0x80,
 288                  0, 255, 12, 127, 
 289                  0, DMB_ROOT+12, 12, DMB_ROOT+9+0x80,
 290                  0, 255, 12, 127, 
 291                          0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 292                  0, 255, 12, 127, 
 293                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 294                  0, 255, 12, 127, 
 295                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 296                  0, 255, 12, 127, 
 297                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 298                  0, 255, 12, 127 
 299          };
 300          
 301          unsigned char code dmbRoot1[DMBROOT_S] = {
 302                  DMBROOT_S,
 303                          0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 304                  0, DMB_PEDAL+0x80, 12, 127,
 305                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 306                  0, DMB_PEDAL+0x80, 12, 127,
 307                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 308                  0, DMB_PEDAL+0x80, 12, 127, 
 309                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 310                  0, DMB_PEDAL+0x80, 12, 127, 
 311                          0, DMB_ROOT+12, 12, DMB_ROOT+7+0x80,
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 24  

 312                  0, DMB_PEDAL+0x80, 12, 127, 
 313                  0, DMB_ROOT+12, 12, DMB_ROOT+7+0x80,
 314                  0, DMB_PEDAL+0x80, 12, 127, 
 315                  0, DMB_ROOT+12, 12, DMB_ROOT+7+0x80,
 316                  0, DMB_PEDAL+0x80, 12, 127, 
 317                  0, DMB_ROOT+12, 12, DMB_ROOT+7+0x80,
 318                  0, DMB_PEDAL+0x80, 12, 127, 
 319                          0, DMB_ROOT+12, 12, DMB_ROOT+9+0x80,
 320                  0, DMB_PEDAL+0x80, 12, 127, 
 321                  0, DMB_ROOT+12, 12, DMB_ROOT+9+0x80,
 322                  0, DMB_PEDAL+0x80, 12, 127, 
 323                  0, DMB_ROOT+12, 12, DMB_ROOT+9+0x80,
 324                  0, DMB_PEDAL+0x80, 12, 127, 
 325                  0, DMB_ROOT+12, 12, DMB_ROOT+9+0x80,
 326                  0, DMB_PEDAL+0x80, 12, 127, 
 327                          0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 328                  0, DMB_PEDAL+0x80, 12, 127, 
 329                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 330                  0, DMB_PEDAL+0x80, 12, 127, 
 331                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 332                  0, DMB_PEDAL+0x80, 12, 127, 
 333                  0, DMB_ROOT+12, 12, DMB_ROOT+8+0x80,
 334                  0, DMB_PEDAL+0x80, 12, 127 
 335          };
 336          
 337          unsigned char code dmbBDHa[DMBBD_S] = {  //hit plus halfRest
 338                  DMBBD_S,
 339                  1, DMB_ROOT+7,
 340                  1, DMB_ROOT-12,
 341                  46, 127
 342          };
 343          
 344          unsigned char code dmbBDWh[DMBBD_S] = {  //hit plus wholeRest
 345                  DMBBD_S,
 346                  1, DMB_ROOT+7,
 347                  1, DMB_ROOT-12,
 348                  94, 127
 349          };
 350          
 351          ////////////////// TEST_Riffs
 352          byte code testCo1[3] = {
 353                  3,
 354                  24*5, NOTE_ON   
 355          };
 356          
 357          byte code testCo1b[7] = {
 358                  5,
 359                  24*5, NOTE_ON,
 360          //      0, SONG_POSITION, 0x70, 0x01, //LSB first
 361                  24*5, START     
 362          };
 363          
 364          byte code testCo2[9] = {
 365                  9,
 366                  24*5, TEMPO_SET, 0x96, 0xb4, //240bpm??
 367                  24*5, TEMPO_SET+0x0F, 0xFF, 0xFF //slow as possible     
 368          };
 369          
 370          byte code testCo3[69] = {
 371                  69,
 372                  0, TEMPO_SET + 1, 0x2d, 0x68, //120bpm = 0x12D68
 373                  0, CONTROL, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 25  

 374                  0, CONTROL, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 375                  0, CONTROL+2, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 376                  0, CONTROL+2, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 377                  0, CONTROL+4, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 378                  0, CONTROL+4, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 379                  0, CONTROL+6, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 380                  0, CONTROL+6, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 381                  0, CONTROL+8, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 382                  0, CONTROL+8, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 383                  0, CONTROL+10, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 384                  0, CONTROL+10, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 385                  0, CONTROL+12, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 386                  0, CONTROL+12, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 387                  0, CONTROL+14, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 388                  0, CONTROL+14, GENERAL_SLIDER_1_lo, STATION_TO_LO(879)
 389          };                 
 390          
 391          byte code testCo3b[69] = {
 392                  69,
 393                  0, TEMPO_SET, 0x4b, 0x5a, //480bpm = 0x4b5a?
 394                  0, CONTROL, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 395                  0, CONTROL, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 396                  0, CONTROL+2, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 397                  0, CONTROL+2, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 398                  0, CONTROL+4, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 399                  0, CONTROL+4, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 400                  0, CONTROL+6, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 401                  0, CONTROL+6, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 402                  0, CONTROL+8, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 403                  0, CONTROL+8, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 404                  0, CONTROL+10, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 405                  0, CONTROL+10, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 406                  0, CONTROL+12, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 407                  0, CONTROL+12, GENERAL_SLIDER_1_lo, STATION_TO_LO(879),
 408                  0, CONTROL+14, GENERAL_SLIDER_1_hi, STATION_TO_HI(879),
 409                  0, CONTROL+14, GENERAL_SLIDER_1_lo, STATION_TO_LO(879)
 410          };
 411          
 412          byte code testCo3c[69] = {
 413                  69,
 414                  0, TEMPO_SET, 0x96, 0xb4, //240bpm
 415                  0, CONTROL, GENERAL_SLIDER_1_hi, STATION_TO_HI(1001),
 416                  0, CONTROL, GENERAL_SLIDER_1_lo, STATION_TO_LO(1001),
 417                  0, CONTROL+2, GENERAL_SLIDER_1_hi, STATION_TO_HI(1001),
 418                  0, CONTROL+2, GENERAL_SLIDER_1_lo, STATION_TO_LO(1001),
 419                  0, CONTROL+4, GENERAL_SLIDER_1_hi, STATION_TO_HI(1001),
 420                  0, CONTROL+4, GENERAL_SLIDER_1_lo, STATION_TO_LO(1001),
 421                  0, CONTROL+6, GENERAL_SLIDER_1_hi, STATION_TO_HI(1001),
 422                  0, CONTROL+6, GENERAL_SLIDER_1_lo, STATION_TO_LO(1001),
 423                  0, CONTROL+8, GENERAL_SLIDER_1_hi, STATION_TO_HI(1001),
 424                  0, CONTROL+8, GENERAL_SLIDER_1_lo, STATION_TO_LO(1001),
 425                  0, CONTROL+10, GENERAL_SLIDER_1_hi, STATION_TO_HI(1001),
 426                  0, CONTROL+10, GENERAL_SLIDER_1_lo, STATION_TO_LO(1001),
 427                  0, CONTROL+12, GENERAL_SLIDER_1_hi, STATION_TO_HI(1001),
 428                  0, CONTROL+12, GENERAL_SLIDER_1_lo, STATION_TO_LO(1001),
 429                  0, CONTROL+14, GENERAL_SLIDER_1_hi, STATION_TO_HI(1001),
 430                  0, CONTROL+14, GENERAL_SLIDER_1_lo, STATION_TO_LO(1001)
 431          };                 
 432          byte code testCo4[69] = {
 433                  69,
 434                  0, TEMPO_SET, 0x96, 0xb4, //240bpm??
 435                  0, CONTROL, GENERAL_BUTTON_1_on, 0,
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 26  

 436                  0, CONTROL+2, GENERAL_BUTTON_1_on, 0,
 437                  0, CONTROL+4, GENERAL_BUTTON_1_on, 0,
 438                  0, CONTROL+6, GENERAL_BUTTON_1_on, 0,
 439                  0, CONTROL+8,  GENERAL_BUTTON_1_on, 0,
 440                  0, CONTROL+10, GENERAL_BUTTON_1_on, 0,
 441                  0, CONTROL+12, GENERAL_BUTTON_1_on, 0,
 442                  24*5, CONTROL+14,  GENERAL_BUTTON_1_on, 0,
 443                  0, CONTROL, GENERAL_BUTTON_1_on, 127,
 444                  0, CONTROL+2, GENERAL_BUTTON_1_on, 127,
 445                  0, CONTROL+4, GENERAL_BUTTON_1_on, 127,
 446                  0, CONTROL+6, GENERAL_BUTTON_1_on, 127,
 447                  0, CONTROL+8,  GENERAL_BUTTON_1_on, 127,
 448                  0, CONTROL+10, GENERAL_BUTTON_1_on, 127,
 449                  0, CONTROL+12, GENERAL_BUTTON_1_on, 127,
 450                  24*5, CONTROL+14,  GENERAL_BUTTON_1_on, 127
 451          };
 452          
 453          byte code downR1[TEST_LEN+1] = {
 454                  TEST_LEN,
 455                  0, DOWN1,
 456                  0, 33,
 457                  24*2, TX_ON,
 458                  24*2, TX_OFF,
 459                  24, UPDOWN_OFF
 460          };
 461          
 462          byte code downR2[TEST_LEN+1] = {
 463                  TEST_LEN,
 464                  0, DOWN2,
 465                  0, 33,
 466                  24*2, TX_ON,
 467                  24*2, TX_OFF,
 468                  24, UPDOWN_OFF
 469          };
 470          
 471          byte code downR3[TEST_LEN+1] = {
 472                  TEST_LEN,
 473                  0, DOWN3,
 474                  0, 33,
 475                  24*2, TX_ON,
 476                  24*2, TX_OFF,
 477                  24, UPDOWN_OFF
 478          };
 479          
 480          byte code downR4[TEST_LEN+1] = {
 481                  TEST_LEN,
 482                  0, DOWN4,
 483                  0, 33,
 484                  24*2, TX_ON,
 485                  24*2, TX_OFF,
 486                  24, UPDOWN_OFF
 487          };
 488          
 489          byte code downR5[TEST_LEN+1] = {
 490                  TEST_LEN,
 491                  0, DOWN5,
 492                  0, 33,
 493                  24*2, TX_ON,
 494                  24*2, TX_OFF,
 495                  24, UPDOWN_OFF
 496          };
 497          
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 27  

 498          byte code upR1[TEST_LEN+1] = {
 499                  TEST_LEN,
 500                  0, UP1,
 501                  0, 33,
 502                  24*2, TX_ON,
 503                  24*2, TX_OFF,
 504                  24, UPDOWN_OFF
 505          };
 506          
 507          byte code upR2[TEST_LEN+1] = {
 508                  TEST_LEN,
 509                  0, UP2,
 510                  0, 33,
 511                  24*2, TX_ON,
 512                  24*2, TX_OFF,
 513                  24, UPDOWN_OFF
 514          };
 515          
 516          byte code upR3[TEST_LEN+1] = {
 517                  TEST_LEN,
 518                  0, UP3,
 519                  0, 33,
 520                  24*2, TX_ON,
 521                  24*2, TX_OFF,
 522                  24, UPDOWN_OFF
 523          };
 524          
 525          byte code upR4[TEST_LEN+1] = {
 526                  TEST_LEN,
 527                  0, UP4,
 528                  0, 33,
 529                  24*2, TX_ON,
 530                  24*2, TX_OFF,
 531                  24, UPDOWN_OFF
 532          };
 533          
 534          byte code upR5[TEST_LEN+1] = {
 535                  TEST_LEN,
 536                  0, UP5,
 537                  0, 33,
 538                  24*2, TX_ON,
 539                  24*2, TX_OFF,
 540                  24, UPDOWN_OFF
 541          };
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 28  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 29  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
F9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P1M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
P0M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
G9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P2M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
P1M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
AA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
P3M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P2M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
EI2C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
hRestCoord . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    002CH  3
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
CE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
EC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
EWDRT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
SPCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
txClk. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
hRest. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    000FH  5
SCC0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
HLTRN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
testCo1b . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0251H  7
txVcc. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
SCC1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
FE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
testCo3b . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    02A6H  69
dmbRoot0 . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    013EH  129
IEN0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
testCo3c . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    02EBH  69
dmbRoot1 . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    01BFH  129
on10Tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    004BH  5
qRestCoord . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0029H  3
IEN1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
RxD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
I2EN . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
PI2C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
on12Tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0050H  5
TxD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
SSTAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
on14Tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0055H  5
IP0H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
CMP1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
qRest. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    000AH  5
PWDRT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
IP1H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
CMP2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
wRestCoord . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    002FH  3
ADCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 30  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TMOD20 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
ADCON1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
Cs10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
wRest. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0014H  5
TMOD21 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
EIEE . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
Ds10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
Fs10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UPDOWN_OFF . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
SI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
EKBI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
WFEED1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
wholeDrone . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    001EH  5
WFEED2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
ECCU . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
PIEE . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
C10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
minorDrone . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0019H  5
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
D10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
E10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PKBI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
I2SCLH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
DEEADR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
F10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
testCo1. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    024EH  3
ADMODA . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
testCo2. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0258H  9
DEEDAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
ADMODB . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
testCo3. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0261H  69
TX_ON. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
testCo4. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0330H  69
STATION_UP . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
I2SCLL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
PCCU . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
DEECON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
DIVM . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
ESPI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
RTCH . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
NOTE_OFF_MEM . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TPCR2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
byte . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 31  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


RTCL . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
MOSI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
MISO . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
TPCR2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
I2STAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
off0Tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    005AH  5
KBMASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
off2Tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    005FH  5
KB0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
PSPI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
TRIM . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
BRGCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
word . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
KB1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
downR1 . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0375H  11
off4Tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0064H  5
STATION_DOWN . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
KB2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
downR2 . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0380H  11
KB3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
AD0BH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
AD0DAT0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
downR3 . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    038BH  11
off6Tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0069H  5
KB4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
AD1BH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
AD1DAT0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
AD0DAT1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
downR4 . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0396H  11
BURST0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
KB5. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
PB0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
KBPATN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
AD1DAT1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
AD0DAT2. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
downR5 . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    03A1H  11
off8Tx . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    006EH  5
BURST1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
KB6. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
AD1DAT2. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
AD0DAT3. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
KB7. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
AD0BL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
AD1DAT3. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
AD1BL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
SPICLK . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
EAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
beatCoord1 . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0082H  69
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 32  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
RTCCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
dmbInit. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    010FH  37
beatCoord2 . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    00C7H  69
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TCR20. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
ICA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TCR21. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
BNDI0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
ICB. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
TH2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
BNDI1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
beat1. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    010CH  3
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
TL2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
OCA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
I2ADR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
OCB. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
LED. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
OCC. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
PAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
I2DAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
UP1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCAN0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
OCD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
EBO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
UP2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCAN1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
UP3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HOLD0. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SDA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
HOLD1. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UP4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
HOLD2. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UP5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PT0AD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
on0Tx. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0032H  5
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 33  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


RIFF_T . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  rAddy. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  repeats. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
Riff_s . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  3
  rAddy. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  repeats. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
I2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
NUM_NOTES. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
midButt. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
STATION_UP2. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRA. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
on2Tx. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0037H  5
STATION_UP3. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRB. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
BRGR0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
STATION_UP4. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRC. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
BRGR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
on4Tx. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    003CH  5
STATION_UP5. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
audioL . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
STATION_UP6. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SPSTAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
on6Tx. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0041H  5
SCL. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
audioN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
RSTSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
Fm0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
on8Tx. . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0046H  5
Fm1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ALTAB. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
TICR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
As1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
dmbBDHa. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0240H  7
TDIR2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
As2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WDL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
As3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TX_OFF . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
TISE2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
TIFR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
ICRAH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
As4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
txData . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
ALTCD. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
ICRBH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 34  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


As5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
upR1 . . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    03ACH  11
DOWN1. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ESR. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
As6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
upR2 . . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    03B7H  11
eiRestCoord. . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0026H  3
DOWN2. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
XTAL1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
As7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
upR3 . . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    03C2H  11
off10Tx. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0073H  5
DOWN3. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
XTAL2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
EST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
ICRAL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
SADEN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
As8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
upR4 . . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    03CDH  11
sthRestCoord . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0023H  3
DOWN4. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ICRBL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
As9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
upR5 . . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    03D8H  11
off12Tx. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0078H  5
DOWN5. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRAH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
KBCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
Cs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRBH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
SADDR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
Cs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 35  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


off14Tx. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    007DH  5
eiRest . . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0005H  5
TOR2H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
OCRCH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
ADINS. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
Ds9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_DOWN2. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRDH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
Fs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
sthRest. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  5
STATION_DOWN3. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PC_. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
PCONA. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
OCRAL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
AUXR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
Fs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
hiButt . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
STATION_DOWN4. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRBL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
NOTE_OFF . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_DOWN5. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TOR2L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
OCRCL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
A4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_DOWN6. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PSR. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
OCRDL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
A5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
F1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
TAMOD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
A6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 36  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


C4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
A7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
A9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CRSEL. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
B9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
dmbBDWh. . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0247H  7
dmbVamp0 . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0134H  5
HLTEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
PLLEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
D9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
dmbVamp1 . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0139H  5
loButt . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
SPDAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
E9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V8.12   RIFF                                                                  12/05/2015 12:11:33 PAGE 37  

   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    995    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
