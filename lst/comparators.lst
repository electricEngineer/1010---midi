C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE COMPARATORS
OBJECT MODULE PLACED IN .\obj\comparators.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE test\comparators.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE 
                    -SYMBOLS PRINT(.\lst\comparators.lst) PREPRINT(.\lst\comparators.i) OBJECT(.\obj\comparators.obj)

line level    source

   1          /***********************************************************************
   2          MODULE:    Comparators
   3          VERSION:   1.02
   4          CONTAINS:  Routines for controlling the comparators on the Philips
   5                     P89LPC936
   6          COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7          LICENSE:   May be freely used in commercial and non-commercial code
   8                     without royalties provided this copyright notice remains
   9                     in this file and unaltered
  10          WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11                     MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12                     TO CHANGE THE CONTENTS OF THIS FILE
  13          GENERATED: On "Sep 30 2010" at "21:10:55" by Code Architect 2.06
  14          ***********************************************************************/
  15          
  16          // SFR description needs to be included
  17          #include <reg936.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG936.H
   3      =1  
   4      =1  Header file for Philips 89LPC936
   5      =1  Copyright (c) 1988-2006 KEIL - An ARM Company
   6      =1  All rights reserved.
   7      =1  V1.1
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __REG936_H__
  11      =1  #define __REG936_H__
  12      =1  
  13      =1  /*  BYTE Registers  */
  14      =1  sfr P0   = 0x80;
  15      =1  sfr P1   = 0x90;
  16      =1  sfr P2   = 0xA0;
  17      =1  sfr P3   = 0xB0;
  18      =1  sfr PSW  = 0xD0;
  19      =1  sfr ACC  = 0xE0;
  20      =1  sfr B    = 0xF0;
  21      =1  sfr SP   = 0x81;
  22      =1  sfr DPL  = 0x82;
  23      =1  sfr DPH  = 0x83;
  24      =1  sfr PCON = 0x87;
  25      =1  sfr TCON = 0x88;
  26      =1  sfr TMOD = 0x89;
  27      =1  sfr TL0  = 0x8A;
  28      =1  sfr TL1  = 0x8B;
  29      =1  sfr TH0  = 0x8C;
  30      =1  sfr TH1  = 0x8D;
  31      =1  sfr IEN0 = 0xA8;
  32      =1  sfr IP0  = 0xB8;
  33      =1  sfr SCON = 0x98;
  34      =1  sfr SBUF = 0x99;
  35      =1  
  36      =1  sfr ADCON0 = 0x8E;
  37      =1  sfr ADCON1 = 0x97;
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 2   

  38      =1  sfr ADMODA = 0xC0;
  39      =1  sfr ADMODB = 0xA1;
  40      =1  sfr ADINS  = 0xA3;
  41      =1  sfr AD0DAT0= 0xC5;
  42      =1  sfr AD0DAT1= 0xC6;
  43      =1  sfr AD0DAT2= 0xC7;
  44      =1  sfr AD0DAT3= 0xF4;
  45      =1  sfr AD1DAT0= 0xD5;
  46      =1  sfr AD1DAT1= 0xD6;
  47      =1  sfr AD1DAT2= 0xD7;
  48      =1  sfr AD1DAT3= 0xF5;
  49      =1  sfr AD0BH  = 0xBB;
  50      =1  sfr AD0BL  = 0xA6;
  51      =1  sfr AD1BH  = 0xC4;
  52      =1  sfr AD1BL  = 0xBC;
  53      =1  sfr AUXR1  = 0xA2;
  54      =1  sfr SADDR  = 0xA9;
  55      =1  sfr SADEN  = 0xB9;
  56      =1  sfr TL2    = 0xCC;
  57      =1  sfr TH2    = 0xCD;
  58      =1  sfr BRGR0  = 0xBE;
  59      =1  sfr BRGR1  = 0xBF;
  60      =1  sfr BRGCON = 0xBD;
  61      =1  sfr CCCRA  = 0xEA;
  62      =1  sfr CCCRB  = 0xEB;
  63      =1  sfr CCCRC  = 0xEC;
  64      =1  sfr CCCRD  = 0xED;
  65      =1  sfr CMP1   = 0xAC;
  66      =1  sfr CMP2   = 0xAD;
  67      =1  sfr DEECON = 0xF1;
  68      =1  sfr DEEDAT = 0xF2;
  69      =1  sfr DEEADR = 0xF3;
  70      =1  sfr DIVM   = 0x95;
  71      =1  sfr I2ADR  = 0xDB;
  72      =1  sfr I2CON  = 0xD8;
  73      =1  sfr I2DAT  = 0xDA;
  74      =1  sfr I2SCLH = 0xDD;
  75      =1  sfr I2SCLL = 0xDC;
  76      =1  sfr I2STAT = 0xD9;
  77      =1  sfr ICRAH  = 0xAB;
  78      =1  sfr ICRAL  = 0xAA;
  79      =1  sfr ICRBH  = 0xAF;
  80      =1  sfr ICRBL  = 0xAE;
  81      =1  sfr IEN1   = 0xE8;
  82      =1  sfr IP1    = 0xF8;
  83      =1  sfr IP1H   = 0xF7;
  84      =1  sfr KBCON  = 0x94;
  85      =1  sfr KBMASK = 0x86;
  86      =1  sfr KBPATN = 0x93;
  87      =1  sfr OCRAH  = 0xEF;
  88      =1  sfr OCRAL  = 0xEE;
  89      =1  sfr OCRBH  = 0xFB;
  90      =1  sfr OCRBL  = 0xFA;
  91      =1  sfr OCRCH  = 0xFD;
  92      =1  sfr OCRCL  = 0xFC;
  93      =1  sfr OCRDH  = 0xFF;
  94      =1  sfr OCRDL  = 0xFE;
  95      =1  sfr P0M1   = 0x84;
  96      =1  sfr P0M2   = 0x85;
  97      =1  sfr P1M1   = 0x91;
  98      =1  sfr P1M2   = 0x92;
  99      =1  sfr P2M1   = 0xA4;
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 3   

 100      =1  sfr P2M2   = 0xA5;
 101      =1  sfr P3M1   = 0xB1;
 102      =1  sfr P3M2   = 0xB2;
 103      =1  sfr PCONA  = 0xB5;
 104      =1  sfr PT0AD  = 0xF6;
 105      =1  sfr RSTSRC = 0xDF;
 106      =1  sfr RTCCON = 0xD1;
 107      =1  sfr RTCH   = 0xD2;
 108      =1  sfr RTCL   = 0xD3;
 109      =1  sfr SSTAT  = 0xBA;
 110      =1  sfr SPCTL  = 0xE2;
 111      =1  sfr SPSTAT = 0xE1;
 112      =1  sfr SPDAT  = 0xE3;
 113      =1  sfr TAMOD  = 0x8F;
 114      =1  sfr TCR20  = 0xC8;
 115      =1  sfr TCR21  = 0xF9;
 116      =1  sfr TICR2  = 0xC9;
 117      =1  sfr TIFR2  = 0xE9;
 118      =1  sfr TISE2  = 0xDE;
 119      =1  sfr TOR2H  = 0xCF;
 120      =1  sfr TOR2L  = 0xCE;
 121      =1  sfr TPCR2H = 0xCB;
 122      =1  sfr TPCR2L = 0xCA;
 123      =1  sfr TRIM   = 0x96;
 124      =1  sfr WDCON  = 0xA7;
 125      =1  sfr WDL    = 0xC1;
 126      =1  sfr WFEED1 = 0xC2;
 127      =1  sfr WFEED2 = 0xC3;
 128      =1  sfr IP0H   = 0xB7;
 129      =1  
 130      =1  /*  BIT Registers  */
 131      =1  /*  PSW   */
 132      =1  sbit CY   = PSW^7;
 133      =1  sbit AC   = PSW^6;
 134      =1  sbit F0   = PSW^5;
 135      =1  sbit RS1  = PSW^4;
 136      =1  sbit RS0  = PSW^3;
 137      =1  sbit OV   = PSW^2;
 138      =1  sbit F1   = PSW^1;
 139      =1  sbit P    = PSW^0;
 140      =1  
 141      =1  /*  TCON  */
 142      =1  sbit TF1  = TCON^7;
 143      =1  sbit TR1  = TCON^6;
 144      =1  sbit TF0  = TCON^5;
 145      =1  sbit TR0  = TCON^4;
 146      =1  sbit IE1  = TCON^3;
 147      =1  sbit IT1  = TCON^2;
 148      =1  sbit IE0  = TCON^1;
 149      =1  sbit IT0  = TCON^0;
 150      =1  
 151      =1  /*  IEN0   */
 152      =1  sbit EA   = IEN0^7;
 153      =1  sbit EWDRT = IEN0^6;
 154      =1  sbit EBO   = IEN0^5;
 155      =1  sbit ES   = IEN0^4; // alternatively "ESR"
 156      =1  sbit ESR  = IEN0^4;
 157      =1  sbit ET1  = IEN0^3;
 158      =1  sbit EX1  = IEN0^2;
 159      =1  sbit ET0  = IEN0^1;
 160      =1  sbit EX0  = IEN0^0;
 161      =1  
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 4   

 162      =1  /*  IEN1   */
 163      =1  sbit EAD  = IEN1^7; // alternatively "EIEE" 
 164      =1  sbit EIEE = IEN1^7;
 165      =1  sbit EST  = IEN1^6;
 166      =1  sbit ECCU = IEN1^4;
 167      =1  sbit ESPI = IEN1^3;
 168      =1  sbit EC   = IEN1^2;
 169      =1  sbit EKBI = IEN1^1;
 170      =1  sbit EI2C = IEN1^0;
 171      =1  
 172      =1  /*  IP0   */ 
 173      =1  sbit PWDRT = IP0^6;
 174      =1  sbit PB0   = IP0^5;
 175      =1  sbit PS    = IP0^4; // alternatively "PSR"
 176      =1  sbit PSR   = IP0^4;
 177      =1  sbit PT1   = IP0^3;
 178      =1  sbit PX1   = IP0^2;
 179      =1  sbit PT0   = IP0^1;
 180      =1  sbit PX0   = IP0^0;
 181      =1  
 182      =1  /*  IP1   */
 183      =1  sbit PAD  = IP1^7; // alternatively "PIEE" 
 184      =1  sbit PIEE = IP1^7;
 185      =1  sbit PST  = IP1^6;
 186      =1  sbit PCCU = IP1^4;
 187      =1  sbit PSPI = IP1^3;
 188      =1  sbit PC_  = IP1^2;
 189      =1  sbit PKBI = IP1^1;
 190      =1  sbit PI2C = IP1^0;
 191      =1  
 192      =1  /*  SCON  */
 193      =1  sbit SM0  = SCON^7; // alternatively "FE"
 194      =1  sbit FE   = SCON^7;
 195      =1  sbit SM1  = SCON^6;
 196      =1  sbit SM2  = SCON^5;
 197      =1  sbit REN  = SCON^4;
 198      =1  sbit TB8  = SCON^3;
 199      =1  sbit RB8  = SCON^2;
 200      =1  sbit TI   = SCON^1;
 201      =1  sbit RI   = SCON^0;
 202      =1  
 203      =1  /*  I2CON  */
 204      =1  sbit I2EN  = I2CON^6;
 205      =1  sbit STA   = I2CON^5;
 206      =1  sbit STO   = I2CON^4;
 207      =1  sbit SI    = I2CON^3;
 208      =1  sbit AA    = I2CON^2;
 209      =1  sbit CRSEL = I2CON^0;
 210      =1  
 211      =1  /*  P0  */
 212      =1  sbit KB7 = P0^7; // alternatively "T1"
 213      =1  sbit T1 = P0^7;
 214      =1  sbit KB6 = P0^6; // alternatively "CMP1"
 215      =1  //sbit CMP1 = P0^6;
 216      =1  sbit KB5 = P0^5;
 217      =1  sbit KB4 = P0^4;
 218      =1  sbit KB3 = P0^3;
 219      =1  sbit KB2 = P0^2;
 220      =1  sbit KB1 = P0^1;
 221      =1  sbit KB0 = P0^0; // alternatively "CMP2"
 222      =1  //sbit CMP2 = P0^0;
 223      =1  
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 5   

 224      =1  /*  P1  */
 225      =1  sbit OCC     = P1^7;
 226      =1  sbit OCB     = P1^6;
 227      =1  sbit RST     = P1^5;
 228      =1  sbit INT1    = P1^4;
 229      =1  sbit INT0    = P1^3; // alternatively "SDA"
 230      =1  sbit SDA     = P1^3;
 231      =1  sbit T0      = P1^2; // alternatively "SCL"
 232      =1  sbit SCL     = P1^2;
 233      =1  sbit RxD     = P1^1;
 234      =1  sbit TxD     = P1^0;
 235      =1  
 236      =1  /*  P2  */
 237      =1  sbit ICA     = P2^7;
 238      =1  sbit OCA     = P2^6;
 239      =1  sbit SPICLK  = P2^5;
 240      =1  sbit SS      = P2^4;
 241      =1  sbit MISO    = P2^3;
 242      =1  sbit MOSI    = P2^2;
 243      =1  sbit OCD     = P2^1;
 244      =1  sbit ICB     = P2^0;
 245      =1  
 246      =1  /*  P3  */
 247      =1  sbit XTAL1= P3^1;
 248      =1  sbit XTAL2= P3^0;
 249      =1  
 250      =1  /* TCR20 */
 251      =1  sbit PLLEN = TCR20^7;
 252      =1  sbit HLTRN = TCR20^6;
 253      =1  sbit HLTEN = TCR20^5;
 254      =1  sbit ALTCD = TCR20^4;
 255      =1  sbit ALTAB = TCR20^3;
 256      =1  sbit TDIR2 = TCR20^2;
 257      =1  sbit TMOD21= TCR20^1;
 258      =1  sbit TMOD20= TCR20^0;
 259      =1  
 260      =1  /* ADMODA */
 261      =1  sbit BNDI1  = ADMODA^7;
 262      =1  sbit BURST1 = ADMODA^6;
 263      =1  sbit SCC1   = ADMODA^5;
 264      =1  sbit SCAN1  = ADMODA^4;
 265      =1  sbit BNDI0  = ADMODA^3;
 266      =1  sbit BURST0 = ADMODA^2;
 267      =1  sbit SCC0   = ADMODA^1;
 268      =1  sbit SCAN0  = ADMODA^0;
 269      =1  
 270      =1  #endif
 271      =1  
  18          #include "iTrip.h"
   1      =1  /*
   2      =1  itrip HEADERZ v1e-9
   3      =1  */
   4      =1  
   5      =1  #ifndef ITRIP_H
   6      =1  #define ITRIP_H 
   7      =1  /**************************GLOBALS*******************************************/
   8      =1  typedef unsigned char byte;
   9      =1  typedef unsigned int word;
  10      =1  
  11      =1  #define MAX_FREQ        1080
  12      =1  #define MIN_FREQ        700
  13      =1  
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 6   

  14      =1  #define BARKER_7                0x58    //01011000
  15      =1  #define NOT_BARKER_7    0xA7    //10100111
  16      =1  
  17      =1  #define fineStruct 1
  18      =1  #define BUFFER_LENGTH   0x06
  19      =1  #define MAX_FRAME 0x08
  20      =1  #define DATABYTES_PER_FRAME 0x02
  21      =1  #define SAMPLES_PER_BIT 0x03
  22      =1  #define t0High  0xFF
  23      =1  #define t0Low   0x96
  24      =1  //#define       t1High  0xFF
  25      =1  //#define t1Low         0x3C
  26      =1  /*******************************EMPerical numbers
  27      =1  11.8.10
  28      =1  50 -> 416 HZ
  29      =1  5 - >31.25 kHz
  30      =1  
  31      =1  11.22.10
  32      =1  30 -> 25k  nothing else....
  33      =1  *******************************************************************************/
  34      =1  #define NORM_T
  35      =1  //#define SHOW_T
  36      =1  //#define SYNTH_T
  37      =1  //#define LEAVE_T
  38      =1  //#define DELEAVE_T
  39      =1  //#define CODE_T
  40      =1  
  41      =1  //#define ADC_T_SOFT
  42      =1  //#define ADC_DELAY  10000
  43      =1  
  44      =1  //#def4-ADC_T_HARD               
  45      =1  #define ADC_ARRAY_L 16  
  46      =1  
  47      =1  //#define COM_T
  48      =1  #define rawInput                (CMP1 & 0x01)   //P0^4 is comp1 input from radio through 1 uF
  49      =1  //#define CCU_MIN_CYCLE 164     //<100 Hz
  50      =1  //#define CCU_MIN_GOOD  521     //<15 Hz
  51      =1  //#define CCU_DC                        8192    //<1 Hz
  52      =1  //#define CCU_MAX_BAD           25              //max number of fast cycles ~.5 sec
  53      =1  
  54      =1  //#define MIN_GOOD_HALF_CYCLES  12 //~1 sec
  55      =1  //#define MAX_TUNING_TRIES              381 
  56      =1  //#define POW_T 
  57      =1  
  58      =1  //#define OSC_T 
  59      =1  
  60      =1  /****************************PROTOS*********************/
  61      =1          void setup ();  //name and turn on
  62      =1          void delay (word cnt);
  63      =1          void shiftout8 (byte d);
  64      =1  //      void shiftout16 (word d);
  65      =1  //      void shiftout32 (word dh, word dl);
  66      =1          void txProg ();
  67      =1          void setFreq (word freq);
  68      =1  //      void copyInputToIn ();
  69      =1          void copyInterToData (byte dest[], byte source[]);
  70      =1          void copyDataToInter (byte dest[], byte source[]);
  71      =1  /************************EMPTY Protos****************/  
  72      =1  //      void txStero ();
  73      =1  //      void txMono ();
  74      =1  //      
  75      =1  //      void incFreq ();
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 7   

  76      =1  //      void decFreq ();
  77      =1  //      void setChan (byte numChan);
  78      =1          
  79      =1  /*******************deinterleaver*********************
  80      =1  DESC:           Loads interbuf with sequenced data from inBuf....
  81      =1  
  82      =1  RETURNS:        Nothing.
  83      =1  
  84      =1  CAUTION:        inBuf must be full and interByte, inByte must 
  85      =1                          = 8 and interBuf must be zeros  
  86      =1  
  87      =1  299 - 366 us execution
  88      =1  *******************************************************/        
  89      =1          void deInterleave ();
  90      =1          void deleaveBits ();
  91      =1  //      void testDI();
  92      =1  /*************************************8
  93      =1  inBuf must be empty and inter / inByte must = 8
  94      =1  and interBuf must hold sequenced data
  95      =1  loads inBuf with interleaved data...
  96      =1  
  97      =1  340  - 375 us
  98      =1  ************************************/
  99      =1          void interleave ();
 100      =1          void leaveBits ();
 101      =1  //      void testI (byte vect);
 102      =1  //      void testEncode(byte cnt);
 103      =1  /********************ENCODE********************************8
 104      =1  dEmpty must be 0 and interByte = 8
 105      =1  wrapper for assembly function which generates 24 bit parity
 106      =1  for 24 bit of data....
 107      =1  
 108      =1  15 us execution
 109      =1  *********************************************************/
 110      =1          void encode();
 111      =1          void encode_ASM ();
 112      =1          
 113      =1          void decode ();
 114      =1          void decode_ASM();
 115      =1  
 116      =1          void testTXRX (byte error, byte vect);
 117      =1  
 118      =1  /*******************************************************
 119      =1  DESC:    Autotuning algorithm detects low frequency audio 
 120      =1                   feedback characteristic of a good TX to RX lock.
 121      =1  RETURNS: The frequency of the Rx on the input 
 122      =1                  (0x0000 indicates a failure, 0x01 indicates DC / no input on pin) 
 123      =1  CAUTION: The RX must be able to swing the output audio
 124      =1                   greater than 1.24V and produce a frequency of 
 125      =1                   feedback <15Hz. (Headphone outs work)
 126      =1  *********************************************************/
 127      =1  //      word autotune ();
 128      =1          
 129      =1          void CRCCheck (byte *MSB);
 130      =1          void CRCGen     (byte *MSB);
 131      =1          void CRC_ASM();
 132      =1  
 133      =1  /******************PIN NAMES****************************/       
 134      =1          sbit txVcc = P2^7;
 135      =1          sbit txData = P2^2;
 136      =1          sbit txClk = P2^3;
 137      =1          sbit LED = P2^5;
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 8   

 138      =1          sbit CE = P2^4;
 139      =1          sbit midButt = P0^0;
 140      =1          sbit hiButt = P0^1;
 141      =1          sbit loButt = P0^2;
 142      =1          sbit audioL = P0^3;
 143      =1          sbit audioN = P0^4;     //must be soldered and AC coupled (DC blocked) with 1 uF
 144      =1          sbit ccTimer = P2^0;
 145      =1  #endif
  19          #include "comparators.h"
   1      =1  /***********************************************************************
   2      =1  MODULE:    Comparators
   3      =1  VERSION:   1.02
   4      =1  CONTAINS:  Routines for controlling the comparators on the Philips
   5      =1             P89LPC936
   6      =1  COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7      =1  LICENSE:   May be freely used in commercial and non-commercial code
   8      =1             without royalties provided this copyright notice remains
   9      =1             in this file and unaltered
  10      =1  WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11      =1             MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12      =1             TO CHANGE THE CONTENTS OF THIS FILE
  13      =1  GENERATED: On "Sep 30 2010" at "21:10:55" by Code Architect 2.06
  14      =1  ***********************************************************************/
  15      =1  
  16      =1  #ifndef _COMPARATORSH_
  17      =1  #define _COMPARATORSH_
  18      =1  
  19      =1  // values passed to the comparator functions
  20      =1  #define COMP_1             0      // comparator 1
  21      =1  #define COMP_2             1      // comparator 2
  22      =1  #define COMP_INPUTA        0x00   // comparator input CINnA
  23      =1  #define COMP_INPUTB        0x10   // comparator input CINnB
  24      =1  #define COMP_INPUTREF      0x00   // reference voltage input CMPREF
  25      =1  #define COMP_INTERNALREF   0x08   // internal reference voltage Vref
  26      =1  #define COMP_OUTPUTDISABLE 0x00   // disable comparator output pin
  27      =1  #define COMP_OUTPUTENABLE  0x04   // enable comparator output pin
  28      =1  
  29      =1  /***********************************************************************
  30      =1  DESC:    Initializes a comparator
  31      =1           Selects the comparator inputs/reference voltage source, enables
  32      =1           comparator output, enables comparator, configures I/O pins
  33      =1           needed, enables interrupts
  34      =1           If a comparator is being enabled then comparators_13usdelay
  35      =1           is called to provide a 13us delay to stabilize the comparator
  36      =1  RETURNS: Nothing
  37      =1  CAUTION: Set EA to 1 to enable interrupts after calling
  38      =1  ************************************************************************/
  39      =1  extern void comparators_init
  40      =1    (
  41      =1    bit compnum,                    // comparator number:     COMP_1 or COMP_2
  42      =1    unsigned char posinput,         // positive input A or B: COMP_INPUTA or COMP_INPUTB
  43      =1    unsigned char neginput,         // negative input CMPREF or internal reference:
  44      =1                                    //                        COMP_INPUTREF, COMP_INTERNALREF
  45      =1    unsigned char outputenable      // enable or disable output pin:
  46      =1                                    //                        COMP_OUTPUTDISABLE or COMP_OUTPUTENABLE
  47      =1  );
  48      =1  
  49      =1  /***********************************************************************
  50      =1  DESC:    Disables a comparator
  51      =1  RETURNS: Nothing
  52      =1  CAUTION: The port pins used by the comparator are not reconfigured to
  53      =1           be digital inputs or outputs.
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 9   

  54      =1  ************************************************************************/
  55      =1  extern void comparators_disable
  56      =1    (
  57      =1    bit compnum                     // comparator number:     COMP_1 or COMP_2
  58      =1    );
  59      =1  
  60      =1  /***********************************************************************
  61      =1  DESC:    Gets the current output of a comparator
  62      =1  RETURNS: Current comparator output
  63      =1  CAUTION: comparators_init must be called first
  64      =1  ************************************************************************/
  65      =1  extern bit comparators_getoutput
  66      =1    (
  67      =1    bit compnum                     // comparator number:     COMP_1 or COMP_2
  68      =1    );
  69      =1  
  70      =1  /***********************************************************************
  71      =1  DESC:    Selects a positive input source for a comparator
  72      =1  RETURNS: Nothing
  73      =1  CAUTION: comparators_init must be called first.
  74      =1           The comparator interrupt is disabled while the input is
  75      =1           changed. This means that the other comparator not being changed
  76      =1           will also not generate an interrupt.
  77      =1  ************************************************************************/
  78      =1  extern void comparators_selectposinput
  79      =1    (
  80      =1    bit compnum,                    // comparator number:     COMP_1 or COMP_2
  81      =1    unsigned char posinput          // positive input A or B: COMP_INPUTA or COMP_INPUTB
  82      =1    );
  83      =1  
  84      =1  #endif // _COMPARATORSH_
  85      =1  
  86      =1  
  87      =1  
  20          #include "CCU.h"
   1      =1  /***********************************************************************
   2      =1  MODULE:    CAPTURE COMPARE UNIT
   3      =1  VERSION:   1.02
   4      =1  CONTAINS:  Routines for configuring the Capture Compare Unit on the
   5      =1             P89LPC936
   6      =1  COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7      =1  LICENSE:   May be freely used in commercial and non-commercial code
   8      =1             without royalties provided this copyright notice remains
   9      =1             in this file and unaltered
  10      =1  WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11      =1             MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12      =1             TO CHANGE THE CONTENTS OF THIS FILE
  13      =1  GENERATED: On "Nov 17 2010" at "02:35:06" by Code Architect 2.06
  14      =1  ***********************************************************************/
  15      =1  
  16      =1  #ifndef _CCUH_
  17      =1  #define _CCUH_
  18      =1  
  19      =1  // Capture Compare Unit Channels
  20      =1  #define CCU_A 0
  21      =1  #define CCU_B 1
  22      =1  #define CCU_C 2
  23      =1  #define CCU_D 3
  24      =1  
  25      =1  /***********************************************************************
  26      =1  DESC:    Initializes the Capture Compare Unit
  27      =1           Capture channel A: no noise filter, rising edges, 0 edge delay
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 10  

  28      =1           Capture channel B: noise filter, falling edges, 0 edge delay
  29      =1  RETURNS: Nothing
  30      =1  CAUTION: Set EA to 1 after calling to enable interrupts
  31      =1  ************************************************************************/
  32      =1  void ccu_init
  33      =1    (
  34      =1    void
  35      =1    );
  36      =1  void start_CCU();
  37      =1  void stop_CCU();
  38      =1  #endif // _CCUH_
  21          
  22          /********external Globals**************************/
  23          //2 byte timer start value...  t = (0xFFFF - start value) * 271 ns + timer0_isr execution time
  24          //extern volatile byte t0High, t0Low, inputBitSmoother, smootherCnt;
  25          /***********************************************************/
  26          
  27          /***********************************************************************
  28          DESC:    Generates a 13 microsecond delay needed to stabilize a
  29                   comparator output after enabling.
  30                   Note that the datasheet mentions a 10 microsecond delay.
  31                   Because the timer may be clocked from the watchdog timer, which
  32                   can be up to 30% faster than stated, 30% has been added to the
  33                   absolute minimum delay of 10us to give 13us.
  34                   Uses timer 0
  35                   Actual delay: 12.99 us
  36          RETURNS: Nothing
  37          CAUTION: The delay must be an absolute minimum of 10us
  38          ************************************************************************/
  39          void comparators_13usdelay
  40            (
  41            void
  42            )
  43          {
  44   1              // ensure timer 0 stopped
  45   1              TR0 = 0;
  46   1              // set reload value
  47   1              TH0 = 0xFF;
  48   1              TL0 = 0xD0;
  49   1              // disable timer interrupt
  50   1              ET0 = 0;
  51   1              // run timer and wait for overflow
  52   1              TF0 = 0;
  53   1              TR0 = 1;
  54   1              while (!TF0);
  55   1              // stop timer and clean up
  56   1              TF0 = 0;
  57   1              ET0 = 1;
  58   1              TR0 = 1;
  59   1      }
  60          
  61          /***********************************************************************
  62          DESC:    Initializes a comparator
  63                   Selects the comparator inputs/reference voltage source, enables
  64                   comparator output, enables comparator, configures I/O pins
  65                   needed, enables interrupts
  66                   If a comparator is being enabled then comparators_13usdelay
  67                   is called to provide a 13us delay to stabilize the comparator
  68          RETURNS: Nothing
  69          CAUTION: Set EA to 1 to enable interrupts after calling
  70          ************************************************************************/
  71          void comparators_init
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 11  

  72            (
  73            bit compnum,                    // comparator number:     COMP_1 or COMP_2
  74            unsigned char posinput,         // positive input A or B: COMP_INPUTA or COMP_INPUTB
  75            unsigned char neginput,         // negative input CMPREF or internal reference:
  76                                            //                        COMP_INPUTREF, COMP_INTERNALREF
  77            unsigned char outputenable      // enable or disable output pin:
  78                                            //                        COMP_OUTPUTDISABLE or COMP_OUTPUTENABLE
  79            )
  80          {
  81   1        bit currenable;
  82   1      
  83   1        if (compnum == COMP_1)
  84   1        {
  85   2          // initialize port pins according to configuration
  86   2          if (posinput == COMP_INPUTA)
  87   2          {
  88   3            // select CIN1A as analog input
  89   3            P0M1 |= 0x10;
  90   3            P0M2 &= ~0x10;
  91   3            PT0AD |= 0x10;
  92   3          }
  93   2          else
  94   2          {
  95   3            // select CIN1B as analog input
  96   3            P0M1 |= 0x08;
  97   3            P0M2 &= ~0x08;
  98   3            PT0AD |= 0x08;
  99   3          }
 100   2          if (neginput == COMP_INPUTREF)
 101   2          {
 102   3            // select CMPREF as analog input
 103   3            P0M1 |= 0x20;
 104   3            P0M2 &= ~0x20;
 105   3            PT0AD |= 0x20;
 106   3          }
 107   2          if (outputenable == COMP_OUTPUTENABLE)
 108   2          {
 109   3            // select CMP1 as push-pull output
 110   3            P0M1 &= ~0x40;
 111   3            P0M2 |= 0x40;
 112   3          }
 113   2          // find out if comparator is currently enabled or not
 114   2          currenable = CMP1 & 0x20;
 115   2          // configure and enable comparator
 116   2          // clear interrupt flag
 117   2          CMP1 = posinput | neginput | outputenable | 0x20;
 118   2          // if comparator just enabled then we need to call a function
 119   2          // so the user can generate a 13us delay
 120   2          if (!currenable) comparators_13usdelay();
 121   2          // clear comparator interrupt flag to avoid spurious interrupt
 122   2          CMP1 &= ~0x01;
 123   2        }
 124   1        else
 125   1        {
 126   2          // initialize port pins according to configuration
 127   2          if (posinput == COMP_INPUTA)
 128   2          {
 129   3            // select CIN2A as analog input
 130   3            P0M1 |= 0x04;
 131   3            P0M2 &= ~0x04;
 132   3            PT0AD |= 0x04;
 133   3          }
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 12  

 134   2          else
 135   2          {
 136   3            // select CIN2B as analog input
 137   3            P0M1 |= 0x02;
 138   3            P0M2 &= ~0x02;
 139   3            PT0AD |= 0x02;
 140   3          }
 141   2          if (neginput == COMP_INPUTREF)
 142   2          {
 143   3            // select CMPREF as analog input
 144   3            P0M1 |= 0x20;
 145   3            P0M2 &= ~0x20;
 146   3            PT0AD |= 0x20;
 147   3          }
 148   2          if (outputenable == COMP_OUTPUTENABLE)
 149   2          {
 150   3            // select CMP2 as push-pull output
 151   3            P0M1 &= ~0x01;
 152   3            P0M2 |= 0x01;
 153   3          }
 154   2          // find out if comparator is currently enabled or not
 155   2          currenable = CMP2 & 0x20;
 156   2          // configure and enable comparator
 157   2          // clear interrupt flag
 158   2          CMP2 = posinput | neginput | outputenable | 0x20;
 159   2          // if comparator just enabled then we need to call a function
 160   2          // so the user can generate a 13us delay
 161   2          if (!currenable) comparators_13usdelay();
 162   2          // clear comparator interrupt flag to avoid a spurious interrupt
 163   2          CMP2 &= ~0x01;
 164   2        }
 165   1      
 166   1        // set isr priority to 0
 167   1        IP1 &= 0xFB;
 168   1        IP1H &= 0xFB;
 169   1      
 170   1        // enable comparator interrupt
 171   1      //  EC = 1;
 172   1      }
 173          
 174          /***********************************************************************
 175          DESC:    Comparator Interrupt Service Routine
 176                   Uses register bank 1
 177          RETURNS: Nothing
 178          CAUTION: comparators_init must be called and EA set to 1 to enable
 179                   interrupts.
 180                   Called when the output of any enabled comparator changes
 181          ************************************************************************/
 182          void comparators_isr
 183            (
 184            void
 185            ) interrupt 8 using 1
 186          {
 187   1        // check if comparator 1 caused interrupt
 188   1        if (CMP1 & 0x01)
 189   1        {
 190   2          // clear interrupt flag
 191   2      //      TL0 = t0Low;//0xb3;
 192   2      //      TH0 = t0High;//0xff;
 193   2      //      TR0 = 1;
 194   2      //      smootherCnt = SAMPLES_PER_BIT;;
 195   2      //      inputBitSmoother += rawInput;
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 13  

 196   2      //      EC = 0;
 197   2              CMP1 &= ~0x01;
 198   2        }
 199   1      }
 200          
 201          /***********************************************************************
 202          DESC:    Disables a comparator
 203          RETURNS: Nothing
 204          CAUTION: The port pins used by the comparator are not reconfigured to
 205                   be digital inputs or outputs.
 206          ************************************************************************/
 207          void comparators_disable
 208            (
 209            bit compnum                     // comparator number:     COMP_1 or COMP_2
 210            )
 211          {
 212   1        // disable comparator 1
 213   1        if (compnum == COMP_1)
 214   1        {
 215   2          CMP1 &= ~0x20;
 216   2        }
 217   1        // disable comparator 2
 218   1        else
 219   1        {
 220   2          CMP2 &= ~0x20;
 221   2        }
 222   1      }
 223          
 224          /***********************************************************************
 225          DESC:    Gets the current output of a comparator
 226          RETURNS: Current comparator output
 227          CAUTION: comparators_init must be called first
 228          ************************************************************************/
 229          bit comparators_getoutput
 230            (
 231            bit compnum                     // comparator number:     COMP_1 or COMP_2
 232            )
 233          {
 234   1        // get output of comparator 1
 235   1        if (compnum == COMP_1)
 236   1        {
 237   2          return (CMP1 >> 1) & 0x01;
 238   2        }
 239   1        // get output of comparator 2
 240   1        else
 241   1        {
 242   2          return (CMP2 >> 1) & 0x01;
 243   2        }
 244   1      }
 245          
 246          /***********************************************************************
 247          DESC:    Selects a positive input source for a comparator
 248          RETURNS: Nothing
 249          CAUTION: comparators_init must be called first.
 250                   The comparator interrupt is disabled while the input is
 251                   changed. This means that the other comparator not being changed
 252                   will also not generate an interrupt.
 253          ************************************************************************/
 254          void comparators_selectposinput
 255            (
 256            bit compnum,                    // comparator number:     COMP_1 or COMP_2
 257            unsigned char posinput          // positive input A or B: COMP_INPUTA or COMP_INPUTB
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 14  

 258            )
 259          {
 260   1        // disable comparator interrupt
 261   1        EC = 0;
 262   1      
 263   1        // configure comparator 1
 264   1        if (compnum == COMP_1)
 265   1        {
 266   2          // initialize port pins according to configuration
 267   2          if (posinput == COMP_INPUTA)
 268   2          {
 269   3            // select CIN1A as analog input
 270   3            P0M1 |= 0x10;
 271   3            P0M2 &= ~0x10;
 272   3            PT0AD |= 0x10;
 273   3          }
 274   2          else
 275   2          {
 276   3            // select CIN1B as analog input
 277   3            P0M1 |= 0x08;
 278   3            P0M2 &= ~0x08;
 279   3            PT0AD |= 0x08;
 280   3          }
 281   2          // clear input selection
 282   2          CMP1 &= ~0x10;
 283   2          // select new input
 284   2          CMP1 |= posinput;
 285   2        }
 286   1        // configure comparator 2
 287   1        else
 288   1        {
 289   2          // initialize port pins according to configuration
 290   2          if (posinput == COMP_INPUTA)
 291   2          {
 292   3            // select CIN2A as analog input
 293   3            P0M1 |= 0x04;
 294   3            P0M2 &= ~0x04;
 295   3            PT0AD |= 0x04;
 296   3          }
 297   2          else
 298   2          {
 299   3            // select CIN2B as analog input
 300   3            P0M1 |= 0x02;
 301   3            P0M2 &= ~0x02;
 302   3            PT0AD |= 0x02;
 303   3          }
 304   2          // clear input selection
 305   2          CMP2 &= ~0x10;
 306   2          // select new input
 307   2          CMP2 |= posinput;
 308   2        }
 309   1      
 310   1        // enable comparator interrupt
 311   1      //  EC = 1;
 312   1      }
 313          
 314          
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 15  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION comparators_13usdelay (BEGIN)
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 45
0000 C28C              CLR     TR0
                                           ; SOURCE LINE # 47
0002 758CFF            MOV     TH0,#0FFH
                                           ; SOURCE LINE # 48
0005 758AD0            MOV     TL0,#0D0H
                                           ; SOURCE LINE # 50
0008 C2A9              CLR     ET0
                                           ; SOURCE LINE # 52
000A C28D              CLR     TF0
                                           ; SOURCE LINE # 53
000C D28C              SETB    TR0
000E         ?C0001:
                                           ; SOURCE LINE # 54
000E 308DFD            JNB     TF0,?C0001
0011         ?C0002:
                                           ; SOURCE LINE # 56
0011 C28D              CLR     TF0
                                           ; SOURCE LINE # 57
0013 D2A9              SETB    ET0
                                           ; SOURCE LINE # 58
0015 D28C              SETB    TR0
                                           ; SOURCE LINE # 59
0017 22                RET     
             ; FUNCTION comparators_13usdelay (END)

             ; FUNCTION comparators_init (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 83
0000 20004B      R     JB      compnum,?C0004
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 86
0003 E500        R     MOV     A,posinput
0005 700B              JNZ     ?C0005
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 89
0007 438410            ORL     P0M1,#010H
                                           ; SOURCE LINE # 90
000A 5385EF            ANL     P0M2,#0EFH
                                           ; SOURCE LINE # 91
000D 43F610            ORL     PT0AD,#010H
                                           ; SOURCE LINE # 92
0010 8009              SJMP    ?C0006
0012         ?C0005:
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 96
0012 438408            ORL     P0M1,#08H
                                           ; SOURCE LINE # 97
0015 5385F7            ANL     P0M2,#0F7H
                                           ; SOURCE LINE # 98
0018 43F608            ORL     PT0AD,#08H
                                           ; SOURCE LINE # 99
001B         ?C0006:
                                           ; SOURCE LINE # 100
001B E500        R     MOV     A,neginput
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 16  

001D 7009              JNZ     ?C0007
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 103
001F 438420            ORL     P0M1,#020H
                                           ; SOURCE LINE # 104
0022 5385DF            ANL     P0M2,#0DFH
                                           ; SOURCE LINE # 105
0025 43F620            ORL     PT0AD,#020H
                                           ; SOURCE LINE # 106
0028         ?C0007:
                                           ; SOURCE LINE # 107
0028 E500        R     MOV     A,outputenable
002A B40406            CJNE    A,#04H,?C0008
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 110
002D 5384BF            ANL     P0M1,#0BFH
                                           ; SOURCE LINE # 111
0030 438540            ORL     P0M2,#040H
                                           ; SOURCE LINE # 112
0033         ?C0008:
                                           ; SOURCE LINE # 114
0033 E5AC              MOV     A,CMP1
0035 A2E5              MOV     C,ACC.5
0037 9200        R     MOV     currenable,C
                                           ; SOURCE LINE # 117
0039 E500        R     MOV     A,posinput
003B 4500        R     ORL     A,neginput
003D 4500        R     ORL     A,outputenable
003F 4420              ORL     A,#020H
0041 F5AC              MOV     CMP1,A
                                           ; SOURCE LINE # 120
0043 200003      R     JB      currenable,?C0009
0046 120000      R     LCALL   comparators_13usdelay
0049         ?C0009:
                                           ; SOURCE LINE # 122
0049 53ACFE            ANL     CMP1,#0FEH
                                           ; SOURCE LINE # 123
004C 8049              SJMP    ?C0010
004E         ?C0004:
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 127
004E E500        R     MOV     A,posinput
0050 700B              JNZ     ?C0011
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 130
0052 438404            ORL     P0M1,#04H
                                           ; SOURCE LINE # 131
0055 5385FB            ANL     P0M2,#0FBH
                                           ; SOURCE LINE # 132
0058 43F604            ORL     PT0AD,#04H
                                           ; SOURCE LINE # 133
005B 8009              SJMP    ?C0012
005D         ?C0011:
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
005D 438402            ORL     P0M1,#02H
                                           ; SOURCE LINE # 138
0060 5385FD            ANL     P0M2,#0FDH
                                           ; SOURCE LINE # 139
0063 43F602            ORL     PT0AD,#02H
                                           ; SOURCE LINE # 140
0066         ?C0012:
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 17  

                                           ; SOURCE LINE # 141
0066 E500        R     MOV     A,neginput
0068 7009              JNZ     ?C0013
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 144
006A 438420            ORL     P0M1,#020H
                                           ; SOURCE LINE # 145
006D 5385DF            ANL     P0M2,#0DFH
                                           ; SOURCE LINE # 146
0070 43F620            ORL     PT0AD,#020H
                                           ; SOURCE LINE # 147
0073         ?C0013:
                                           ; SOURCE LINE # 148
0073 E500        R     MOV     A,outputenable
0075 B40406            CJNE    A,#04H,?C0014
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 151
0078 5384FE            ANL     P0M1,#0FEH
                                           ; SOURCE LINE # 152
007B 438501            ORL     P0M2,#01H
                                           ; SOURCE LINE # 153
007E         ?C0014:
                                           ; SOURCE LINE # 155
007E E5AD              MOV     A,CMP2
0080 A2E5              MOV     C,ACC.5
0082 9200        R     MOV     currenable,C
                                           ; SOURCE LINE # 158
0084 E500        R     MOV     A,posinput
0086 4500        R     ORL     A,neginput
0088 4500        R     ORL     A,outputenable
008A 4420              ORL     A,#020H
008C F5AD              MOV     CMP2,A
                                           ; SOURCE LINE # 161
008E 200003      R     JB      currenable,?C0015
0091 120000      R     LCALL   comparators_13usdelay
0094         ?C0015:
                                           ; SOURCE LINE # 163
0094 53ADFE            ANL     CMP2,#0FEH
                                           ; SOURCE LINE # 164
0097         ?C0010:
                                           ; SOURCE LINE # 167
0097 53F8FB            ANL     IP1,#0FBH
                                           ; SOURCE LINE # 168
009A 53F7FB            ANL     IP1H,#0FBH
                                           ; SOURCE LINE # 172
009D 22                RET     
             ; FUNCTION comparators_init (END)

             ; FUNCTION comparators_isr (BEGIN)
0000 C0E0              PUSH    ACC
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 188
0002 E5AC              MOV     A,CMP1
0004 30E003            JNB     ACC.0,?C0018
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 197
0007 53ACFE            ANL     CMP1,#0FEH
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
000A         ?C0018:
000A D0E0              POP     ACC
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 18  

000C 32                RETI    
             ; FUNCTION comparators_isr (END)

             ; FUNCTION comparators_disable (BEGIN)
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 213
0000 200004      R     JB      compnum,?C0019
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0003 53ACDF            ANL     CMP1,#0DFH
                                           ; SOURCE LINE # 216
0006 22                RET     
0007         ?C0019:
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0007 53ADDF            ANL     CMP2,#0DFH
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
000A         ?C0021:
000A 22                RET     
             ; FUNCTION comparators_disable (END)

             ; FUNCTION comparators_getoutput (BEGIN)
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 235
0000 200004      R     JB      compnum,?C0022
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
0003 E5AC              MOV     A,CMP1
0005 8002              SJMP    ?C0032
                                           ; SOURCE LINE # 238
0007         ?C0022:
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
0007 E5AD              MOV     A,CMP2
0009         ?C0032:
0009 C3                CLR     C
000A 13                RRC     A
000B 13                RRC     A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
000C         ?C0023:
000C 22                RET     
             ; FUNCTION comparators_getoutput (END)

             ; FUNCTION comparators_selectposinput (BEGIN)
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 261
0000 C2EA              CLR     EC
                                           ; SOURCE LINE # 264
0002 200020      R     JB      compnum,?C0025
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 267
0005 E500        R     MOV     A,posinput
0007 700B              JNZ     ?C0026
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 270
0009 438410            ORL     P0M1,#010H
                                           ; SOURCE LINE # 271
C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 19  

000C 5385EF            ANL     P0M2,#0EFH
                                           ; SOURCE LINE # 272
000F 43F610            ORL     PT0AD,#010H
                                           ; SOURCE LINE # 273
0012 8009              SJMP    ?C0027
0014         ?C0026:
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 277
0014 438408            ORL     P0M1,#08H
                                           ; SOURCE LINE # 278
0017 5385F7            ANL     P0M2,#0F7H
                                           ; SOURCE LINE # 279
001A 43F608            ORL     PT0AD,#08H
                                           ; SOURCE LINE # 280
001D         ?C0027:
                                           ; SOURCE LINE # 282
001D 53ACEF            ANL     CMP1,#0EFH
                                           ; SOURCE LINE # 284
0020 E500        R     MOV     A,posinput
0022 42AC              ORL     CMP1,A
                                           ; SOURCE LINE # 285
0024 22                RET     
0025         ?C0025:
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 290
0025 E500        R     MOV     A,posinput
0027 700B              JNZ     ?C0029
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 293
0029 438404            ORL     P0M1,#04H
                                           ; SOURCE LINE # 294
002C 5385FB            ANL     P0M2,#0FBH
                                           ; SOURCE LINE # 295
002F 43F604            ORL     PT0AD,#04H
                                           ; SOURCE LINE # 296
0032 8009              SJMP    ?C0030
0034         ?C0029:
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 300
0034 438402            ORL     P0M1,#02H
                                           ; SOURCE LINE # 301
0037 5385FD            ANL     P0M2,#0FDH
                                           ; SOURCE LINE # 302
003A 43F602            ORL     PT0AD,#02H
                                           ; SOURCE LINE # 303
003D         ?C0030:
                                           ; SOURCE LINE # 305
003D 53ADEF            ANL     CMP2,#0EFH
                                           ; SOURCE LINE # 307
0040 E500        R     MOV     A,posinput
0042 42AD              ORL     CMP2,A
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 312
0044         ?C0031:
0044 22                RET     
             ; FUNCTION comparators_selectposinput (END)

C51 COMPILER V8.12   COMPARATORS                                                           01/17/2011 18:11:33 PAGE 20  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
P0M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
EC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
comparators_getoutput. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  compnum. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
IEN0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
IEN1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
CMP1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
IP1H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
CMP2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
comparators_selectposinput . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  compnum. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  posinput . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
ADMODA . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
byte . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
word . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
comparators_init . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  compnum. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  posinput . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  neginput . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  outputenable . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  currenable . . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
TCR20. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
PT0AD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
I2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
comparators_isr. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
comparators_disable. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  compnum. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
comparators_13usdelay. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    288    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
