C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\obj\uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE uart.c OMF2 ROM(COMPACT) BROWSE MODP2 DEBUG CODE LISTINCLUDE SYMBOLS PRINT(
                    -.\lst\uart.lst) PREPRINT(.\lst\uart.i) OBJECT(.\obj\uart.obj)

line level    source

   1          #include <REG936.H>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG936.H
   3      =1  
   4      =1  Header file for Philips 89LPC936
   5      =1  Copyright (c) 1988-2006 KEIL - An ARM Company
   6      =1  All rights reserved.
   7      =1  V1.1
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __REG936_H__
  11      =1  #define __REG936_H__
  12      =1  
  13      =1  /*  BYTE Registers  */
  14      =1  sfr P0   = 0x80;
  15      =1  sfr P1   = 0x90;
  16      =1  sfr P2   = 0xA0;
  17      =1  sfr P3   = 0xB0;
  18      =1  sfr PSW  = 0xD0;
  19      =1  sfr ACC  = 0xE0;
  20      =1  sfr B    = 0xF0;
  21      =1  sfr SP   = 0x81;
  22      =1  sfr DPL  = 0x82;
  23      =1  sfr DPH  = 0x83;
  24      =1  sfr PCON = 0x87;
  25      =1  sfr TCON = 0x88;
  26      =1  sfr TMOD = 0x89;
  27      =1  sfr TL0  = 0x8A;
  28      =1  sfr TL1  = 0x8B;
  29      =1  sfr TH0  = 0x8C;
  30      =1  sfr TH1  = 0x8D;
  31      =1  sfr IEN0 = 0xA8;
  32      =1  sfr IP0  = 0xB8;
  33      =1  sfr SCON = 0x98;
  34      =1  sfr SBUF = 0x99;
  35      =1  
  36      =1  sfr ADCON0 = 0x8E;
  37      =1  sfr ADCON1 = 0x97;
  38      =1  sfr ADMODA = 0xC0;
  39      =1  sfr ADMODB = 0xA1;
  40      =1  sfr ADINS  = 0xA3;
  41      =1  sfr AD0DAT0= 0xC5;
  42      =1  sfr AD0DAT1= 0xC6;
  43      =1  sfr AD0DAT2= 0xC7;
  44      =1  sfr AD0DAT3= 0xF4;
  45      =1  sfr AD1DAT0= 0xD5;
  46      =1  sfr AD1DAT1= 0xD6;
  47      =1  sfr AD1DAT2= 0xD7;
  48      =1  sfr AD1DAT3= 0xF5;
  49      =1  sfr AD0BH  = 0xBB;
  50      =1  sfr AD0BL  = 0xA6;
  51      =1  sfr AD1BH  = 0xC4;
  52      =1  sfr AD1BL  = 0xBC;
  53      =1  sfr AUXR1  = 0xA2;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 2   

  54      =1  sfr SADDR  = 0xA9;
  55      =1  sfr SADEN  = 0xB9;
  56      =1  sfr TL2    = 0xCC;
  57      =1  sfr TH2    = 0xCD;
  58      =1  sfr BRGR0  = 0xBE;
  59      =1  sfr BRGR1  = 0xBF;
  60      =1  sfr BRGCON = 0xBD;
  61      =1  sfr CCCRA  = 0xEA;
  62      =1  sfr CCCRB  = 0xEB;
  63      =1  sfr CCCRC  = 0xEC;
  64      =1  sfr CCCRD  = 0xED;
  65      =1  sfr CMP1   = 0xAC;
  66      =1  sfr CMP2   = 0xAD;
  67      =1  sfr DEECON = 0xF1;
  68      =1  sfr DEEDAT = 0xF2;
  69      =1  sfr DEEADR = 0xF3;
  70      =1  sfr DIVM   = 0x95;
  71      =1  sfr I2ADR  = 0xDB;
  72      =1  sfr I2CON  = 0xD8;
  73      =1  sfr I2DAT  = 0xDA;
  74      =1  sfr I2SCLH = 0xDD;
  75      =1  sfr I2SCLL = 0xDC;
  76      =1  sfr I2STAT = 0xD9;
  77      =1  sfr ICRAH  = 0xAB;
  78      =1  sfr ICRAL  = 0xAA;
  79      =1  sfr ICRBH  = 0xAF;
  80      =1  sfr ICRBL  = 0xAE;
  81      =1  sfr IEN1   = 0xE8;
  82      =1  sfr IP1    = 0xF8;
  83      =1  sfr IP1H   = 0xF7;
  84      =1  sfr KBCON  = 0x94;
  85      =1  sfr KBMASK = 0x86;
  86      =1  sfr KBPATN = 0x93;
  87      =1  sfr OCRAH  = 0xEF;
  88      =1  sfr OCRAL  = 0xEE;
  89      =1  sfr OCRBH  = 0xFB;
  90      =1  sfr OCRBL  = 0xFA;
  91      =1  sfr OCRCH  = 0xFD;
  92      =1  sfr OCRCL  = 0xFC;
  93      =1  sfr OCRDH  = 0xFF;
  94      =1  sfr OCRDL  = 0xFE;
  95      =1  sfr P0M1   = 0x84;
  96      =1  sfr P0M2   = 0x85;
  97      =1  sfr P1M1   = 0x91;
  98      =1  sfr P1M2   = 0x92;
  99      =1  sfr P2M1   = 0xA4;
 100      =1  sfr P2M2   = 0xA5;
 101      =1  sfr P3M1   = 0xB1;
 102      =1  sfr P3M2   = 0xB2;
 103      =1  sfr PCONA  = 0xB5;
 104      =1  sfr PT0AD  = 0xF6;
 105      =1  sfr RSTSRC = 0xDF;
 106      =1  sfr RTCCON = 0xD1;
 107      =1  sfr RTCH   = 0xD2;
 108      =1  sfr RTCL   = 0xD3;
 109      =1  sfr SSTAT  = 0xBA;
 110      =1  sfr SPCTL  = 0xE2;
 111      =1  sfr SPSTAT = 0xE1;
 112      =1  sfr SPDAT  = 0xE3;
 113      =1  sfr TAMOD  = 0x8F;
 114      =1  sfr TCR20  = 0xC8;
 115      =1  sfr TCR21  = 0xF9;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 3   

 116      =1  sfr TICR2  = 0xC9;
 117      =1  sfr TIFR2  = 0xE9;
 118      =1  sfr TISE2  = 0xDE;
 119      =1  sfr TOR2H  = 0xCF;
 120      =1  sfr TOR2L  = 0xCE;
 121      =1  sfr TPCR2H = 0xCB;
 122      =1  sfr TPCR2L = 0xCA;
 123      =1  sfr TRIM   = 0x96;
 124      =1  sfr WDCON  = 0xA7;
 125      =1  sfr WDL    = 0xC1;
 126      =1  sfr WFEED1 = 0xC2;
 127      =1  sfr WFEED2 = 0xC3;
 128      =1  sfr IP0H   = 0xB7;
 129      =1  
 130      =1  /*  BIT Registers  */
 131      =1  ////AUXR1
 132      =1  //sbit DPS  = AUXR1^0;
 133      =1  ////not used
 134      =1  ////hard wired to 0
 135      =1  //sbit SRST = AUXR1^3;
 136      =1  //sbit ENT0 = AUXR1^4; //hardware toggle
 137      =1  //sbit ENT1 = AUXR1^5;
 138      =1  //sbit EBRR = AUXR1^6;
 139      =1  //sbit CLKLP = AUXR1^7;
 140      =1  
 141      =1  /*  PSW   */
 142      =1  sbit CY   = PSW^7;
 143      =1  sbit AC   = PSW^6;
 144      =1  sbit F0   = PSW^5;
 145      =1  sbit RS1  = PSW^4;
 146      =1  sbit RS0  = PSW^3;
 147      =1  sbit OV   = PSW^2;                 
 148      =1  sbit F1   = PSW^1;
 149      =1  sbit P    = PSW^0;
 150      =1  
 151      =1  /*  TCON  */
 152      =1  sbit TF1  = TCON^7;
 153      =1  sbit TR1  = TCON^6;
 154      =1  sbit TF0  = TCON^5;
 155      =1  sbit TR0  = TCON^4;
 156      =1  sbit IE1  = TCON^3;
 157      =1  sbit IT1  = TCON^2;
 158      =1  sbit IE0  = TCON^1;
 159      =1  sbit IT0  = TCON^0;
 160      =1  
 161      =1  /*  IEN0   */
 162      =1  sbit EA   = IEN0^7;
 163      =1  sbit EWDRT = IEN0^6;
 164      =1  sbit EBO   = IEN0^5;
 165      =1  sbit ES   = IEN0^4; // alternatively "ESR"
 166      =1  sbit ESR  = IEN0^4;
 167      =1  sbit ET1  = IEN0^3;
 168      =1  sbit EX1  = IEN0^2;
 169      =1  sbit ET0  = IEN0^1;
 170      =1  sbit EX0  = IEN0^0;
 171      =1  
 172      =1  /*  IEN1   */
 173      =1  sbit EAD  = IEN1^7; // alternatively "EIEE" 
 174      =1  sbit EIEE = IEN1^7;
 175      =1  sbit EST  = IEN1^6;
 176      =1  sbit ECCU = IEN1^4;
 177      =1  sbit ESPI = IEN1^3;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 4   

 178      =1  sbit EC   = IEN1^2;
 179      =1  sbit EKBI = IEN1^1;
 180      =1  sbit EI2C = IEN1^0;
 181      =1  
 182      =1  /*  IP0   */ 
 183      =1  sbit PWDRT = IP0^6;
 184      =1  sbit PB0   = IP0^5;
 185      =1  sbit PS    = IP0^4; // alternatively "PSR"
 186      =1  sbit PSR   = IP0^4;
 187      =1  sbit PT1   = IP0^3;
 188      =1  sbit PX1   = IP0^2;
 189      =1  sbit PT0   = IP0^1;
 190      =1  sbit PX0   = IP0^0;
 191      =1  
 192      =1  /*  IP1   */
 193      =1  sbit PAD  = IP1^7; // alternatively "PIEE" 
 194      =1  sbit PIEE = IP1^7;
 195      =1  sbit PST  = IP1^6;
 196      =1  sbit PCCU = IP1^4;
 197      =1  sbit PSPI = IP1^3;
 198      =1  sbit PC_  = IP1^2;
 199      =1  sbit PKBI = IP1^1;
 200      =1  sbit PI2C = IP1^0;
 201      =1  
 202      =1  /*  SCON  */
 203      =1  sbit SM0  = SCON^7; // alternatively "FE"
 204      =1  sbit FE   = SCON^7;
 205      =1  sbit SM1  = SCON^6;
 206      =1  sbit SM2  = SCON^5;
 207      =1  sbit REN  = SCON^4;
 208      =1  sbit TB8  = SCON^3;
 209      =1  sbit RB8  = SCON^2;
 210      =1  sbit TI   = SCON^1;
 211      =1  sbit RI   = SCON^0;
 212      =1  
 213      =1  /*  I2CON  */
 214      =1  sbit I2EN  = I2CON^6;
 215      =1  sbit STA   = I2CON^5;
 216      =1  sbit STO   = I2CON^4;
 217      =1  sbit SI    = I2CON^3;
 218      =1  sbit AA    = I2CON^2;
 219      =1  sbit CRSEL = I2CON^0;
 220      =1  
 221      =1  /*  P0  */
 222      =1  sbit KB7 = P0^7; // alternatively "T1"
 223      =1  sbit T1 = P0^7;
 224      =1  sbit KB6 = P0^6; // alternatively "CMP1"
 225      =1  //sbit CMP1 = P0^6;
 226      =1  sbit KB5 = P0^5;
 227      =1  sbit KB4 = P0^4;
 228      =1  sbit KB3 = P0^3;
 229      =1  sbit KB2 = P0^2;
 230      =1  sbit KB1 = P0^1;
 231      =1  sbit KB0 = P0^0; // alternatively "CMP2"
 232      =1  //sbit CMP2 = P0^0;
 233      =1  
 234      =1  /*  P1  */
 235      =1  sbit OCC     = P1^7;
 236      =1  sbit OCB     = P1^6;
 237      =1  sbit RST     = P1^5;
 238      =1  sbit INT1    = P1^4;
 239      =1  sbit INT0    = P1^3; // alternatively "SDA"
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 5   

 240      =1  sbit SDA     = P1^3;
 241      =1  sbit T0      = P1^2; // alternatively "SCL"
 242      =1  sbit SCL     = P1^2;
 243      =1  sbit RxD     = P1^1;
 244      =1  sbit TxD     = P1^0;
 245      =1  
 246      =1  /*  P2  */
 247      =1  sbit ICA     = P2^7;
 248      =1  sbit OCA     = P2^6;
 249      =1  sbit SPICLK  = P2^5;
 250      =1  sbit SS      = P2^4;
 251      =1  sbit MISO    = P2^3;
 252      =1  sbit MOSI    = P2^2;
 253      =1  sbit OCD     = P2^1;
 254      =1  sbit ICB     = P2^0;
 255      =1  
 256      =1  /*  P3  */
 257      =1  sbit XTAL1= P3^1;
 258      =1  sbit XTAL2= P3^0;
 259      =1  
 260      =1  /* TCR20 */
 261      =1  sbit PLLEN = TCR20^7;
 262      =1  sbit HLTRN = TCR20^6;
 263      =1  sbit HLTEN = TCR20^5;
 264      =1  sbit ALTCD = TCR20^4;
 265      =1  sbit ALTAB = TCR20^3;
 266      =1  sbit TDIR2 = TCR20^2;
 267      =1  sbit TMOD21= TCR20^1;
 268      =1  sbit TMOD20= TCR20^0;
 269      =1  
 270      =1  /* ADMODA */
 271      =1  sbit BNDI1  = ADMODA^7;
 272      =1  sbit BURST1 = ADMODA^6;
 273      =1  sbit SCC1   = ADMODA^5;
 274      =1  sbit SCAN1  = ADMODA^4;
 275      =1  sbit BNDI0  = ADMODA^3;
 276      =1  sbit BURST0 = ADMODA^2;
 277      =1  sbit SCC0   = ADMODA^1;
 278      =1  sbit SCAN0  = ADMODA^0;
 279      =1  
 280      =1  #endif
 281      =1  
   2          #include <LIMITS.H>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  LIMITS.H
   3      =1  
   4      =1  ANSI standard include file.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __LIMITS_H__
  10      =1  #define __LIMITS_H__
  11      =1  
  12      =1  #define CHAR_BIT         8              /* Number of bits in any "char" */
  13      =1  #define CHAR_MAX         127            /* Max             "char" value */
  14      =1  #define CHAR_MIN       (-128)           /* Min             "char" value */
  15      =1  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  16      =1  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
  17      =1  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  18      =1  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  19      =1  #define SHRT_MIN       (-32768)         /* Min ("signed") "short" value */
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 6   

  20      =1  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  21      =1  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  22      =1  #define INT_MIN        (-32768)         /* Min ("signed")   "int" value */
  23      =1  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  24      =1  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  25      =1  #define LONG_MIN        -2147483648     /* Min ("signed")  "long" value */
  26      =1  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
  27      =1  
  28      =1  #endif
   3          #include <MATH.H>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  MATH.H
   3      =1  
   4      =1  Prototypes for mathematic functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __MATH_H__
  10      =1  #define __MATH_H__
  11      =1  
  12      =1  #pragma SAVE
  13      =1  #pragma REGPARMS
  14      =1  extern char  cabs  (char  val);
  15      =1  extern int    abs  (int   val);
  16      =1  extern long  labs  (long  val);
  17      =1  extern float fabs  (float val);
  18      =1  extern float sqrt  (float val);
  19      =1  extern float exp   (float val);
  20      =1  extern float log   (float val);
  21      =1  extern float log10 (float val);
  22      =1  extern float sin   (float val);
  23      =1  extern float cos   (float val);
  24      =1  extern float tan   (float val);
  25      =1  extern float asin  (float val);
  26      =1  extern float acos  (float val);
  27      =1  extern float atan  (float val);
  28      =1  extern float sinh  (float val);
  29      =1  extern float cosh  (float val);
  30      =1  extern float tanh  (float val);
  31      =1  extern float atan2 (float y, float x);
  32      =1  
  33      =1  extern float ceil  (float val);
  34      =1  extern float floor (float val);
  35      =1  extern float modf  (float val, float *n);
  36      =1  extern float fmod  (float x, float y);
  37      =1  extern float pow   (float x, float y);
  38      =1  
  39      =1  #pragma RESTORE
  40      =1  
  41      =1  #endif
   4          #include "itrip.h"
   1      =1  /*
   2      =1  itrip HEADERZ v1e-9
   3      =1  */
   4      =1  
   5      =1  #ifndef ITRIP_H
   6      =1  #define ITRIP_H 
   7      =1  
   8      =1  #include <REG936.H>
   1      =2  /*--------------------------------------------------------------------------
   2      =2  REG936.H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 7   

   3      =2  
   4      =2  Header file for Philips 89LPC936
   5      =2  Copyright (c) 1988-2006 KEIL - An ARM Company
   6      =2  All rights reserved.
   7      =2  V1.1
   8      =2  --------------------------------------------------------------------------*/
   9      =2  
  10      =2  #ifndef __REG936_H__
           =2 #define __REG936_H__
           =2 
           =2 /*  BYTE Registers  */
           =2 sfr P0   = 0x80;
           =2 sfr P1   = 0x90;
           =2 sfr P2   = 0xA0;
           =2 sfr P3   = 0xB0;
           =2 sfr PSW  = 0xD0;
           =2 sfr ACC  = 0xE0;
           =2 sfr B    = 0xF0;
           =2 sfr SP   = 0x81;
           =2 sfr DPL  = 0x82;
           =2 sfr DPH  = 0x83;
           =2 sfr PCON = 0x87;
           =2 sfr TCON = 0x88;
           =2 sfr TMOD = 0x89;
           =2 sfr TL0  = 0x8A;
           =2 sfr TL1  = 0x8B;
           =2 sfr TH0  = 0x8C;
           =2 sfr TH1  = 0x8D;
           =2 sfr IEN0 = 0xA8;
           =2 sfr IP0  = 0xB8;
           =2 sfr SCON = 0x98;
           =2 sfr SBUF = 0x99;
           =2 
           =2 sfr ADCON0 = 0x8E;
           =2 sfr ADCON1 = 0x97;
           =2 sfr ADMODA = 0xC0;
           =2 sfr ADMODB = 0xA1;
           =2 sfr ADINS  = 0xA3;
           =2 sfr AD0DAT0= 0xC5;
           =2 sfr AD0DAT1= 0xC6;
           =2 sfr AD0DAT2= 0xC7;
           =2 sfr AD0DAT3= 0xF4;
           =2 sfr AD1DAT0= 0xD5;
           =2 sfr AD1DAT1= 0xD6;
           =2 sfr AD1DAT2= 0xD7;
           =2 sfr AD1DAT3= 0xF5;
           =2 sfr AD0BH  = 0xBB;
           =2 sfr AD0BL  = 0xA6;
           =2 sfr AD1BH  = 0xC4;
           =2 sfr AD1BL  = 0xBC;
           =2 sfr AUXR1  = 0xA2;
           =2 sfr SADDR  = 0xA9;
           =2 sfr SADEN  = 0xB9;
           =2 sfr TL2    = 0xCC;
           =2 sfr TH2    = 0xCD;
           =2 sfr BRGR0  = 0xBE;
           =2 sfr BRGR1  = 0xBF;
           =2 sfr BRGCON = 0xBD;
           =2 sfr CCCRA  = 0xEA;
           =2 sfr CCCRB  = 0xEB;
           =2 sfr CCCRC  = 0xEC;
           =2 sfr CCCRD  = 0xED;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 8   

           =2 sfr CMP1   = 0xAC;
           =2 sfr CMP2   = 0xAD;
           =2 sfr DEECON = 0xF1;
           =2 sfr DEEDAT = 0xF2;
           =2 sfr DEEADR = 0xF3;
           =2 sfr DIVM   = 0x95;
           =2 sfr I2ADR  = 0xDB;
           =2 sfr I2CON  = 0xD8;
           =2 sfr I2DAT  = 0xDA;
           =2 sfr I2SCLH = 0xDD;
           =2 sfr I2SCLL = 0xDC;
           =2 sfr I2STAT = 0xD9;
           =2 sfr ICRAH  = 0xAB;
           =2 sfr ICRAL  = 0xAA;
           =2 sfr ICRBH  = 0xAF;
           =2 sfr ICRBL  = 0xAE;
           =2 sfr IEN1   = 0xE8;
           =2 sfr IP1    = 0xF8;
           =2 sfr IP1H   = 0xF7;
           =2 sfr KBCON  = 0x94;
           =2 sfr KBMASK = 0x86;
           =2 sfr KBPATN = 0x93;
           =2 sfr OCRAH  = 0xEF;
           =2 sfr OCRAL  = 0xEE;
           =2 sfr OCRBH  = 0xFB;
           =2 sfr OCRBL  = 0xFA;
           =2 sfr OCRCH  = 0xFD;
           =2 sfr OCRCL  = 0xFC;
           =2 sfr OCRDH  = 0xFF;
           =2 sfr OCRDL  = 0xFE;
           =2 sfr P0M1   = 0x84;
           =2 sfr P0M2   = 0x85;
           =2 sfr P1M1   = 0x91;
           =2 sfr P1M2   = 0x92;
           =2 sfr P2M1   = 0xA4;
           =2 sfr P2M2   = 0xA5;
           =2 sfr P3M1   = 0xB1;
           =2 sfr P3M2   = 0xB2;
           =2 sfr PCONA  = 0xB5;
           =2 sfr PT0AD  = 0xF6;
           =2 sfr RSTSRC = 0xDF;
           =2 sfr RTCCON = 0xD1;
           =2 sfr RTCH   = 0xD2;
           =2 sfr RTCL   = 0xD3;
           =2 sfr SSTAT  = 0xBA;
           =2 sfr SPCTL  = 0xE2;
           =2 sfr SPSTAT = 0xE1;
           =2 sfr SPDAT  = 0xE3;
           =2 sfr TAMOD  = 0x8F;
           =2 sfr TCR20  = 0xC8;
           =2 sfr TCR21  = 0xF9;
           =2 sfr TICR2  = 0xC9;
           =2 sfr TIFR2  = 0xE9;
           =2 sfr TISE2  = 0xDE;
           =2 sfr TOR2H  = 0xCF;
           =2 sfr TOR2L  = 0xCE;
           =2 sfr TPCR2H = 0xCB;
           =2 sfr TPCR2L = 0xCA;
           =2 sfr TRIM   = 0x96;
           =2 sfr WDCON  = 0xA7;
           =2 sfr WDL    = 0xC1;
           =2 sfr WFEED1 = 0xC2;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 9   

           =2 sfr WFEED2 = 0xC3;
           =2 sfr IP0H   = 0xB7;
           =2 
           =2 /*  BIT Registers  */
           =2 ////AUXR1
           =2 //sbit DPS  = AUXR1^0;
           =2 ////not used
           =2 ////hard wired to 0
           =2 //sbit SRST = AUXR1^3;
           =2 //sbit ENT0 = AUXR1^4; //hardware toggle
           =2 //sbit ENT1 = AUXR1^5;
           =2 //sbit EBRR = AUXR1^6;
           =2 //sbit CLKLP = AUXR1^7;
           =2 
           =2 /*  PSW   */
           =2 sbit CY   = PSW^7;
           =2 sbit AC   = PSW^6;
           =2 sbit F0   = PSW^5;
           =2 sbit RS1  = PSW^4;
           =2 sbit RS0  = PSW^3;
           =2 sbit OV   = PSW^2;                 
           =2 sbit F1   = PSW^1;
           =2 sbit P    = PSW^0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1  = TCON^7;
           =2 sbit TR1  = TCON^6;
           =2 sbit TF0  = TCON^5;
           =2 sbit TR0  = TCON^4;
           =2 sbit IE1  = TCON^3;
           =2 sbit IT1  = TCON^2;
           =2 sbit IE0  = TCON^1;
           =2 sbit IT0  = TCON^0;
           =2 
           =2 /*  IEN0   */
           =2 sbit EA   = IEN0^7;
           =2 sbit EWDRT = IEN0^6;
           =2 sbit EBO   = IEN0^5;
           =2 sbit ES   = IEN0^4; // alternatively "ESR"
           =2 sbit ESR  = IEN0^4;
           =2 sbit ET1  = IEN0^3;
           =2 sbit EX1  = IEN0^2;
           =2 sbit ET0  = IEN0^1;
           =2 sbit EX0  = IEN0^0;
           =2 
           =2 /*  IEN1   */
           =2 sbit EAD  = IEN1^7; // alternatively "EIEE" 
           =2 sbit EIEE = IEN1^7;
           =2 sbit EST  = IEN1^6;
           =2 sbit ECCU = IEN1^4;
           =2 sbit ESPI = IEN1^3;
           =2 sbit EC   = IEN1^2;
           =2 sbit EKBI = IEN1^1;
           =2 sbit EI2C = IEN1^0;
           =2 
           =2 /*  IP0   */ 
           =2 sbit PWDRT = IP0^6;
           =2 sbit PB0   = IP0^5;
           =2 sbit PS    = IP0^4; // alternatively "PSR"
           =2 sbit PSR   = IP0^4;
           =2 sbit PT1   = IP0^3;
           =2 sbit PX1   = IP0^2;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 10  

           =2 sbit PT0   = IP0^1;
           =2 sbit PX0   = IP0^0;
           =2 
           =2 /*  IP1   */
           =2 sbit PAD  = IP1^7; // alternatively "PIEE" 
           =2 sbit PIEE = IP1^7;
           =2 sbit PST  = IP1^6;
           =2 sbit PCCU = IP1^4;
           =2 sbit PSPI = IP1^3;
           =2 sbit PC_  = IP1^2;
           =2 sbit PKBI = IP1^1;
           =2 sbit PI2C = IP1^0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0  = SCON^7; // alternatively "FE"
           =2 sbit FE   = SCON^7;
           =2 sbit SM1  = SCON^6;
           =2 sbit SM2  = SCON^5;
           =2 sbit REN  = SCON^4;
           =2 sbit TB8  = SCON^3;
           =2 sbit RB8  = SCON^2;
           =2 sbit TI   = SCON^1;
           =2 sbit RI   = SCON^0;
           =2 
           =2 /*  I2CON  */
           =2 sbit I2EN  = I2CON^6;
           =2 sbit STA   = I2CON^5;
           =2 sbit STO   = I2CON^4;
           =2 sbit SI    = I2CON^3;
           =2 sbit AA    = I2CON^2;
           =2 sbit CRSEL = I2CON^0;
           =2 
           =2 /*  P0  */
           =2 sbit KB7 = P0^7; // alternatively "T1"
           =2 sbit T1 = P0^7;
           =2 sbit KB6 = P0^6; // alternatively "CMP1"
           =2 //sbit CMP1 = P0^6;
           =2 sbit KB5 = P0^5;
           =2 sbit KB4 = P0^4;
           =2 sbit KB3 = P0^3;
           =2 sbit KB2 = P0^2;
           =2 sbit KB1 = P0^1;
           =2 sbit KB0 = P0^0; // alternatively "CMP2"
           =2 //sbit CMP2 = P0^0;
           =2 
           =2 /*  P1  */
           =2 sbit OCC     = P1^7;
           =2 sbit OCB     = P1^6;
           =2 sbit RST     = P1^5;
           =2 sbit INT1    = P1^4;
           =2 sbit INT0    = P1^3; // alternatively "SDA"
           =2 sbit SDA     = P1^3;
           =2 sbit T0      = P1^2; // alternatively "SCL"
           =2 sbit SCL     = P1^2;
           =2 sbit RxD     = P1^1;
           =2 sbit TxD     = P1^0;
           =2 
           =2 /*  P2  */
           =2 sbit ICA     = P2^7;
           =2 sbit OCA     = P2^6;
           =2 sbit SPICLK  = P2^5;
           =2 sbit SS      = P2^4;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 11  

           =2 sbit MISO    = P2^3;
           =2 sbit MOSI    = P2^2;
           =2 sbit OCD     = P2^1;
           =2 sbit ICB     = P2^0;
           =2 
           =2 /*  P3  */
           =2 sbit XTAL1= P3^1;
           =2 sbit XTAL2= P3^0;
           =2 
           =2 /* TCR20 */
           =2 sbit PLLEN = TCR20^7;
           =2 sbit HLTRN = TCR20^6;
           =2 sbit HLTEN = TCR20^5;
           =2 sbit ALTCD = TCR20^4;
           =2 sbit ALTAB = TCR20^3;
           =2 sbit TDIR2 = TCR20^2;
           =2 sbit TMOD21= TCR20^1;
           =2 sbit TMOD20= TCR20^0;
           =2 
           =2 /* ADMODA */
           =2 sbit BNDI1  = ADMODA^7;
           =2 sbit BURST1 = ADMODA^6;
           =2 sbit SCC1   = ADMODA^5;
           =2 sbit SCAN1  = ADMODA^4;
           =2 sbit BNDI0  = ADMODA^3;
           =2 sbit BURST0 = ADMODA^2;
           =2 sbit SCC0   = ADMODA^1;
           =2 sbit SCAN0  = ADMODA^0;
           =2 
           =2 #endif
 281      =2  
   9      =1  
  10      =1  /**************************TYPES*******************************************/
  11      =1  typedef unsigned char byte;
  12      =1  typedef unsigned int word; // 16 bits (is short)
  13      =1  
  14      =1  #define SYS_LEN 512
  15      =1  
  16      =1  typedef struct Riff_s {
  17      =1          word rAddy; //the physical address of riff
  18      =1          byte repeats;
  19      =1  } RIFF_T;
  20      =1  
  21      =1  
  22      =1  /***********************DEFINE SWITCHES**********************/
  23      =1  //a totally different program actually!!!!
  24      =1  //#define COORD         //blast midi clock out of UArt and drive RT messages
  25      =1  #define BASIC_TX
  26      =1  //#define DEBUG_SIM
  27      =1  
  28      =1  //KEIL!!!!  you get the point!!!
  29      =1  //#ifdef (COORD && BASIC_TX)
  30      =1  //      #error "DUMB!!! L00K UP!!!"
  31      =1  //#endif
  32      =1  
  33      =1  
  34      =1  ///MIDI STUFF
  35      =1  #define MY_L_CHAN       0 //[0-15] //base channel
  36      =1  #define MY_V_CHAN       (MY_L_CHAN+1) //always Lchan++
  37      =1  #define MY_ID           0
  38      =1  
  39      =1  #define MAX_FREQ        1200
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 12  

  40      =1  #define MIN_FREQ        700
  41      =1  #define NUM_NOTE_CMDS   (127-LUT_NUM_NOTES) //28
  42      =1  //we can either stuff cmds in 0-9 and 110-127 or rewrite storage...
  43      =1  //seems tricky to rewrite, we just map low and hi notes to cmds
  44      =1  //woah!!!  we could double these if we teamed up with NOTE_OFF...
  45      =1  //not ideal for storage....  maybe for todo
  46      =1  enum {
  47      =1          TX_OFF = 0,     //npc
  48      =1          TX_ON = 1,  //npc
  49      =1          UPDOWN_OFF = 2,
  50      =1          STATION_UP = 3,
  51      =1          STATION_DOWN = 4,
  52      =1          DOWN1 = 5,  //todo make relative...   align with pitch wheel
  53      =1          DOWN2 = 6,      
  54      =1          DOWN3 = 7,      
  55      =1          DOWN4 = 8,
  56      =1          DOWN5 = 9,
  57      =1          HOLD0 = 109,
  58      =1          UP1 = 110,
  59      =1          UP2 = 111,
  60      =1          UP3 = 112,
  61      =1          UP4 = 113,
  62      =1          UP5 = 114,
  63      =1          STATION_UP2 = 115,                      //npc
  64      =1          STATION_DOWN2 = 116,                     //npc//npc
  65      =1          STATION_UP3 = 117,
  66      =1          STATION_DOWN3 = 118,                                      //npc
  67      =1          STATION_UP4 = 119,                                                        //npc
  68      =1          STATION_DOWN4 = 120,                                                      //npc
  69      =1          STATION_UP5 = 121,      //npc
  70      =1          STATION_DOWN5 = 122,     //npc
  71      =1          STATION_UP6 = 123,                       //npc
  72      =1          STATION_DOWN6 = 124,                              //npc
  73      =1          HOLD1 = 125,
  74      =1          HOLD2 = 126,
  75      =1          NOTE_OFF_MEM = 127
  76      =1  };
  77      =1  
  78      =1  
  79      =1  /***************************GLOBALS******************************************/
  80      =1  extern volatile byte songNum; //127
  81      =1  extern volatile word midiClk;
  82      =1  extern volatile byte xdata sysEx[SYS_LEN];
  83      =1  extern volatile byte sysIx;
  84      =1  
  85      =1  extern volatile RIFF_T* curSong;
  86      =1  extern volatile word nextRiff;
  87      =1  extern volatile byte curRiffCnt;
  88      =1  extern volatile word numRiffs;
  89      =1  extern volatile byte code* riff;
  90      =1  extern volatile word deltaPos;
  91      =1  extern volatile byte numNotes;
  92      =1  extern volatile byte nextNote;
  93      =1  
  94      =1  extern volatile byte bdata midiFlags;
  95      =1  //state flags -- maybe change to sbit????
  96      =1  extern bit AUDIO_L_ON;  
  97      =1  extern bit TX_VCC_ON;   
  98      =1  extern bit STEREO;              
  99      =1  extern bit PLAYING;             
 100      =1  extern bit BUTT_EN;             
 101      =1  extern bit OMNI;                
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 13  

 102      =1  extern bit SONG_DONE;   
 103      =1  //extern bit SYS_EX_DONE;
 104      =1  
 105      =1  extern volatile byte periodH0;
 106      =1  extern volatile byte periodL0;
 107      =1  extern volatile byte periodH1;
 108      =1  extern volatile byte periodL1;
 109      =1  extern volatile word lDelta;   //a proportion of sorts
 110      =1  extern volatile word txDelta;
 111      =1  extern volatile bit deltaLUp;
 112      =1  extern volatile bit deltaTxUp;
 113      =1  //extern volatile byte deltaLMount; 
 114      =1  //extern volatile byte deltaTxMount;
 115      =1  
 116      =1  extern volatile bit txOffSwitch;
 117      =1  extern word station;
 118      =1  
 119      =1  /****************************PROTOS*********************/
 120      =1  void setup ();  //name and turn on
 121      =1  void delay (word cnt);
 122      =1  void shiftout8 (byte d);
 123      =1  //      void shiftout16 (word d);
 124      =1  //      void shiftout32 (word dh, word dl);
 125      =1  void txProg ();
 126      =1  void setFreq (word freq);
 127      =1  void delayT (word t);
 128      =1  void updateNote(void);
 129      =1  /************************EMPTY Protos****************/  
 130      =1  
 131      =1  
 132      =1  /******************PIN NAMES****************************/       
 133      =1  sbit txVcc = P2^7;
 134      =1  sbit txData = P2^2;
 135      =1  sbit txClk = P2^3;
 136      =1  sbit LED = P2^5;
 137      =1  sbit CE = P2^4;
 138      =1  sbit midButt = P0^0;
 139      =1  sbit hiButt = P0^1;
 140      =1  sbit loButt = P0^2;
 141      =1  sbit audioL = P0^3;
 142      =1  sbit audioN = P0^4;     //must be soldered and AC coupled (DC blocked) with 1 uF
 143      =1  //sbit LEDout = P2
 144      =1  #endif
   5          #include "uart.h"
   1      =1  #ifndef _UARTH_
   2      =1  #define _UARTH_
   3      =1  
   4      =1  #define RX_BUF_SIZE     8
   5      =1  
   6      =1  // midi in definition
   7      =1  
   8      =1  typedef struct m_in_s {
   9      =1    unsigned char
  10      =1      typeChan,          // type              )
  11      =1  //    channel,       // channel           )  current message 
  12      =1      count,         // data counter      )
  13      =1      controller,    // controller number )
  14      =1      pitch;         // key pitch         )
  15      =1  //      song;          // song number
  16      =1  // Always acted on, never persistent
  17      =1  //    velocity,      //key velocity      ) last note message or pressure message data
  18      =1  //    pressure,      // key pressure      )
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 14  

  19      =1    unsigned short
  20      =1      position;      // song position
  21      =1  } m_in_t;
  22      =1  
  23      =1  
  24      =1  void uart_transmit (unsigned char value);
  25      =1  unsigned char uart_get (void);
  26      =1  void uart_init (void);
  27      =1  unsigned char ascii_to_hex(unsigned char ch);
  28      =1  void print_hex_to_ascii(unsigned char ch);
  29      =1  #endif // _UARTH_
   6          #include "midi_spec.h"
   1      =1  /*
   2      =1  
   3      =1    thanks Peter Everett!!!!
   4      =1  
   5      =1  */
   6      =1  
   7      =1  #ifndef midi_spec_h
   8      =1  #define midi_spec_h
   9      =1  
  10      =1  //COORD extra codes from midi Files... 
  11      =1  //really only ever gonna be TEMPO
  12      =1  #define TEMPO_SET       0x70//0x51 in file
  13      =1  
  14      =1  //Staion macros for general sliders..
  15      =1  #define STATION_TO_HI(x)        ((unsigned char)(((((unsigned int)x) - 700) >> 2) & 0x7f))
  16      =1  #define STATION_TO_LO(x)        ((unsigned char)(((((unsigned int)x) - 700) << 5) & 0x7f))
  17      =1  
  18      =1  #define NUM_MIDI_CHANS      16    // Number of logical channels
  19      =1  
  20      =1  #define PERCUSSION_CHAN     10    // Channel used for percussuion
  21      =1  
  22      =1  #define MIDI_DATA_RANGE    128    // 7 bit data range
  23      =1  
  24      =1  
  25      =1  // Note numbers,
  26      =1  
  27      =1  // lowest note  C0  (0)   =     8.1757989156437073336828122976033Hz
  28      =1  
  29      =1  // middle C is  C5  (60)  =   261.6255653005986346778499935233Hz
  30      =1  
  31      =1  // reference    A6  (69)  =   440Hz
  32      =1  
  33      =1  // highest note G10 (127) = 12543.853951415977410742384974714Hz
  34      =1  
  35      =1  enum
  36      =1  
  37      =1  {
  38      =1  
  39      =1    C0, Cs0, D0, Ds0, E0, Fm0, Fs0, G0, Gs0, A0, As0, B0,
  40      =1  
  41      =1    C1, Cs1, D1, Ds1, E1, Fm1, Fs1, G1, Gs1, A1, As1, B1,
  42      =1  
  43      =1    C2, Cs2, D2, Ds2, E2, F2, Fs2, G2, Gs2, A2, As2, B2,
  44      =1  
  45      =1    C3, Cs3, D3, Ds3, E3, F3, Fs3, G3, Gs3, A3, As3, B3,
  46      =1  
  47      =1    C4, Cs4, D4, Ds4, E4, F4, Fs4, G4, Gs4, A4, As4, B4,
  48      =1  
  49      =1    C5, Cs5, D5, Ds5, E5, F5, Fs5, G5, Gs5, A5, As5, B5,
  50      =1  
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 15  

  51      =1    C6, Cs6, D6, Ds6, E6, F6, Fs6, G6, Gs6, A6, As6, B6,
  52      =1  
  53      =1    C7, Cs7, D7, Ds7, E7, F7, Fs7, G7, Gs7, A7, As7, B7,
  54      =1  
  55      =1    C8, Cs8, D8, Ds8, E8, F8, Fs8, G8, Gs8, A8, As8, B8,
  56      =1  
  57      =1    C9, Cs9, D9, Ds9, E9, F9, Fs9, G9, Gs9, A9, As9, B9,
  58      =1  
  59      =1    C10,Cs10,D10,Ds10,E10,F10,Fs10,NOTE_OFF,/*G10,*/NUM_NOTES
  60      =1  
  61      =1  };
  62      =1  
  63      =1  
  64      =1  
  65      =1  
  66      =1  // Voice messages. (bits 0..3 are the channel number)
  67      =1  
  68      =1  #define NOTE_OFF            0x80  // + 2 bytes, pitch (note), velocity
  69      =1  
  70      =1  #define NOTE_ON             0x90  // + 2 bytes, pitch (note), velocity
  71      =1  
  72      =1  #define KEY_PRESSURE        0xa0  // + 2 bytes, pitch (note), pressure
  73      =1  
  74      =1  #define CONTROL             0xb0  // + 2 bytes, controller, setting
  75      =1  
  76      =1  #define PROGRAM             0xc0  // + 1 byte, program (patch)
  77      =1  
  78      =1  #define CHAN_PRESSURE       0xd0  // + 1 byte, pressure
  79      =1  
  80      =1  #define PITCH_WHEEL         0xe0  // + 2 bytes, 14bit value, 7 lsb's first
  81      =1  
  82      =1  
  83      =1  // System messages
  84      =1  
  85      =1  #define SYSTEM_EXCLUSIVE    0xf0
  86      =1  
  87      =1  #define SONG_POSITION       0xf2
  88      =1  
  89      =1  #define SONG_SELECT         0xf3
  90      =1  
  91      =1  #define TUNE_REQUEST        0xf6
  92      =1  
  93      =1  #define EOX                 0xf7 // system exclusive terminator
  94      =1  
  95      =1  
  96      =1  // Real Time messages
  97      =1  
  98      =1  #define TIMING_CLOCK        0xf8
  99      =1  
 100      =1  #define START               0xfa
 101      =1  
 102      =1  #define CONTINUE            0xfb
 103      =1  
 104      =1  #define STOP                0xfc
 105      =1  
 106      =1  #define ACTIVE_SENSING      0xfe
 107      =1  
 108      =1  #define SYSTEM_RESET        0xff
 109      =1  
 110      =1  
 111      =1  
 112      =1  
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 16  

 113      =1  // Controllers
 114      =1  
 115      =1  
 116      =1  // msb of 14 bit values
 117      =1  
 118      =1  #define BANK_hi             0x00
 119      =1  
 120      =1  #define MOD_WHEEL_hi        0x01
 121      =1  
 122      =1  #define BREATH_CTRL_hi      0x02
 123      =1  
 124      =1  #define FOOT_PEDAL_hi       0x04
 125      =1  
 126      =1  #define PORTAMENTO_TIME_hi  0x05
 127      =1  
 128      =1  #define DATA_ENTRY_hi       0x06
 129      =1  
 130      =1  #define VOLUME_hi           0x07
 131      =1  
 132      =1  #define BALANCE_hi          0x08
 133      =1  
 134      =1  #define PAN_POSN_hi         0x0a
 135      =1  
 136      =1  #define EXPRESSION_hi       0x0b
 137      =1  
 138      =1  #define EFFECT_CTRL_1_hi    0x0c
 139      =1  
 140      =1  #define EFFECT_CTRL_2_hi    0x0d
 141      =1  
 142      =1  #define GENERAL_SLIDER_1_hi 0x10
 143      =1  
 144      =1  #define GENERAL_SLIDER_2_hi 0x11
 145      =1  
 146      =1  #define GENERAL_SLIDER_3_hi 0x12
 147      =1  
 148      =1  #define GENERAL_SLIDER_4_hi 0x13
 149      =1  
 150      =1  
 151      =1  // lsb of 14 bit values
 152      =1  
 153      =1  #define BANK_lo             0x20
 154      =1  
 155      =1  #define MOD_WHEEL_lo        0x21
 156      =1  
 157      =1  #define BREATH_CTRL_lo      0x22
 158      =1  
 159      =1  #define FOOT_PEDAL_lo       0x24
 160      =1  
 161      =1  #define PORTAMENTO_TIME_lo  0x25
 162      =1  
 163      =1  #define DATA_ENTRY_lo       0x26
 164      =1  
 165      =1  #define VOLUME_lo           0x27
 166      =1  
 167      =1  #define BALANCE_lo          0x28
 168      =1  
 169      =1  #define PAN_POSN_lo         0x2a
 170      =1  
 171      =1  #define EXPRESSION_lo       0x2b
 172      =1  
 173      =1  #define EFFECT_CTRL_1_lo    0x2c
 174      =1  
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 17  

 175      =1  #define EFFECT_CTRL_2_lo    0x2d
 176      =1  
 177      =1  #define GENERAL_SLIDER_1_lo 0x30
 178      =1  
 179      =1  #define GENERAL_SLIDER_2_lo 0x31
 180      =1  
 181      =1  #define GENERAL_SLIDER_3_lo 0x32
 182      =1  
 183      =1  #define GENERAL_SLIDER_4_lo 0x33
 184      =1  
 185      =1  
 186      =1  // switches, >=64 = on, <64 = off
 187      =1  
 188      =1  #define HOLD_PEDAL_on       0x40
 189      =1  
 190      =1  #define PORTAMENTO_on       0x41
 191      =1  
 192      =1  #define SUSTENUTO_PEDAL_on  0x42
 193      =1  
 194      =1  #define SOFT_PEDAL_on       0x43
 195      =1  
 196      =1  #define LEGATO_PEDAL_on     0x44
 197      =1  
 198      =1  #define HOLD_2_PEDAL_on     0x45
 199      =1  
 200      =1  
 201      =1  // 7 bit values
 202      =1  
 203      =1  #define SOUND_VARIATION     0x46
 204      =1  
 205      =1  #define SOUND_TIMBRE        0x47
 206      =1  
 207      =1  #define SOUND_RELEASE_TIME  0x48
 208      =1  
 209      =1  #define SOUND_ATTACK_TIME   0x49
 210      =1  
 211      =1  #define SOUND_BRIGHTNESS    0x4a
 212      =1  
 213      =1  #define SOUND_CTRL_6        0x4b
 214      =1  
 215      =1  #define SOUND_CTRL_7        0x4c
 216      =1  
 217      =1  #define SOUND_CTRL_8        0x4d
 218      =1  
 219      =1  #define SOUND_CTRL_9        0x4e
 220      =1  
 221      =1  #define SOUND_CTRL_10       0x4f
 222      =1  
 223      =1  
 224      =1  // switches, >=64 = on, <64 = off
 225      =1  
 226      =1  #define GENERAL_BUTTON_1_on 0x50
 227      =1  
 228      =1  #define GENERAL_BUTTON_2_on 0x51
 229      =1  
 230      =1  #define GENERAL_BUTTON_3_on 0x52
 231      =1  
 232      =1  #define GENERAL_BUTTON_4_on 0x53
 233      =1  
 234      =1  
 235      =1  // 7 bit values
 236      =1  
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 18  

 237      =1  #define EFFECTS_LEVEL       0x5b
 238      =1  
 239      =1  #define TREMULO_LEVEL       0x5c
 240      =1  
 241      =1  #define CHORUS_LEVEL        0x5d
 242      =1  
 243      =1  #define CELESTE_LEVEL       0x5e
 244      =1  
 245      =1  #define PHASER_LEVEL        0x5f
 246      =1  
 247      =1  
 248      =1  #define DATA_BUTTON_INC     0x60
 249      =1  
 250      =1  #define DATA_BUTTON_DEC     0x61
 251      =1  
 252      =1  
 253      =1  // 14 bit values
 254      =1  
 255      =1  #define NON_REG_PARM_lo     0x62
 256      =1  
 257      =1  #define NON_REG_PARM_hi     0x63
 258      =1  
 259      =1  #define REG_PARM_lo         0x64
 260      =1  
 261      =1  #define REG_PARM_hi         0x65
 262      =1  
 263      =1  
 264      =1  // mode controls
 265      =1  
 266      =1  #define ALL_SOUND_OFF       0x78
 267      =1  
 268      =1  #define ALL_CONTROLLERS_OFF 0x79
 269      =1  
 270      =1  #define LOCAL_KEYBOARD_on   0x7a
 271      =1  
 272      =1  #define ALL_NOTES_OFF       0x7b
 273      =1  
 274      =1  #define OMNI_MODE_OFF       0x7c
 275      =1  
 276      =1  #define OMNI_MODE_ON        0x7d
 277      =1  
 278      =1  #define MONO_OPERATION      0x7e
 279      =1  
 280      =1  #define POLY_OPERATION      0x7f
 281      =1  
 282      =1  
 283      =1  
 284      =1  
 285      =1  // System Exclusive ID's
 286      =1  
 287      =1  #define SEQUENTIAL_CIRCUITS 0x01
 288      =1  
 289      =1  #define BIG_BRIAR           0x02
 290      =1  
 291      =1  #define OCTAVE_PLATEAU      0x03
 292      =1  
 293      =1  #define MOOG                0x04
 294      =1  
 295      =1  #define PASSPORT_DESIGNS    0x05
 296      =1  
 297      =1  #define LEXICON             0x06
 298      =1  
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 19  

 299      =1  #define KURZWEIL            0x07
 300      =1  
 301      =1  #define FENDER              0x08
 302      =1  
 303      =1  #define GULBRANSEN          0x09
 304      =1  
 305      =1  #define DELTA_LABS          0x0a
 306      =1  
 307      =1  #define SOUND_COMP          0x0b
 308      =1  
 309      =1  #define GENERAL_ELECTRO     0x0c
 310      =1  
 311      =1  #define TECHMAR             0x0d
 312      =1  
 313      =1  #define MATTHEWS_RESEARCH   0x0e
 314      =1  
 315      =1  #define OBERHEIM            0x10
 316      =1  
 317      =1  #define PAIA                0x11
 318      =1  
 319      =1  #define SIMMONS             0x12
 320      =1  
 321      =1  #define DIGIDESIGN          0x13
 322      =1  
 323      =1  #define FAIRLIGHT           0x14
 324      =1  
 325      =1  #define JL_COOPER           0x15
 326      =1  
 327      =1  #define LOWERY              0x16
 328      =1  
 329      =1  #define LIN                 0x17
 330      =1  
 331      =1  #define EMU                 0x18
 332      =1  
 333      =1  #define PEAVEY              0x1b
 334      =1  
 335      =1  
 336      =1  #define BON_TEMPI           0x20
 337      =1  
 338      =1  #define SEIL                0x21
 339      =1  
 340      =1  #define SYNTHEAXE           0x23
 341      =1  
 342      =1  #define HOHNER              0x24
 343      =1  
 344      =1  #define CRUMAR              0x25
 345      =1  
 346      =1  #define SOLTON              0x26
 347      =1  
 348      =1  #define JELLINGHAUS_MS      0x27
 349      =1  
 350      =1  #define CTS_                0x28
 351      =1  
 352      =1  #define PPG                 0x29
 353      =1  
 354      =1  #define ELKA                0x2f
 355      =1  
 356      =1  #define CHEETAH             0x36
 357      =1  
 358      =1  #define WALDORF             0x3e
 359      =1  
 360      =1  
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 20  

 361      =1  #define KAWAI               0x40
 362      =1  
 363      =1  #define ROLAND              0x41
 364      =1  
 365      =1  #define KORG                0x42
 366      =1  
 367      =1  #define YAMAHA              0x43
 368      =1  
 369      =1  #define CASIO               0x44
 370      =1  
 371      =1  #define KAMIYA_STUDIO       0x46
 372      =1  
 373      =1  #define AKAI                0x47
 374      =1  
 375      =1  #define VICTOR              0x48
 376      =1  
 377      =1  #define FUJITSU             0x4b
 378      =1  
 379      =1  #define SONY                0x4c
 380      =1  
 381      =1  #define TEAC                0x4e
 382      =1  
 383      =1  #define MATSUSHITA          0x50
 384      =1  
 385      =1  #define FOSTEX              0x51
 386      =1  
 387      =1  #define ZOOM                0x52
 388      =1  
 389      =1  #define MATSUSHITA2         0x54
 390      =1  
 391      =1  #define SUZUKI              0x55
 392      =1  
 393      =1  #define FUJI_SOUND          0x56
 394      =1  
 395      =1  #define ACOUSTIC_TECH_LIB   0x57
 396      =1  
 397      =1  
 398      =1  #define EDUCATIONAL_USE_ID  0x7d // for educational or development use only
 399      =1  
 400      =1  #define NON_REAL_TIME_ID    0x7e
 401      =1  
 402      =1  #define REAL_TIME_ID        0x7f
 403      =1  
 404      =1  
 405      =1  #endif
   7          #include "LUTFreq.h"
   1      =1  #ifndef LUTFREQ_H
   2      =1  #define LUTFREQ_H
   3      =1  
   4      =1  #define LUT_NUM_NOTES   99
   5      =1  #define LUT_MIDI_NOTE_SHIFT     10
   6      =1  #define LUT_LEN (LUT_NUM_NOTES)
   7      =1  #define LUT_NOTE_LIMIT (LUT_LEN + LUT_MIDI_NOTE_SHIFT)
   8      =1  
   9      =1  extern const unsigned int code LUTFreq[LUT_LEN];
  10      =1  
  11      =1  #endif
   8          #include "intrins.h"
   1      =1  /*--------------------------------------------------------------------------
   2      =1  INTRINS.H
   3      =1  
   4      =1  Intrinsic functions for C51.
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 21  

   5      =1  Copyright (c) 1988-2004 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __INTRINS_H__
  10      =1  #define __INTRINS_H__
  11      =1  
  12      =1  extern void          _nop_     (void);
  13      =1  extern bit           _testbit_ (bit);
  14      =1  extern unsigned char _cror_    (unsigned char, unsigned char);
  15      =1  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  16      =1  extern unsigned long _lror_    (unsigned long, unsigned char);
  17      =1  extern unsigned char _crol_    (unsigned char, unsigned char);
  18      =1  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  19      =1  extern unsigned long _lrol_    (unsigned long, unsigned char);
  20      =1  extern unsigned char _chkfloat_(float);
  21      =1  extern void          _push_    (unsigned char _sfr);
  22      =1  extern void          _pop_     (unsigned char _sfr);
  23      =1  
  24      =1  #endif
  25      =1  
   9          
  10          // flag that indicates if the UART is busy transmitting or not
  11          static bit mtxbusy;
  12          static volatile bit LnotV; //local flag of which channel to touch
  13          static volatile m_in_t midiMsg; 
  14          
  15          volatile word LPeriod;
  16          volatile word VPeriod;
  17          
  18          void uart_init (void) {
  19   1        // configure UART
  20   1        // clear SMOD0
  21   1        PCON &= ~0x40;
  22   1        SCON = 0x50;
  23   1        // set or clear SMOD1
  24   1        PCON &= 0x7f;
  25   1        PCON |= (0 << 8);
  26   1        SSTAT = 0xA0;
  27   1      
  28   1        // configure baud rate generator
  29   1        BRGCON = 0x00;
  30   1        BRGR0 = 0x30;
  31   1        BRGR1 = 0x00;
  32   1        BRGCON = 0x03;
  33   1      
  34   1        // TxD = push-pull, RxD = input
  35   1        P1M1 &= ~0x01;
  36   1        P1M2 |= 0x01;
  37   1        P1M1 |= 0x02;
  38   1        P1M2 &= ~0x02;
  39   1      
  40   1        // initially not busy
  41   1        mtxbusy = 0;
  42   1        
  43   1        // set receive isr priority to 0
  44   1        IP0 &= ~(0x10);
  45   1        IP0H &= ~(0x10);
  46   1        // enable uart receive interrupt
  47   1        ESR = 1;
  48   1       
  49   1      #ifdef COORD
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 22  

                // set transmit isr priority to 3
                IP1 |= 0x40;
                IP1H |= 0x40;
              #else
  54   1        // set transmit isr priority to 0 
  55   1        IP1 &= 0xBF;
  56   1        IP1H &= 0xBF;
  57   1      #endif
  58   1        // enable uart transmit interrupt
  59   1        EST = 1;
  60   1      } // uart_init
  61          
  62          void uart_rx_isr (void) interrupt 4 using 0 {
  63   1              //variables for scanning !!!
  64   1              word riffClks = 0;
  65   1              bit riffCntGotReset = 0;
  66   1      #ifdef DEBUG_SIM
                      volatile byte temp = SBUF;
              #endif
  69   1        if (_testbit_(RI)) {
  70   2      #ifdef DEBUG_SIM
                      volatile byte dataByte = temp; //volatile for debug!!!
              #else
  73   2              byte dataByte = SBUF;
  74   2      #endif
  75   2              if (dataByte & 0x80) {   //status byte
  76   3                      if (dataByte < 0xf0) {  //voice mesg
  77   4                              if (OMNI == 1) {
  78   5                                      midiMsg.typeChan = (byte)(dataByte & 0xf0) + MY_V_CHAN; //trigger note commands in OMNI mode 
  79   5                              } else if ((byte)(dataByte & 0x0f) == MY_L_CHAN || (byte)(dataByte & 0x0f) == MY_V_CHAN) {
  80   5                                      midiMsg.typeChan = dataByte; 
  81   5                              } else {
  82   5                                      midiMsg.typeChan = 0; //clear midiMsg
  83   5                                      goto IGNORE_MIDI;
  84   5                              }
  85   4                              switch (midiMsg.typeChan & 0xf0) {
  86   5                              case NOTE_OFF:
  87   5                              case NOTE_ON:
  88   5                              case CONTROL:
  89   5                                midiMsg.count = 2;
  90   5                                break;
  91   5                              case PROGRAM:
  92   5                                midiMsg.count = 1;
  93   5                                break;
  94   5                                      case PITCH_WHEEL: //todo
  95   5                                      case CHAN_PRESSURE:
  96   5                                      case KEY_PRESSURE:                                                                                                                                      
  97   5                                      default:
  98   5                                        goto IGNORE_MIDI;
  99   5                                    break;
 100   5                              }
 101   4                      } else {
 102   4                            // system messages
 103   4                      switch (dataByte) {
 104   5                                      case SYSTEM_EXCLUSIVE: // variable length until terminated by an EOX or any status byte
 105   5                                              sysIx = 0;
 106   5                                      break;
 107   5              
 108   5                              case SONG_POSITION:
 109   5                                              midiMsg.typeChan = dataByte;
 110   5                                              midiMsg.count = 2;
 111   5                                      break;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 23  

 112   5              
 113   5                              case SONG_SELECT:
 114   5                                              midiMsg.typeChan = dataByte;
 115   5                                              midiMsg.count = 1;
 116   5                                      break;
 117   5              
 118   5                              case TUNE_REQUEST:
 119   5                              break;
 120   5              
 121   5                              case EOX: // system exclusive terminator 
 122   5                                              //do stuff
 123   5                              break;
 124   5              
 125   5                              case TIMING_CLOCK:
 126   5                                              //if (PLAYING) {
 127   5                                              #ifdef COORD
              //                                              midiClk++;
              //                                              if (deltaPos > 0) {
              //                                                      deltaPos--; 
              //                                              }
                                                      #else
 133   5                                                      midiClk++;
 134   5                                                      if (PLAYING) {
 135   6                                                              if (deltaPos == 0) {
 136   7                                                                      updateNote();
 137   7                                                                      LED^=1;  
 138   7                                                              } else {
 139   7                                                                      --deltaPos;
 140   7                                                              }
 141   6                                                      }
 142   5                                                      //pitch up/down...
 143   5                                                      
 144   5                                                      if (lDelta != 0) {
 145   6                                                              word tempDelta = (UINT_MAX - LPeriod) >> lDelta;
 146   6                                                              if (tempDelta < 11 - lDelta) { //Delta is currently 6-10
 147   7                                                                      tempDelta = 11 - lDelta;
 148   7                                                              }
 149   6                                                              if (deltaLUp) {
 150   7                                                                      if ((LPeriod + tempDelta) <= UINT_MAX) {
 151   8                                                                              LPeriod += tempDelta;
 152   8                                                                      }
 153   7                                                              } else {
 154   7                                                                      if (LPeriod > tempDelta) {
 155   8                                                                              LPeriod -= tempDelta;
 156   8                                                                      }
 157   7                                                              }
 158   6                                                              periodH1 = ((byte)(LPeriod >> 8));
 159   6                                                              periodL1 = (0xff & LPeriod);
 160   6                                                      }
 161   5                                                      if (txDelta != 0) {
 162   6                                                              word tempDelta = (UINT_MAX - VPeriod) >> txDelta;
 163   6                                                              if (tempDelta < 11 - txDelta) { //Delta is currently 6-10
 164   7                                                                      tempDelta = 11 - txDelta;
 165   7                                                              }
 166   6                                                              if (deltaTxUp) {
 167   7                                                                      if ((VPeriod + tempDelta) <= UINT_MAX) {
 168   8                                                                              VPeriod += tempDelta;
 169   8                                                                      }
 170   7                                                              } else {
 171   7                                                                      if (VPeriod > tempDelta) {
 172   8                                                                              VPeriod -= tempDelta;
 173   8                                                                      }
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 24  

 174   7                                                              }
 175   6                                                              periodH0 = ((byte)(VPeriod >> 8));
 176   6                                                              periodL0 = (0xff & VPeriod);                                                    
 177   6                                                      }
 178   5                                              #endif
 179   5                                              //}
 180   5                              break;
 181   5              
 182   5                              case START:      //from the beginning
 183   5                                              midiClk = 0;
 184   5                                              deltaPos = 0;
 185   5                                              nextRiff = 0;
 186   5                                              numRiffs = (curSong[nextRiff]).rAddy;
 187   5                                              curRiffCnt = 0;
 188   5                                              numNotes = 0;
 189   5                                              nextNote = 0;
 190   5                                              PLAYING = 1;
 191   5                                              txDelta = 0;
 192   5                                              deltaTxUp = 0;
 193   5                                              lDelta = 0;
 194   5                                              deltaLUp = 0;
 195   5                                              updateNote();
 196   5                              break;
 197   5              
 198   5                              case STOP:
 199   5                                              PLAYING = 0;
 200   5                              break;
 201   5              
 202   5                              case CONTINUE:
 203   5                                              PLAYING = 1;
 204   5                                      break;
 205   5              
 206   5                              case ACTIVE_SENSING:
 207   5                              break;
 208   5               
 209   5                              case SYSTEM_RESET:
 210   5                                              //Goodbye, See you!
 211   5                                              AUXR1 |= 0x08; //soft reset
 212   5      //                                      midiFlags = 0;
 213   5      //                                      midiClk = 0;
 214   5      //                                      deltaPos = 0;
 215   5      //                                      numRiffs = (curSong[nextRiff]).rAddy;
 216   5      //                                      curRiffCnt = 0;
 217   5      //                                      numNotes = 0;
 218   5      //                                      nextNote = 0;
 219   5      //                                      PLAYING = 0;
 220   5      //                                      BUTT_EN = 1;
 221   5                              break;
 222   5                              
 223   5                                      default:
 224   5                                      break;
 225   5                              }
 226   4                      } 
 227   3              } else { //databyte
 228   3              switch (midiMsg.typeChan) {
 229   4      
 230   4                      case SYSTEM_EXCLUSIVE:
 231   4                              if(sysIx < SYS_LEN) {// discard data if the buffer is full
 232   5                                      sysEx[sysIx++] = dataByte;
 233   5                                      } else { //buffer full!!!
 234   5                                      }
 235   4                      break;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 25  

 236   4      
 237   4                      
 238   4                              case SONG_SELECT:
 239   4                              //midiMsg.song = dataByte;
 240   4                                      songNum = dataByte;
 241   4                                      midiClk = 0;  //myabe not, would be very usefully weird, sysex or switch
 242   4                      break;
 243   4      
 244   4                      
 245   4                              case SONG_POSITION: 
 246   4                                      if(midiMsg.count == 2) { //LSB
 247   5                                              midiMsg.position = dataByte;
 248   5                                      } else {
 249   5                                              bit tempBit = PLAYING;
 250   5                                              PLAYING = 0;
 251   5                                              if (dataByte) {
 252   6                                                      midiMsg.position += (word) (dataByte << 7);
 253   6                                              }
 254   5                                              //This algorithm's worst case is ~20ms per 140 beats, with completely
 255   5                                              //non repetitive storage...  1.5ms per 5040 beats with uniformly repetitive test song 
 256   5                                              //todo good enough to just scan forward for every search!
 257   5                                              if (midiClk > midiMsg.position || midiMsg.position == 0) {
 258   6                                                      midiClk = 0;
 259   6                                                      deltaPos = 0;
 260   6                                                      nextRiff = 0;
 261   6                                                      numRiffs = (curSong[nextRiff]).rAddy;
 262   6                                                      curRiffCnt = 0;
 263   6                                                      numNotes = 0;
 264   6                                                      nextNote = 0;
 265   6                                              }
 266   5                                              //midiClk is gauranteed to be less than position
 267   5                                              if (midiClk == 0) {                                                                                                                     
 268   6                                                      updateNote(); //grab first note if we are uninit'd
 269   6                                                      riffClks += deltaPos;
 270   6                                                      riffCntGotReset = 1; //we know we are at the beginning of a riff
 271   6                                              }
 272   5                                              while (!SONG_DONE && midiClk != midiMsg.position) {
 273   6                                                      ++midiClk;
 274   6                                                      if (--deltaPos == 0) { //scan up to edge of note
 275   7                                                              updateNote();
 276   7                                                              while (!SONG_DONE && midiClk + deltaPos < midiMsg.position) { //loop through notes until we get clo
             -se
 277   8                                                                      riffClks += deltaPos; //accumulate!
 278   8                                                                      midiClk += deltaPos;  //skip forward past this note
 279   8                                                                      updateNote();
 280   8                                                                      if (nextNote == 3) { //are we at the start of a riff?
 281   9                                                                              if (riffCntGotReset == 0) {     //for the very first time?
 282  10                                                                                      riffCntGotReset = 1;
 283  10                                                                              } else {  //then i know how many clks are in this whole riff!!!
 284  10                                                                                      while (midiClk + riffClks < midiMsg.position && curRiffCnt != 0) {
 285  11                                                                                              midiClk += riffClks; //and how many times it repeats!!!
 286  11                                                                                              --curRiffCnt;
 287  11                                                                                      }
 288  10                                                                                      //skip to next riff
 289  10                                                                                      numNotes = 0;
 290  10                                                                                      nextNote = 0;
 291  10                                                                                      updateNote();
 292  10                                                                              }
 293   9                                                                              riffClks = 0; //we are out of that riffLoop
 294   9                                                                      }
 295   8                                                              } 
 296   7                                                      }               
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 26  

 297   6                                              }  // todo Q: maybe i should just maintain riffClks through normal opssss......
 298   5                                              //A: only when scanning in reverse is important does it even matter much....
 299   5                                              if (!SONG_DONE) {
 300   6                                                      PLAYING = tempBit;
 301   6                                              }
 302   5                                      }
 303   4                      break;
 304   4      
 305   4      
 306   4                      case (NOTE_OFF + MY_L_CHAN):
 307   4                                      LnotV = 1;
 308   4                              case (NOTE_OFF + MY_V_CHAN):
 309   4                                      #ifdef COORD
                                              #else
 311   4                                      if(midiMsg.count == 2) {// pitch
 312   5                                              //commentint this out to keep noteOff from fiddling with up/down!!!
 313   5      //                                              if (dataByte >= LUT_NUM_NOTES || dataByte <     LUT_MIDI_NOTE_SHIFT) {  //treat as a special CMD
 314   5      //                                                      //do nothing for now.... 
 315   5      //                                              } else {
 316   5      //                                                      dataByte -= LUT_MIDI_NOTE_SHIFT;
 317   5      //                                                      if (OMNI == 1) {
 318   5      //                                                              VPeriod = LUTFreq[dataByte];
 319   5      //                                                              LPeriod = VPeriod; //LUTFreq[dataByte];
 320   5      //                                                      } else {
 321   5      //                                                              if (LnotV == 0) {          //why not???  
 322   5      //                                                                      VPeriod = LUTFreq[dataByte];
 323   5      //                                                              } else {
 324   5      //                                                                      LPeriod = LUTFreq[dataByte];
 325   5      //                                                              }
 326   5      //                                                      }
 327   5      //                                              }
 328   5                                      } else {// velocity 
 329   5                                                      LED = 0;
 330   5                                                      if (OMNI == 1) {
 331   6                                                        //midiFlags &= ~(TX_VCC_ON + AUDIO_L_ON);
 332   6                                                              TX_VCC_ON = 0;
 333   6                                                              AUDIO_L_ON = 0;
 334   6                                                      } else {
 335   6                                                              if (LnotV == 0) {
 336   7                                                                      //turn off txVCC
 337   7                                                                      TX_VCC_ON = 0;
 338   7                                                              } else {
 339   7                                                                      //turn off Left channel
 340   7                                                                      AUDIO_L_ON = 0;
 341   7                                                              }
 342   6                                                      }
 343   5                                              }
 344   4                                      #endif
 345   4                              break;
 346   4      
 347   4            
 348   4                              case (NOTE_ON + MY_L_CHAN):
 349   4                                      LnotV = 1;
 350   4                              case (NOTE_ON + MY_V_CHAN):
 351   4                                      #ifdef COORD
                                              #else
 353   4                                      if(midiMsg.count == 2) {// pitch                 //todo test
 354   5                                                      word thisDelta = 0;
 355   5                                                      bit thisUp = 0;
 356   5                                                      midiMsg.pitch = dataByte;
 357   5                                                      switch (dataByte) {
 358   6      
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 27  

 359   6                                                              case TX_OFF:
 360   6                                                                      LED = 0;
 361   6                                                                      txOffSwitch = 1;        //      TX off
 362   6                                                              break;
 363   6                                                              
 364   6                                                              case TX_ON:
 365   6                                                                      LED = 1;
 366   6                                                                      txOffSwitch = 0;        //      TX on
 367   6                                                              break;
 368   6                                                              
 369   6                                                              case UP1:
 370   6                                                                      thisUp = 1;
 371   6                                                              case DOWN1:
 372   6                                                                      thisDelta = 10;
 373   6                                                              break;
 374   6                                                              
 375   6                                                              case UP2:
 376   6                                                                      thisUp = 1;
 377   6                                                              case DOWN2:
 378   6                                                                      thisDelta = 9;
 379   6                                                              break;
 380   6                                                              
 381   6                                                              case UP3:
 382   6                                                                      thisUp = 1;
 383   6                                                              case DOWN3:
 384   6                                                                      thisDelta = 8;
 385   6                                                              break;
 386   6                                                              
 387   6                                                              case UP4:
 388   6                                                                      thisUp = 1;
 389   6                                                              case DOWN4:
 390   6                                                                      thisDelta = 7;
 391   6                                                              break;
 392   6                                                              
 393   6                                                              case UP5:
 394   6                                                                      thisUp = 1;
 395   6                                                              case DOWN5:
 396   6                                                                      thisDelta = 6;
 397   6                                                              break;
 398   6                                                              
 399   6                                                              case UPDOWN_OFF: //redundant?  only if we make it leave the pitch detuned
 400   6                                                                      thisDelta = 0;
 401   6                                                              break;
 402   6                                                              
 403   6                                                              case STATION_UP6:
 404   6                                                                      ++station;
 405   6                                                              case STATION_UP5:
 406   6                                                                      ++station;
 407   6                                                              case STATION_UP4:
 408   6                                                                      ++station;
 409   6                                                              case STATION_UP3:
 410   6                                                                      ++station;
 411   6                                                              case STATION_UP2:
 412   6                                                                      ++station;
 413   6                                                              case STATION_UP:
 414   6                                                                      setFreq(++station);
 415   6                                                              break;
 416   6                                                              
 417   6                                                              case STATION_DOWN6:
 418   6                                                                      --station;
 419   6                                                              case STATION_DOWN5:
 420   6                                                                      --station;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 28  

 421   6                                                              case STATION_DOWN4:
 422   6                                                                      --station;
 423   6                                                              case STATION_DOWN3:
 424   6                                                                      --station;
 425   6                                                              case STATION_DOWN2:
 426   6                                                                      --station;
 427   6                                                              case STATION_DOWN:
 428   6                                                                      setFreq(--station);
 429   6                                                              break;
 430   6                                                              
 431   6                                                              case HOLD0:
 432   6                                                              case HOLD1:
 433   6                                                              case HOLD2:
 434   6                                                              break;
 435   6                                                                                              
 436   6                                                              default:
 437   6                                                                      dataByte -= LUT_MIDI_NOTE_SHIFT;
 438   6                                                                      if (OMNI == 1) {
 439   7                                                                              VPeriod = LUTFreq[dataByte];
 440   7                                                                              LPeriod = VPeriod;
 441   7                                                                      } else {
 442   7                                                                              if (LnotV == 0) {          //why not???  
 443   8                                                                                      VPeriod = LUTFreq[dataByte];
 444   8      //                                                                              thisDelta = txDelta;
 445   8      //                                                                              thisUp = deltaTxUp;
 446   8                                                                              } else {
 447   8                                                                                      LPeriod = LUTFreq[dataByte];
 448   8      //                                                                              thisDelta = lDelta;
 449   8      //                                                                              thisUp = deltaLUp;
 450   8                                                                              }
 451   7                                                                      }
 452   6                                                              break;
 453   6                                                      }
 454   5                                                      if (thisDelta) {
 455   6                                                              if (LnotV == 0) {        //not OMNIfied!!!! todo
 456   7                                                                      txDelta = thisDelta;
 457   7                                                                      deltaTxUp = thisUp;
 458   7                                                              } else {
 459   7                                                                      lDelta = thisDelta;
 460   7                                                                      deltaLUp = thisUp;
 461   7                                                              }
 462   6                                                      }
 463   5                                              } else if (midiMsg.pitch >= LUT_MIDI_NOTE_SHIFT && midiMsg.pitch < LUT_NOTE_LIMIT) {   //glitchy!!!!
 464   5                                                      if(dataByte != 0) {
 465   6                                                              LED = 1;
 466   6                                                              if (OMNI) {     
 467   7                                                                      AUDIO_L_ON = 1;
 468   7                                                                      TX_VCC_ON = 1;
 469   7                                                                      //why this didnt work??? i dont remember why i didnt do this?
 470   7      //                                                              periodH0 = ((byte)(VPeriod >> 8));   todo
 471   7      //                                                              periodL0 = ((byte) VPeriod);
 472   7                                                                      periodH0 = (0xff & (VPeriod >> 8));
 473   7                                                                      periodL0 = (0xff & VPeriod);
 474   7                                                                      periodH1 = periodH0;
 475   7                                                                      periodL1 = periodL0;
 476   7                                                              } else {
 477   7                                                                      if (LnotV == 0) {
 478   8                                                                              TX_VCC_ON = 1;
 479   8                                                                              periodH0 = (0xff & (VPeriod >> 8));
 480   8                                                                              periodL0 = (0xff & VPeriod);
 481   8                                                                      } else {
 482   8                                                                              AUDIO_L_ON = 1;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 29  

 483   8                                                                              periodH1 = (0xff & (LPeriod >> 8));
 484   8                                                                              periodL1 = (0xff & LPeriod);
 485   8                                                                      }
 486   7                                                              }
 487   6                                                      } else {   //turn off cause Velocity = 0
 488   6                                                              if (LnotV == 0) {
 489   7                                                                      TX_VCC_ON = 0;
 490   7                                                              } else {        
 491   7                                                                      AUDIO_L_ON = 0;
 492   7                                                              }
 493   6                                                      }
 494   5                                              }
 495   4                                      #endif
 496   4                      break;
 497   4      
 498   4      
 499   4                      case KEY_PRESSURE:
 500   4                      break;
 501   4      
 502   4                      case CONTROL + MY_L_CHAN:
 503   4                                      LnotV = 1;
 504   4                              case CONTROL + MY_V_CHAN:
 505   4                              if(midiMsg.count == 2) {
 506   5                                midiMsg.controller = dataByte; // controller number
 507   5                              } else {// setting 
 508   5                                      switch (midiMsg.controller) {
 509   6       //todo maybe COORD listens to station!!!
 510   6                                                      case GENERAL_SLIDER_1_hi:
 511   6                                                              if (((station - MIN_FREQ) >> 2) != dataByte) {
 512   7                                                                      station &= ~(0xFFFC);
 513   7                                                                      station += (word) (dataByte << 2) + MIN_FREQ;
 514   7                                                                      setFreq(station);
 515   7                                                              }
 516   6                                                      break;
 517   6      
 518   6                                                      case GENERAL_SLIDER_1_lo:
 519   6                                                              if ((station & 0x03) != (dataByte >> 5)) {
 520   7                                                                      station &= ~(0x0003);
 521   7                                                                      station += (dataByte >> 5);
 522   7                                                                      setFreq(station);
 523   7                                                              }
 524   6                                                      break;
 525   6      
 526   6      //                                              case SOUND_RELEASE_TIME: //todo a sustain structure!
 527   6      //                                              break;
 528   6      
 529   6                                                      case GENERAL_BUTTON_1_on:
 530   6                                                              if (dataByte >= 64) {
 531   7                                                                      LED = 1;
 532   7                                                                      txOffSwitch = 0;
 533   7                                                              } else {
 534   7                                                                      LED = 0;
 535   7                                                                      txOffSwitch = 1; //tx off
 536   7                                                              }
 537   6                                                      break;
 538   6      
 539   6      //            case BANK_hi: break;
 540   6      
 541   6      //            case BANK_lo: bank_lo = dataByte; break;
 542   6      
 543   6      //                case MOD_WHEEL_hi: load_14bit_value(&c->mod_wheel, dataByte, MSB); break;
 544   6      
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 30  

 545   6      //            case MOD_WHEEL_lo: load_14bit_value(&c->mod_wheel, dataByte, LSB); break;
 546   6      
 547   6      //            case VOLUME_hi: load_14bit_value(&c->volume, dataByte, MSB); break;
 548   6      
 549   6      //            case VOLUME_lo: load_14bit_value(&c->volume, dataByte, LSB); break;
 550   6      
 551   6      //            case BALANCE_hi: load_14bit_value(&c->balance, dataByte, MSB); break;
 552   6      
 553   6      //            case BALANCE_lo: load_14bit_value(&c->balance, dataByte, LSB); break;
 554   6      
 555   6      //            case PAN_POSN_hi: load_14bit_value(&c->pan_posn, dataByte, MSB); break;
 556   6      
 557   6      //            case PAN_POSN_lo: load_14bit_value(&c->pan_posn, dataByte, LSB); break;
 558   6      
 559   6      //            case EXPRESSION_hi: break;
 560   6      
 561   6      //            case EXPRESSION_lo: break;
 562   6      
 563   6      //            case DATA_ENTRY_hi: load_14bit_value(c->param_ptr, dataByte, MSB); break;
 564   6      
 565   6      //            case DATA_ENTRY_lo: load_14bit_value(c->param_ptr, dataByte, LSB); break;
 566   6      
 567   6      //            case DATA_BUTTON_INC: break;
 568   6      
 569   6      //            case DATA_BUTTON_DEC: break;
 570   6      
 571   6      //            case REG_PARM_hi: load_14bit_value(&c->reg_param, dataByte, MSB); break;
 572   6      
 573   6      //            case REG_PARM_lo: load_14bit_value(&c->reg_param, dataByte, LSB); break;
 574   6      
 575   6      //            case HOLD_PEDAL_on:
 576   6      
 577   6      //              break;
 578   6      
 579   6                                          case ALL_SOUND_OFF:
 580   6                                                              AUDIO_L_ON = 0;
 581   6                                                              TX_VCC_ON = 0;
 582   6                                          break;
 583   6      
 584   6                                          
 585   6                                                      case ALL_CONTROLLERS_OFF:
 586   6                                          break;
 587   6      
 588   6      
 589   6                                          case LOCAL_KEYBOARD_on: //most useful with a saved state...  maybe just a choas source.. to
             -do
 590   6                                                              if (dataByte & 0x7f) {
 591   7                                                                      BUTT_EN = 1;
 592   7                                                              } else {
 593   7                                                              BUTT_EN = 0;
 594   7                                                              }
 595   6                                          break;
 596   6      //COORD does not care about voicing/channel states, but never touches the pins...
 597   6      
 598   6                                          case ALL_NOTES_OFF:
 599   6      //                                          midiFlags &= (BUTT_EN + PLAYING + STEREO);
 600   6                                                              TX_VCC_ON = 0;
 601   6                                                              AUDIO_L_ON = 0;
 602   6                                                      break;
 603   6      
 604   6                                          
 605   6                                                      case OMNI_MODE_OFF:
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 31  

 606   6                                                              //midiFlags &= (BUTT_EN + PLAYING + STEREO);
 607   6                                                              OMNI = 0;
 608   6                                          break;
 609   6      
 610   6                                          
 611   6                                                      case OMNI_MODE_ON:
 612   6      //                                                      midiFlags &= (BUTT_EN + PLAYING + STEREO);
 613   6                                                              OMNI = 1;
 614   6                                          break;
 615   6                                                      
 616   6                                                      case MONO_OPERATION:
 617   6                                                              PLAYING = 0;
 618   6                                                              #ifdef COORD
                                                                      #else
 620   6              //                                                      midiFlags &= (BUTT_EN + PLAYING + STEREO);
 621   6                                                                      if(dataByte >= MY_L_CHAN) {
 622   7                                                                              TR1 = 1;
 623   7                                                                              periodH1 = 0x10;
 624   7                                                                              if(dataByte >= MY_V_CHAN) {
 625   8                                                                                      TR0 = 1;
 626   8                                                                                      periodH0 = 0x10;
 627   8                                                                              } else {
 628   8                                                                                      TR0 = 0; //turn off this channel
 629   8                                                                              }       
 630   7                                                                      } else {
 631   7                                                                              TR1 = 0;  //turn off this channel too.
 632   7                                                                      }
 633   6                                                              #endif
 634   6                                          break;
 635   6                                          
 636   6                                                      case POLY_OPERATION:
 637   6      //                                                      midiFlags &= (BUTT_EN + PLAYING + STEREO);
 638   6                                                              //do nothing always mono!!!
 639   6                                          break;
 640   6                                                      default:
 641   6                                                      break;
 642   6                                      }
 643   5                                      }
 644   4                      break;
 645   4      
 646   4                      case PROGRAM:
 647   4                                      //c->program = dataByte;  //todo
 648   4                                      #ifdef COORD
                                              #else
 650   4                                      #endif 
 651   4                              break;
 652   4      
 653   4                              default:
 654   4                              break;
 655   4              }
 656   3          midiMsg.count ^= 3; // toggle between 1 and 2 (MSB and LSB for 14 bit values)
 657   3              }
 658   2      IGNORE_MIDI:
 659   2        // clear interrupt flag
 660   2        //RI = 0;
 661   2        LnotV = 0;            
 662   2        } // uart_rx_isr
 663   1      }
 664          void uart_tx_isr (void) interrupt 13 using 1 {
 665   1        if (_testbit_(TI)) {
 666   2          // clear interrupt flag
 667   2      //    TI = 0;
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 32  

 668   2          // no longer busy
 669   2          mtxbusy = 0;
 670   2        } // if
 671   1      } // uart_tx_isr
 672          
 673          void uart_transmit (unsigned char value) {
 674   1        while(mtxbusy);
 675   1        mtxbusy = 1;
 676   1        SBUF = value;
 677   1      } // uart_transmit
 678          
 679          unsigned char uart_get (void) {
 680   1        return SBUF;
 681   1      } // uart_get
 682          
 683          unsigned char ascii_to_hex(unsigned char ch) {
 684   1        if (ch & 0x40)                                                                // convert ASCII character
 685   1        {     
 686   2          ch += 0x09;
 687   2        }
 688   1        ch &= 0x0F;                                                                   // into 2 digit Hex
 689   1        return ch;
 690   1      }
 691          
 692          void print_hex_to_ascii(unsigned char ch) {
 693   1        char temp_character;
 694   1        temp_character = ch;
 695   1        temp_character >>= 4;                                                 // get highest nible
 696   1        temp_character &= 0x0F;                                               // save lower nibble
 697   1        if (temp_character >= 10)                                             // check if A-F
 698   1        {
 699   2          temp_character += 7;                                                // offset for A-F
 700   2        }
 701   1        temp_character += 0x30;                                               // add '0' to get ascii
 702   1        uart_transmit(temp_character);                                        // print upper nible
 703   1        temp_character = ch;
 704   1        temp_character &= 0x0F;                                               // save lower nibble
 705   1        if (temp_character >= 10)                                             // check if A-F
 706   1        {
 707   2          temp_character += 7;                                                // offset for A-F
 708   2        }
 709   1        temp_character += 0x30;                                               // add '0' to get ascii
 710   1        uart_transmit(temp_character);                                        // print lower nible
 711   1      }
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 33  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION uart_init (BEGIN)
                                           ; SOURCE LINE # 18
                                           ; SOURCE LINE # 21
0000 5387BF            ANL     PCON,#0BFH
                                           ; SOURCE LINE # 22
0003 759850            MOV     SCON,#050H
                                           ; SOURCE LINE # 24
0006 53877F            ANL     PCON,#07FH
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0009 75BAA0            MOV     SSTAT,#0A0H
                                           ; SOURCE LINE # 29
000C E4                CLR     A
000D F5BD              MOV     BRGCON,A
                                           ; SOURCE LINE # 30
000F 75BE30            MOV     BRGR0,#030H
                                           ; SOURCE LINE # 31
0012 F5BF              MOV     BRGR1,A
                                           ; SOURCE LINE # 32
0014 75BD03            MOV     BRGCON,#03H
                                           ; SOURCE LINE # 35
0017 5391FE            ANL     P1M1,#0FEH
                                           ; SOURCE LINE # 36
001A 439201            ORL     P1M2,#01H
                                           ; SOURCE LINE # 37
001D 439102            ORL     P1M1,#02H
                                           ; SOURCE LINE # 38
0020 5392FD            ANL     P1M2,#0FDH
                                           ; SOURCE LINE # 41
0023 C200        R     CLR     mtxbusy
                                           ; SOURCE LINE # 44
0025 53B8EF            ANL     IP0,#0EFH
                                           ; SOURCE LINE # 45
0028 53B7EF            ANL     IP0H,#0EFH
                                           ; SOURCE LINE # 47
002B D2AC              SETB    ESR
                                           ; SOURCE LINE # 55
002D 53F8BF            ANL     IP1,#0BFH
                                           ; SOURCE LINE # 56
0030 53F7BF            ANL     IP1H,#0BFH
                                           ; SOURCE LINE # 59
0033 D2EE              SETB    EST
                                           ; SOURCE LINE # 60
0035 22                RET     
             ; FUNCTION uart_init (END)

             ; FUNCTION uart_rx_isr (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 63A201            XRL     AUXR1,#01H
000B C083              PUSH    DPH
000D C082              PUSH    DPL
000F C0D0              PUSH    PSW
0011 75D000            MOV     PSW,#00H
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 64
0014 750000      R     MOV     riffClks,#00H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 34  

0017 750000      R     MOV     riffClks+01H,#00H
                                           ; SOURCE LINE # 65
001A C200        R     CLR     riffCntGotReset
                                           ; SOURCE LINE # 69
001C 109802            JBC     RI,?C0174
001F 0100        R     AJMP    ?C0161
0021         ?C0174:
                                           ; SOURCE LINE # 73
0021 859900      R     MOV     dataByte,SBUF
                                           ; SOURCE LINE # 75
0024 E500        R     MOV     A,dataByte
0026 20E702            JB      ACC.7,$ + 5H
0029 0100        R     AJMP    ?C0003
                                           ; SOURCE LINE # 76
002B C3                CLR     C
002C 94F0              SUBB    A,#0F0H
002E 503A              JNC     ?C0004
                                           ; SOURCE LINE # 77
0030 300009            JNB     OMNI,?C0005
                                           ; SOURCE LINE # 78
0033 E500        R     MOV     A,dataByte
0035 54F0              ANL     A,#0F0H
0037 04                INC     A
0038 F500        R     MOV     midiMsg,A
                                           ; SOURCE LINE # 79
003A 8014              SJMP    ?C0006
003C         ?C0005:
003C E500        R     MOV     A,dataByte
003E 540F              ANL     A,#0FH
0040 FF                MOV     R7,A
0041 6003              JZ      ?C0008
0043 BF0105            CJNE    R7,#01H,?C0007
0046         ?C0008:
                                           ; SOURCE LINE # 80
0046 850000      R     MOV     midiMsg,dataByte
                                           ; SOURCE LINE # 81
0049 8005              SJMP    ?C0006
004B         ?C0007:
                                           ; SOURCE LINE # 82
004B 750000      R     MOV     midiMsg,#00H
                                           ; SOURCE LINE # 83
004E 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 84
0050         ?C0006:
                                           ; SOURCE LINE # 85
0050 E500        R     MOV     A,midiMsg
0052 54F0              ANL     A,#0F0H
0054 2470              ADD     A,#070H
0056 600E              JZ      ?C0014
0058 24E0              ADD     A,#0E0H
005A 600A              JZ      ?C0014
005C 24F0              ADD     A,#0F0H
005E 6008              JZ      ?C0015
0060 2440              ADD     A,#040H
0062 6002              JZ      $ + 4H
0064 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0066         ?C0014:
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 35  

0066 803F              SJMP    ?C0205
                                           ; SOURCE LINE # 91
0068         ?C0015:
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
0068 8045              SJMP    ?C0206
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
006A         ?C0004:
                                           ; SOURCE LINE # 103
006A E500        R     MOV     A,dataByte
006C 2410              ADD     A,#010H
006E B41000            CJNE    A,#010H,?C0175
0071         ?C0175:
0071 4002              JC      $ + 4H
0073 0100        R     AJMP    IGNORE_MIDI
0075 900000      R     MOV     DPTR,#?C0176
0078 25E0              ADD     A,ACC
007A 5002              JNC     ?C0177
007C 0583              INC     DPH
007E         ?C0177:
007E 73                JMP     @A+DPTR
007F         ?C0176:
007F 0100        R     AJMP    ?C0022
0081 0100        R     AJMP    IGNORE_MIDI
0083 0100        R     AJMP    ?C0023
0085 0100        R     AJMP    ?C0024
0087 0100        R     AJMP    IGNORE_MIDI
0089 0100        R     AJMP    IGNORE_MIDI
008B 0100        R     AJMP    IGNORE_MIDI
008D 0100        R     AJMP    IGNORE_MIDI
008F 0100        R     AJMP    ?C0027
0091 0100        R     AJMP    IGNORE_MIDI
0093 0100        R     AJMP    ?C0043
0095 0100        R     AJMP    ?C0045
0097 0100        R     AJMP    ?C0044
0099 0100        R     AJMP    IGNORE_MIDI
009B 0100        R     AJMP    IGNORE_MIDI
009D 0100        R     AJMP    ?C0047
                                           ; SOURCE LINE # 104
009F         ?C0022:
                                           ; SOURCE LINE # 105
009F 750000      E     MOV     sysIx,#00H
                                           ; SOURCE LINE # 106
00A2 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 108
00A4         ?C0023:
                                           ; SOURCE LINE # 109
00A4 850000      R     MOV     midiMsg,dataByte
                                           ; SOURCE LINE # 110
00A7         ?C0205:
00A7 750002      R     MOV     midiMsg+01H,#02H
                                           ; SOURCE LINE # 111
00AA 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 113
00AC         ?C0024:
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 36  

                                           ; SOURCE LINE # 114
00AC 850000      R     MOV     midiMsg,dataByte
                                           ; SOURCE LINE # 115
00AF         ?C0206:
00AF 750001      R     MOV     midiMsg+01H,#01H
                                           ; SOURCE LINE # 116
00B2 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 125
00B4         ?C0027:
                                           ; SOURCE LINE # 133
00B4 0500        E     INC     midiClk+01H
00B6 E500        E     MOV     A,midiClk+01H
00B8 7002              JNZ     ?C0178
00BA 0500        E     INC     midiClk
00BC         ?C0178:
                                           ; SOURCE LINE # 134
00BC 300018            JNB     PLAYING,?C0028
                                           ; SOURCE LINE # 135
00BF E500        E     MOV     A,deltaPos+01H
00C1 4500        E     ORL     A,deltaPos
00C3 700A              JNZ     ?C0029
                                           ; SOURCE LINE # 136
00C5 120000      E     LCALL   updateNote
                                           ; SOURCE LINE # 137
00C8 A2A5              MOV     C,LED
00CA B3                CPL     C
00CB 92A5              MOV     LED,C
                                           ; SOURCE LINE # 138
00CD 8008              SJMP    ?C0028
00CF         ?C0029:
                                           ; SOURCE LINE # 139
00CF E500        E     MOV     A,deltaPos+01H
00D1 1500        E     DEC     deltaPos+01H
00D3 7002              JNZ     ?C0179
00D5 1500        E     DEC     deltaPos
00D7         ?C0179:
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
00D7         ?C0028:
                                           ; SOURCE LINE # 144
00D7 E500        E     MOV     A,lDelta+01H
00D9 4500        E     ORL     A,lDelta
00DB 7002              JNZ     $ + 4H
00DD 0100        R     AJMP    ?C0031
                                           ; SOURCE LINE # 145
00DF C3                CLR     C
00E0 74FF              MOV     A,#0FFH
00E2 9500        R     SUBB    A,LPeriod+01H
00E4 FF                MOV     R7,A
00E5 74FF              MOV     A,#0FFH
00E7 9500        R     SUBB    A,LPeriod
00E9 FE                MOV     R6,A
00EA AD00        E     MOV     R5,lDelta+01H
00EC EF                MOV     A,R7
00ED A805              MOV     R0,AR5
00EF 08                INC     R0
00F0 8005              SJMP    ?C0181
00F2         ?C0180:
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 37  

00F2 CE                XCH     A,R6
00F3 C3                CLR     C
00F4 13                RRC     A
00F5 CE                XCH     A,R6
00F6 13                RRC     A
00F7         ?C0181:
00F7 D8F9              DJNZ    R0,?C0180
00F9 F500        R     MOV     tempDelta+01H,A
00FB 8E00        R     MOV     tempDelta,R6
                                           ; SOURCE LINE # 146
00FD C3                CLR     C
00FE 740B              MOV     A,#0BH
0100 9500        E     SUBB    A,lDelta+01H
0102 FF                MOV     R7,A
0103 E4                CLR     A
0104 9500        E     SUBB    A,lDelta
0106 FE                MOV     R6,A
0107 C3                CLR     C
0108 E500        R     MOV     A,tempDelta+01H
010A 9F                SUBB    A,R7
010B E500        R     MOV     A,tempDelta
010D 9E                SUBB    A,R6
010E 500C              JNC     ?C0032
                                           ; SOURCE LINE # 147
0110 C3                CLR     C
0111 740B              MOV     A,#0BH
0113 9500        E     SUBB    A,lDelta+01H
0115 F500        R     MOV     tempDelta+01H,A
0117 E4                CLR     A
0118 9500        E     SUBB    A,lDelta
011A F500        R     MOV     tempDelta,A
                                           ; SOURCE LINE # 148
011C         ?C0032:
                                           ; SOURCE LINE # 149
011C 300021            JNB     deltaLUp,?C0033
                                           ; SOURCE LINE # 150
011F E500        R     MOV     A,LPeriod+01H
0121 2500        R     ADD     A,tempDelta+01H
0123 FF                MOV     R7,A
0124 E500        R     MOV     A,LPeriod
0126 3500        R     ADDC    A,tempDelta
0128 FE                MOV     R6,A
0129 D3                SETB    C
012A EF                MOV     A,R7
012B 94FF              SUBB    A,#0FFH
012D EE                MOV     A,R6
012E 94FF              SUBB    A,#0FFH
0130 5025              JNC     ?C0035
                                           ; SOURCE LINE # 151
0132 E500        R     MOV     A,tempDelta+01H
0134 2500        R     ADD     A,LPeriod+01H
0136 F500        R     MOV     LPeriod+01H,A
0138 E500        R     MOV     A,tempDelta
013A 3500        R     ADDC    A,LPeriod
013C F500        R     MOV     LPeriod,A
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
013E 8017              SJMP    ?C0035
0140         ?C0033:
                                           ; SOURCE LINE # 154
0140 D3                SETB    C
0141 E500        R     MOV     A,LPeriod+01H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 38  

0143 9500        R     SUBB    A,tempDelta+01H
0145 E500        R     MOV     A,LPeriod
0147 9500        R     SUBB    A,tempDelta
0149 400C              JC      ?C0035
                                           ; SOURCE LINE # 155
014B E500        R     MOV     A,LPeriod+01H
014D 9500        R     SUBB    A,tempDelta+01H
014F F500        R     MOV     LPeriod+01H,A
0151 E500        R     MOV     A,LPeriod
0153 9500        R     SUBB    A,tempDelta
0155 F500        R     MOV     LPeriod,A
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0157         ?C0035:
                                           ; SOURCE LINE # 158
0157 E500        R     MOV     A,LPeriod
0159 F500        E     MOV     periodH1,A
                                           ; SOURCE LINE # 159
015B AF00        R     MOV     R7,LPeriod+01H
015D EF                MOV     A,R7
015E F500        E     MOV     periodL1,A
                                           ; SOURCE LINE # 160
0160         ?C0031:
                                           ; SOURCE LINE # 161
0160 E500        E     MOV     A,txDelta+01H
0162 4500        E     ORL     A,txDelta
0164 7002              JNZ     $ + 4H
0166 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 162
0168 C3                CLR     C
0169 74FF              MOV     A,#0FFH
016B 9500        R     SUBB    A,VPeriod+01H
016D FF                MOV     R7,A
016E 74FF              MOV     A,#0FFH
0170 9500        R     SUBB    A,VPeriod
0172 FE                MOV     R6,A
0173 AD00        E     MOV     R5,txDelta+01H
0175 EF                MOV     A,R7
0176 A805              MOV     R0,AR5
0178 08                INC     R0
0179 8005              SJMP    ?C0183
017B         ?C0182:
017B CE                XCH     A,R6
017C C3                CLR     C
017D 13                RRC     A
017E CE                XCH     A,R6
017F 13                RRC     A
0180         ?C0183:
0180 D8F9              DJNZ    R0,?C0182
0182 F500        R     MOV     tempDelta+01H,A
0184 8E00        R     MOV     tempDelta,R6
                                           ; SOURCE LINE # 163
0186 C3                CLR     C
0187 740B              MOV     A,#0BH
0189 9500        E     SUBB    A,txDelta+01H
018B FF                MOV     R7,A
018C E4                CLR     A
018D 9500        E     SUBB    A,txDelta
018F FE                MOV     R6,A
0190 C3                CLR     C
0191 E500        R     MOV     A,tempDelta+01H
0193 9F                SUBB    A,R7
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 39  

0194 E500        R     MOV     A,tempDelta
0196 9E                SUBB    A,R6
0197 500C              JNC     ?C0038
                                           ; SOURCE LINE # 164
0199 C3                CLR     C
019A 740B              MOV     A,#0BH
019C 9500        E     SUBB    A,txDelta+01H
019E F500        R     MOV     tempDelta+01H,A
01A0 E4                CLR     A
01A1 9500        E     SUBB    A,txDelta
01A3 F500        R     MOV     tempDelta,A
                                           ; SOURCE LINE # 165
01A5         ?C0038:
                                           ; SOURCE LINE # 166
01A5 300021            JNB     deltaTxUp,?C0039
                                           ; SOURCE LINE # 167
01A8 E500        R     MOV     A,VPeriod+01H
01AA 2500        R     ADD     A,tempDelta+01H
01AC FF                MOV     R7,A
01AD E500        R     MOV     A,VPeriod
01AF 3500        R     ADDC    A,tempDelta
01B1 FE                MOV     R6,A
01B2 D3                SETB    C
01B3 EF                MOV     A,R7
01B4 94FF              SUBB    A,#0FFH
01B6 EE                MOV     A,R6
01B7 94FF              SUBB    A,#0FFH
01B9 5025              JNC     ?C0041
                                           ; SOURCE LINE # 168
01BB E500        R     MOV     A,tempDelta+01H
01BD 2500        R     ADD     A,VPeriod+01H
01BF F500        R     MOV     VPeriod+01H,A
01C1 E500        R     MOV     A,tempDelta
01C3 3500        R     ADDC    A,VPeriod
01C5 F500        R     MOV     VPeriod,A
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
01C7 8017              SJMP    ?C0041
01C9         ?C0039:
                                           ; SOURCE LINE # 171
01C9 D3                SETB    C
01CA E500        R     MOV     A,VPeriod+01H
01CC 9500        R     SUBB    A,tempDelta+01H
01CE E500        R     MOV     A,VPeriod
01D0 9500        R     SUBB    A,tempDelta
01D2 400C              JC      ?C0041
                                           ; SOURCE LINE # 172
01D4 E500        R     MOV     A,VPeriod+01H
01D6 9500        R     SUBB    A,tempDelta+01H
01D8 F500        R     MOV     VPeriod+01H,A
01DA E500        R     MOV     A,VPeriod
01DC 9500        R     SUBB    A,tempDelta
01DE F500        R     MOV     VPeriod,A
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
01E0         ?C0041:
                                           ; SOURCE LINE # 175
01E0 E500        R     MOV     A,VPeriod
01E2 F500        E     MOV     periodH0,A
                                           ; SOURCE LINE # 176
01E4 AF00        R     MOV     R7,VPeriod+01H
01E6 EF                MOV     A,R7
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 40  

01E7 F500        E     MOV     periodL0,A
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 180
01E9 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 182
01EB         ?C0043:
                                           ; SOURCE LINE # 183
01EB 750000      E     MOV     midiClk,#00H
01EE 750000      E     MOV     midiClk+01H,#00H
                                           ; SOURCE LINE # 184
01F1 750000      E     MOV     deltaPos,#00H
01F4 750000      E     MOV     deltaPos+01H,#00H
                                           ; SOURCE LINE # 185
01F7 750000      E     MOV     nextRiff,#00H
01FA 750000      E     MOV     nextRiff+01H,#00H
                                           ; SOURCE LINE # 186
01FD AB00        E     MOV     R3,curSong
01FF AA00        E     MOV     R2,curSong+01H
0201 A900        E     MOV     R1,curSong+02H
0203 AE00        E     MOV     R6,nextRiff
0205 AF00        E     MOV     R7,nextRiff+01H
0207 8F82              MOV     DPL,R7
0209 8E83              MOV     DPH,R6
020B 7403              MOV     A,#03H
020D 120000      E     LCALL   ?C?OFFX256
0210 120000      E     LCALL   ?C?ILDOPTR
0213 F500        E     MOV     numRiffs+01H,A
0215 85F000      E     MOV     numRiffs,B
                                           ; SOURCE LINE # 187
0218 750000      E     MOV     curRiffCnt,#00H
                                           ; SOURCE LINE # 188
021B 750000      E     MOV     numNotes,#00H
                                           ; SOURCE LINE # 189
021E 750000      E     MOV     nextNote,#00H
                                           ; SOURCE LINE # 190
0221 D200        E     SETB    PLAYING
                                           ; SOURCE LINE # 191
0223 750000      E     MOV     txDelta,#00H
0226 750000      E     MOV     txDelta+01H,#00H
                                           ; SOURCE LINE # 192
0229 C200        E     CLR     deltaTxUp
                                           ; SOURCE LINE # 193
022B 750000      E     MOV     lDelta,#00H
022E 750000      E     MOV     lDelta+01H,#00H
                                           ; SOURCE LINE # 194
0231 C200        E     CLR     deltaLUp
                                           ; SOURCE LINE # 195
0233 120000      E     LCALL   updateNote
                                           ; SOURCE LINE # 196
0236 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 198
0238         ?C0044:
                                           ; SOURCE LINE # 199
0238 C200        E     CLR     PLAYING
                                           ; SOURCE LINE # 200
023A 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 202
023C         ?C0045:
                                           ; SOURCE LINE # 203
023C D200        E     SETB    PLAYING
                                           ; SOURCE LINE # 204
023E 0100        R     AJMP    IGNORE_MIDI
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 41  

                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 209
0240         ?C0047:
                                           ; SOURCE LINE # 211
0240 43A208            ORL     AUXR1,#08H
                                           ; SOURCE LINE # 221
0243 0100        R     AJMP    IGNORE_MIDI
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
0245         ?C0003:
                                           ; SOURCE LINE # 228
0245 E500        R     MOV     A,midiMsg
0247 120000      E     LCALL   ?C?CCASE
024A 0000        R     DW      ?C0073
024C 80                DB      080H
024D 0000        R     DW      ?C0074
024F 81                DB      081H
0250 0000        R     DW      ?C0081
0252 90                DB      090H
0253 0000        R     DW      ?C0082
0255 91                DB      091H
0256 0000        R     DW      ?C0132
0258 B0                DB      0B0H
0259 0000        R     DW      ?C0133
025B B1                DB      0B1H
025C 0000        R     DW      ?C0051
025E F0                DB      0F0H
025F 0000        R     DW      ?C0055
0261 F2                DB      0F2H
0262 0000        R     DW      ?C0054
0264 F3                DB      0F3H
0265 0000              DW      00H
0267 0000        R     DW      ?C0050
                                           ; SOURCE LINE # 230
0269         ?C0051:
                                           ; SOURCE LINE # 231
0269 AF00        E     MOV     R7,sysIx
026B C3                CLR     C
026C 7480              MOV     A,#080H
026E 9482              SUBB    A,#082H
0270 4002              JC      $ + 4H
0272 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 232
0274 AF00        E     MOV     R7,sysIx
0276 0500        E     INC     sysIx
0278 7400        E     MOV     A,#LOW sysEx
027A 2F                ADD     A,R7
027B F582              MOV     DPL,A
027D E4                CLR     A
027E 3400        E     ADDC    A,#HIGH sysEx
0280 F583              MOV     DPH,A
0282 E500        R     MOV     A,dataByte
0284 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
0285 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 238
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 42  

0287         ?C0054:
                                           ; SOURCE LINE # 240
0287 850000      E     MOV     songNum,dataByte
                                           ; SOURCE LINE # 241
028A 750000      E     MOV     midiClk,#00H
028D 750000      E     MOV     midiClk+01H,#00H
                                           ; SOURCE LINE # 242
0290 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 245
0292         ?C0055:
                                           ; SOURCE LINE # 246
0292 E500        R     MOV     A,midiMsg+01H
0294 B40209            CJNE    A,#02H,?C0056
                                           ; SOURCE LINE # 247
0297 AF00        R     MOV     R7,dataByte
0299 750000      R     MOV     midiMsg+04H,#00H
029C 8F00        R     MOV     midiMsg+05H,R7
                                           ; SOURCE LINE # 248
029E 0100        R     AJMP    ?C0050
02A0         ?C0056:
                                           ; SOURCE LINE # 249
02A0 A200        E     MOV     C,PLAYING
02A2 9200        R     MOV     tempBit,C
                                           ; SOURCE LINE # 250
02A4 C200        E     CLR     PLAYING
                                           ; SOURCE LINE # 251
02A6 E500        R     MOV     A,dataByte
02A8 600F              JZ      ?C0058
                                           ; SOURCE LINE # 252
02AA 75F080            MOV     B,#080H
02AD A4                MUL     AB
02AE AEF0              MOV     R6,B
02B0 2500        R     ADD     A,midiMsg+05H
02B2 F500        R     MOV     midiMsg+05H,A
02B4 EE                MOV     A,R6
02B5 3500        R     ADDC    A,midiMsg+04H
02B7 F500        R     MOV     midiMsg+04H,A
                                           ; SOURCE LINE # 253
02B9         ?C0058:
                                           ; SOURCE LINE # 257
02B9 D3                SETB    C
02BA E500        E     MOV     A,midiClk+01H
02BC 9500        R     SUBB    A,midiMsg+05H
02BE E500        E     MOV     A,midiClk
02C0 9500        R     SUBB    A,midiMsg+04H
02C2 5006              JNC     ?C0060
02C4 E500        R     MOV     A,midiMsg+05H
02C6 4500        R     ORL     A,midiMsg+04H
02C8 7036              JNZ     ?C0059
02CA         ?C0060:
                                           ; SOURCE LINE # 258
02CA 750000      E     MOV     midiClk,#00H
02CD 750000      E     MOV     midiClk+01H,#00H
                                           ; SOURCE LINE # 259
02D0 750000      E     MOV     deltaPos,#00H
02D3 750000      E     MOV     deltaPos+01H,#00H
                                           ; SOURCE LINE # 260
02D6 750000      E     MOV     nextRiff,#00H
02D9 750000      E     MOV     nextRiff+01H,#00H
                                           ; SOURCE LINE # 261
02DC AB00        E     MOV     R3,curSong
02DE AA00        E     MOV     R2,curSong+01H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 43  

02E0 A900        E     MOV     R1,curSong+02H
02E2 AE00        E     MOV     R6,nextRiff
02E4 AF00        E     MOV     R7,nextRiff+01H
02E6 8F82              MOV     DPL,R7
02E8 8E83              MOV     DPH,R6
02EA 7403              MOV     A,#03H
02EC 120000      E     LCALL   ?C?OFFX256
02EF 120000      E     LCALL   ?C?ILDOPTR
02F2 F500        E     MOV     numRiffs+01H,A
02F4 85F000      E     MOV     numRiffs,B
                                           ; SOURCE LINE # 262
02F7 750000      E     MOV     curRiffCnt,#00H
                                           ; SOURCE LINE # 263
02FA 750000      E     MOV     numNotes,#00H
                                           ; SOURCE LINE # 264
02FD 750000      E     MOV     nextNote,#00H
                                           ; SOURCE LINE # 265
0300         ?C0059:
                                           ; SOURCE LINE # 267
0300 E500        E     MOV     A,midiClk+01H
0302 4500        E     ORL     A,midiClk
0304 7011              JNZ     ?C0062
                                           ; SOURCE LINE # 268
0306 120000      E     LCALL   updateNote
                                           ; SOURCE LINE # 269
0309 E500        E     MOV     A,deltaPos+01H
030B 2500        R     ADD     A,riffClks+01H
030D F500        R     MOV     riffClks+01H,A
030F E500        E     MOV     A,deltaPos
0311 3500        R     ADDC    A,riffClks
0313 F500        R     MOV     riffClks,A
                                           ; SOURCE LINE # 270
0315 D200        R     SETB    riffCntGotReset
                                           ; SOURCE LINE # 271
0317         ?C0062:
                                           ; SOURCE LINE # 272
0317 300002      E     JNB     SONG_DONE,$ + 5H
031A 0100        R     AJMP    ?C0063
031C E500        E     MOV     A,midiClk+01H
031E 6500        R     XRL     A,midiMsg+05H
0320 7004              JNZ     ?C0184
0322 E500        E     MOV     A,midiClk
0324 6500        R     XRL     A,midiMsg+04H
0326         ?C0184:
0326 7002              JNZ     $ + 4H
0328 0100        R     AJMP    ?C0063
                                           ; SOURCE LINE # 273
032A 0500        E     INC     midiClk+01H
032C E500        E     MOV     A,midiClk+01H
032E 7002              JNZ     ?C0185
0330 0500        E     INC     midiClk
0332         ?C0185:
                                           ; SOURCE LINE # 274
0332 E500        E     MOV     A,deltaPos+01H
0334 1500        E     DEC     deltaPos+01H
0336 7002              JNZ     ?C0186
0338 1500        E     DEC     deltaPos
033A         ?C0186:
033A 14                DEC     A
033B AE00        E     MOV     R6,deltaPos
033D 4E                ORL     A,R6
033E 70D7              JNZ     ?C0062
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 44  

                                           ; SOURCE LINE # 275
0340 120000      E     LCALL   updateNote
0343         ?C0065:
                                           ; SOURCE LINE # 276
0343 2000D1            JB      SONG_DONE,?C0062
0346 E500        E     MOV     A,midiClk+01H
0348 2500        E     ADD     A,deltaPos+01H
034A FF                MOV     R7,A
034B E500        E     MOV     A,midiClk
034D 3500        E     ADDC    A,deltaPos
034F FE                MOV     R6,A
0350 C3                CLR     C
0351 EF                MOV     A,R7
0352 9500        R     SUBB    A,midiMsg+05H
0354 EE                MOV     A,R6
0355 9500        R     SUBB    A,midiMsg+04H
0357 50BE              JNC     ?C0062
                                           ; SOURCE LINE # 277
0359 E500        E     MOV     A,deltaPos+01H
035B 2500        R     ADD     A,riffClks+01H
035D F500        R     MOV     riffClks+01H,A
035F E500        E     MOV     A,deltaPos
0361 3500        R     ADDC    A,riffClks
0363 F500        R     MOV     riffClks,A
                                           ; SOURCE LINE # 278
0365 E500        E     MOV     A,deltaPos+01H
0367 2500        E     ADD     A,midiClk+01H
0369 F500        E     MOV     midiClk+01H,A
036B E500        E     MOV     A,deltaPos
036D 3500        E     ADDC    A,midiClk
036F F500        E     MOV     midiClk,A
                                           ; SOURCE LINE # 279
0371 120000      E     LCALL   updateNote
                                           ; SOURCE LINE # 280
0374 E500        E     MOV     A,nextNote
0376 B403CA            CJNE    A,#03H,?C0065
                                           ; SOURCE LINE # 281
0379 200004            JB      riffCntGotReset,?C0070
                                           ; SOURCE LINE # 282
037C D200        R     SETB    riffCntGotReset
                                           ; SOURCE LINE # 283
037E 8030              SJMP    ?C0069
0380         ?C0070:
                                           ; SOURCE LINE # 284
0380 E500        E     MOV     A,midiClk+01H
0382 2500        R     ADD     A,riffClks+01H
0384 FF                MOV     R7,A
0385 E500        E     MOV     A,midiClk
0387 3500        R     ADDC    A,riffClks
0389 FE                MOV     R6,A
038A C3                CLR     C
038B EF                MOV     A,R7
038C 9500        R     SUBB    A,midiMsg+05H
038E EE                MOV     A,R6
038F 9500        R     SUBB    A,midiMsg+04H
0391 5014              JNC     ?C0071
0393 E500        E     MOV     A,curRiffCnt
0395 6010              JZ      ?C0071
                                           ; SOURCE LINE # 285
0397 E500        R     MOV     A,riffClks+01H
0399 2500        E     ADD     A,midiClk+01H
039B F500        E     MOV     midiClk+01H,A
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 45  

039D E500        R     MOV     A,riffClks
039F 3500        E     ADDC    A,midiClk
03A1 F500        E     MOV     midiClk,A
                                           ; SOURCE LINE # 286
03A3 1500        E     DEC     curRiffCnt
                                           ; SOURCE LINE # 287
03A5 80D9              SJMP    ?C0070
03A7         ?C0071:
                                           ; SOURCE LINE # 289
03A7 750000      E     MOV     numNotes,#00H
                                           ; SOURCE LINE # 290
03AA 750000      E     MOV     nextNote,#00H
                                           ; SOURCE LINE # 291
03AD 120000      E     LCALL   updateNote
                                           ; SOURCE LINE # 292
03B0         ?C0069:
                                           ; SOURCE LINE # 293
03B0 750000      R     MOV     riffClks,#00H
03B3 750000      R     MOV     riffClks+01H,#00H
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
03B6 808B              SJMP    ?C0065
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
03B8         ?C0063:
                                           ; SOURCE LINE # 299
03B8 300002      E     JNB     SONG_DONE,$ + 5H
03BB 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 300
03BD A200        R     MOV     C,tempBit
03BF 9200        E     MOV     PLAYING,C
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
03C1 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 306
03C3         ?C0073:
                                           ; SOURCE LINE # 307
03C3 D200        R     SETB    LnotV
                                           ; SOURCE LINE # 308
03C5         ?C0074:
                                           ; SOURCE LINE # 311
03C5 E500        R     MOV     A,midiMsg+01H
03C7 6402              XRL     A,#02H
03C9 7002              JNZ     $ + 4H
03CB 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 328
03CD         ?C0075:
                                           ; SOURCE LINE # 329
03CD C2A5              CLR     LED
                                           ; SOURCE LINE # 330
03CF 300002            JNB     OMNI,?C0077
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
03D2 0100        R     AJMP    ?C0207
03D4         ?C0077:
                                           ; SOURCE LINE # 335
03D4 200004            JB      LnotV,?C0079
                                           ; SOURCE LINE # 337
03D7 C200        E     CLR     TX_VCC_ON
                                           ; SOURCE LINE # 338
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 46  

03D9 0100        R     AJMP    ?C0050
03DB         ?C0079:
                                           ; SOURCE LINE # 340
03DB C200        E     CLR     AUDIO_L_ON
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 345
03DD 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 348
03DF         ?C0081:
                                           ; SOURCE LINE # 349
03DF D200        R     SETB    LnotV
                                           ; SOURCE LINE # 350
03E1         ?C0082:
                                           ; SOURCE LINE # 353
03E1 E500        R     MOV     A,midiMsg+01H
03E3 6402              XRL     A,#02H
03E5 6002              JZ      $ + 4H
03E7 0100        R     AJMP    ?C0083
                                           ; SOURCE LINE # 354
03E9 F500        R     MOV     thisDelta,A
03EB F500        R     MOV     thisDelta+01H,A
                                           ; SOURCE LINE # 355
03ED C200        R     CLR     thisUp
                                           ; SOURCE LINE # 356
03EF 850000      R     MOV     midiMsg+03H,dataByte
                                           ; SOURCE LINE # 357
03F2 E500        R     MOV     A,dataByte
03F4 120000      E     LCALL   ?C?CCASE
03F7 0000        R     DW      ?C0085
03F9 00                DB      00H
03FA 0000        R     DW      ?C0086
03FC 01                DB      01H
03FD 0000        R     DW      ?C0097
03FF 02                DB      02H
0400 0000        R     DW      ?C0103
0402 03                DB      03H
0403 0000        R     DW      ?C0109
0405 04                DB      04H
0406 0000        R     DW      ?C0088
0408 05                DB      05H
0409 0000        R     DW      ?C0090
040B 06                DB      06H
040C 0000        R     DW      ?C0092
040E 07                DB      07H
040F 0000        R     DW      ?C0094
0411 08                DB      08H
0412 0000        R     DW      ?C0096
0414 09                DB      09H
0415 0000        R     DW      ?C0084
0417 6D                DB      06DH
0418 0000        R     DW      ?C0087
041A 6E                DB      06EH
041B 0000        R     DW      ?C0089
041D 6F                DB      06FH
041E 0000        R     DW      ?C0091
0420 70                DB      070H
0421 0000        R     DW      ?C0093
0423 71                DB      071H
0424 0000        R     DW      ?C0095
0426 72                DB      072H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 47  

0427 0000        R     DW      ?C0102
0429 73                DB      073H
042A 0000        R     DW      ?C0108
042C 74                DB      074H
042D 0000        R     DW      ?C0101
042F 75                DB      075H
0430 0000        R     DW      ?C0107
0432 76                DB      076H
0433 0000        R     DW      ?C0100
0435 77                DB      077H
0436 0000        R     DW      ?C0106
0438 78                DB      078H
0439 0000        R     DW      ?C0099
043B 79                DB      079H
043C 0000        R     DW      ?C0105
043E 7A                DB      07AH
043F 0000        R     DW      ?C0098
0441 7B                DB      07BH
0442 0000        R     DW      ?C0104
0444 7C                DB      07CH
0445 0000        R     DW      ?C0084
0447 7D                DB      07DH
0448 0000        R     DW      ?C0084
044A 7E                DB      07EH
044B 0000              DW      00H
044D 0000        R     DW      ?C0113
                                           ; SOURCE LINE # 359
044F         ?C0085:
                                           ; SOURCE LINE # 360
044F C2A5              CLR     LED
                                           ; SOURCE LINE # 361
0451 D200        E     SETB    txOffSwitch
                                           ; SOURCE LINE # 362
0453 0100        R     AJMP    ?C0084
                                           ; SOURCE LINE # 364
0455         ?C0086:
                                           ; SOURCE LINE # 365
0455 D2A5              SETB    LED
                                           ; SOURCE LINE # 366
0457 C200        E     CLR     txOffSwitch
                                           ; SOURCE LINE # 367
0459 0100        R     AJMP    ?C0084
                                           ; SOURCE LINE # 369
045B         ?C0087:
                                           ; SOURCE LINE # 370
045B D200        R     SETB    thisUp
                                           ; SOURCE LINE # 371
045D         ?C0088:
                                           ; SOURCE LINE # 372
045D 750000      R     MOV     thisDelta,#00H
0460 75000A      R     MOV     thisDelta+01H,#0AH
                                           ; SOURCE LINE # 373
0463 0100        R     AJMP    ?C0084
                                           ; SOURCE LINE # 375
0465         ?C0089:
                                           ; SOURCE LINE # 376
0465 D200        R     SETB    thisUp
                                           ; SOURCE LINE # 377
0467         ?C0090:
                                           ; SOURCE LINE # 378
0467 750000      R     MOV     thisDelta,#00H
046A 750009      R     MOV     thisDelta+01H,#09H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 48  

                                           ; SOURCE LINE # 379
046D 0100        R     AJMP    ?C0084
                                           ; SOURCE LINE # 381
046F         ?C0091:
                                           ; SOURCE LINE # 382
046F D200        R     SETB    thisUp
                                           ; SOURCE LINE # 383
0471         ?C0092:
                                           ; SOURCE LINE # 384
0471 750000      R     MOV     thisDelta,#00H
0474 750008      R     MOV     thisDelta+01H,#08H
                                           ; SOURCE LINE # 385
0477 0100        R     AJMP    ?C0084
                                           ; SOURCE LINE # 387
0479         ?C0093:
                                           ; SOURCE LINE # 388
0479 D200        R     SETB    thisUp
                                           ; SOURCE LINE # 389
047B         ?C0094:
                                           ; SOURCE LINE # 390
047B 750000      R     MOV     thisDelta,#00H
047E 750007      R     MOV     thisDelta+01H,#07H
                                           ; SOURCE LINE # 391
0481 0100        R     AJMP    ?C0084
                                           ; SOURCE LINE # 393
0483         ?C0095:
                                           ; SOURCE LINE # 394
0483 D200        R     SETB    thisUp
                                           ; SOURCE LINE # 395
0485         ?C0096:
                                           ; SOURCE LINE # 396
0485 750000      R     MOV     thisDelta,#00H
0488 750006      R     MOV     thisDelta+01H,#06H
                                           ; SOURCE LINE # 397
048B 0100        R     AJMP    ?C0084
                                           ; SOURCE LINE # 399
048D         ?C0097:
                                           ; SOURCE LINE # 400
048D 750000      R     MOV     thisDelta,#00H
0490 750000      R     MOV     thisDelta+01H,#00H
                                           ; SOURCE LINE # 401
0493 0100        R     AJMP    ?C0084
                                           ; SOURCE LINE # 403
0495         ?C0098:
                                           ; SOURCE LINE # 404
0495 0500        E     INC     station+01H
0497 E500        E     MOV     A,station+01H
0499 7002              JNZ     ?C0187
049B 0500        E     INC     station
049D         ?C0187:
                                           ; SOURCE LINE # 405
049D         ?C0099:
                                           ; SOURCE LINE # 406
049D 0500        E     INC     station+01H
049F E500        E     MOV     A,station+01H
04A1 7002              JNZ     ?C0188
04A3 0500        E     INC     station
04A5         ?C0188:
                                           ; SOURCE LINE # 407
04A5         ?C0100:
                                           ; SOURCE LINE # 408
04A5 0500        E     INC     station+01H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 49  

04A7 E500        E     MOV     A,station+01H
04A9 7002              JNZ     ?C0189
04AB 0500        E     INC     station
04AD         ?C0189:
                                           ; SOURCE LINE # 409
04AD         ?C0101:
                                           ; SOURCE LINE # 410
04AD 0500        E     INC     station+01H
04AF E500        E     MOV     A,station+01H
04B1 7002              JNZ     ?C0190
04B3 0500        E     INC     station
04B5         ?C0190:
                                           ; SOURCE LINE # 411
04B5         ?C0102:
                                           ; SOURCE LINE # 412
04B5 0500        E     INC     station+01H
04B7 E500        E     MOV     A,station+01H
04B9 7002              JNZ     ?C0191
04BB 0500        E     INC     station
04BD         ?C0191:
                                           ; SOURCE LINE # 413
04BD         ?C0103:
                                           ; SOURCE LINE # 414
04BD 0500        E     INC     station+01H
04BF E500        E     MOV     A,station+01H
04C1 7035              JNZ     ?C0208
04C3 0500        E     INC     station
04C5         ?C0192:
                                           ; SOURCE LINE # 415
04C5 8031              SJMP    ?C0208
                                           ; SOURCE LINE # 417
04C7         ?C0104:
                                           ; SOURCE LINE # 418
04C7 E500        E     MOV     A,station+01H
04C9 1500        E     DEC     station+01H
04CB 7002              JNZ     ?C0193
04CD 1500        E     DEC     station
04CF         ?C0193:
                                           ; SOURCE LINE # 419
04CF         ?C0105:
                                           ; SOURCE LINE # 420
04CF E500        E     MOV     A,station+01H
04D1 1500        E     DEC     station+01H
04D3 7002              JNZ     ?C0194
04D5 1500        E     DEC     station
04D7         ?C0194:
                                           ; SOURCE LINE # 421
04D7         ?C0106:
                                           ; SOURCE LINE # 422
04D7 E500        E     MOV     A,station+01H
04D9 1500        E     DEC     station+01H
04DB 7002              JNZ     ?C0195
04DD 1500        E     DEC     station
04DF         ?C0195:
                                           ; SOURCE LINE # 423
04DF         ?C0107:
                                           ; SOURCE LINE # 424
04DF E500        E     MOV     A,station+01H
04E1 1500        E     DEC     station+01H
04E3 7002              JNZ     ?C0196
04E5 1500        E     DEC     station
04E7         ?C0196:
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 50  

                                           ; SOURCE LINE # 425
04E7         ?C0108:
                                           ; SOURCE LINE # 426
04E7 E500        E     MOV     A,station+01H
04E9 1500        E     DEC     station+01H
04EB 7002              JNZ     ?C0197
04ED 1500        E     DEC     station
04EF         ?C0197:
                                           ; SOURCE LINE # 427
04EF         ?C0109:
                                           ; SOURCE LINE # 428
04EF E500        E     MOV     A,station+01H
04F1 1500        E     DEC     station+01H
04F3 7002              JNZ     ?C0198
04F5 1500        E     DEC     station
04F7         ?C0198:
04F7 14                DEC     A
04F8         ?C0208:
04F8 FF                MOV     R7,A
04F9 AE00        E     MOV     R6,station
04FB 120000      E     LCALL   _setFreq
                                           ; SOURCE LINE # 429
04FE 8050              SJMP    ?C0084
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 436
0500         ?C0113:
                                           ; SOURCE LINE # 437
0500 74F6              MOV     A,#0F6H
0502 2500        R     ADD     A,dataByte
0504 F500        R     MOV     dataByte,A
                                           ; SOURCE LINE # 438
0506 30001C            JNB     OMNI,?C0114
                                           ; SOURCE LINE # 439
0509 25E0              ADD     A,ACC
050B 2400        E     ADD     A,#LOW LUTFreq
050D F582              MOV     DPL,A
050F E4                CLR     A
0510 3400        E     ADDC    A,#HIGH LUTFreq
0512 F583              MOV     DPH,A
0514 E4                CLR     A
0515 93                MOVC    A,@A+DPTR
0516 F500        R     MOV     VPeriod,A
0518 7401              MOV     A,#01H
051A 93                MOVC    A,@A+DPTR
051B F500        R     MOV     VPeriod+01H,A
                                           ; SOURCE LINE # 440
051D 850000      R     MOV     LPeriod,VPeriod
0520 850000      R     MOV     LPeriod+01H,VPeriod+01H
                                           ; SOURCE LINE # 441
0523 802B              SJMP    ?C0084
0525         ?C0114:
                                           ; SOURCE LINE # 442
0525 E500        R     MOV     A,dataByte
0527 25E0              ADD     A,ACC
0529 2400        E     ADD     A,#LOW LUTFreq
052B 200012            JB      LnotV,?C0116
                                           ; SOURCE LINE # 443
052E F582              MOV     DPL,A
0530 E4                CLR     A
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 51  

0531 3400        E     ADDC    A,#HIGH LUTFreq
0533 F583              MOV     DPH,A
0535 E4                CLR     A
0536 93                MOVC    A,@A+DPTR
0537 F500        R     MOV     VPeriod,A
0539 7401              MOV     A,#01H
053B 93                MOVC    A,@A+DPTR
053C F500        R     MOV     VPeriod+01H,A
                                           ; SOURCE LINE # 446
053E 8010              SJMP    ?C0084
0540         ?C0116:
                                           ; SOURCE LINE # 447
0540 F582              MOV     DPL,A
0542 E4                CLR     A
0543 3400        E     ADDC    A,#HIGH LUTFreq
0545 F583              MOV     DPH,A
0547 E4                CLR     A
0548 93                MOVC    A,@A+DPTR
0549 F500        R     MOV     LPeriod,A
054B 7401              MOV     A,#01H
054D 93                MOVC    A,@A+DPTR
054E F500        R     MOV     LPeriod+01H,A
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
0550         ?C0084:
                                           ; SOURCE LINE # 454
0550 E500        R     MOV     A,thisDelta+01H
0552 4500        R     ORL     A,thisDelta
0554 7002              JNZ     $ + 4H
0556 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 455
0558 20000C            JB      LnotV,?C0119
                                           ; SOURCE LINE # 456
055B 850000      E     MOV     txDelta,thisDelta
055E 850000      E     MOV     txDelta+01H,thisDelta+01H
                                           ; SOURCE LINE # 457
0561 A200        R     MOV     C,thisUp
0563 9200        E     MOV     deltaTxUp,C
                                           ; SOURCE LINE # 458
0565 0100        R     AJMP    ?C0050
0567         ?C0119:
                                           ; SOURCE LINE # 459
0567 850000      E     MOV     lDelta,thisDelta
056A 850000      E     MOV     lDelta+01H,thisDelta+01H
                                           ; SOURCE LINE # 460
056D A200        R     MOV     C,thisUp
056F 9200        E     MOV     deltaLUp,C
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
0571 0100        R     AJMP    ?C0050
0573         ?C0083:
0573 E500        R     MOV     A,midiMsg+03H
0575 C3                CLR     C
0576 940A              SUBB    A,#0AH
0578 5002              JNC     $ + 4H
057A 0100        R     AJMP    ?C0050
057C E500        R     MOV     A,midiMsg+03H
057E 946D              SUBB    A,#06DH
0580 4002              JC      $ + 4H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 52  

0582 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 464
0584 E500        R     MOV     A,dataByte
0586 6037              JZ      ?C0123
                                           ; SOURCE LINE # 465
0588 D2A5              SETB    LED
                                           ; SOURCE LINE # 466
058A 300015            JNB     OMNI,?C0124
                                           ; SOURCE LINE # 467
058D D200        E     SETB    AUDIO_L_ON
                                           ; SOURCE LINE # 468
058F D200        E     SETB    TX_VCC_ON
                                           ; SOURCE LINE # 472
0591 E500        R     MOV     A,VPeriod
0593 F500        E     MOV     periodH0,A
                                           ; SOURCE LINE # 473
0595 AF00        R     MOV     R7,VPeriod+01H
0597 EF                MOV     A,R7
0598 F500        E     MOV     periodL0,A
                                           ; SOURCE LINE # 474
059A 850000      E     MOV     periodH1,periodH0
                                           ; SOURCE LINE # 475
059D 850000      E     MOV     periodL1,periodL0
                                           ; SOURCE LINE # 476
05A0 0100        R     AJMP    ?C0050
05A2         ?C0124:
                                           ; SOURCE LINE # 477
05A2 20000D            JB      LnotV,?C0126
                                           ; SOURCE LINE # 478
05A5 D200        E     SETB    TX_VCC_ON
                                           ; SOURCE LINE # 479
05A7 E500        R     MOV     A,VPeriod
05A9 F500        E     MOV     periodH0,A
                                           ; SOURCE LINE # 480
05AB AF00        R     MOV     R7,VPeriod+01H
05AD EF                MOV     A,R7
05AE F500        E     MOV     periodL0,A
                                           ; SOURCE LINE # 481
05B0 0100        R     AJMP    ?C0050
05B2         ?C0126:
                                           ; SOURCE LINE # 482
05B2 D200        E     SETB    AUDIO_L_ON
                                           ; SOURCE LINE # 483
05B4 E500        R     MOV     A,LPeriod
05B6 F500        E     MOV     periodH1,A
                                           ; SOURCE LINE # 484
05B8 AF00        R     MOV     R7,LPeriod+01H
05BA EF                MOV     A,R7
05BB F500        E     MOV     periodL1,A
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
05BD 0100        R     AJMP    ?C0050
05BF         ?C0123:
                                           ; SOURCE LINE # 488
05BF 200004            JB      LnotV,?C0129
                                           ; SOURCE LINE # 489
05C2 C200        E     CLR     TX_VCC_ON
                                           ; SOURCE LINE # 490
05C4 0100        R     AJMP    ?C0050
05C6         ?C0129:
                                           ; SOURCE LINE # 491
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 53  

05C6 C200        E     CLR     AUDIO_L_ON
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 496
05C8 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 502
05CA         ?C0132:
                                           ; SOURCE LINE # 503
05CA D200        R     SETB    LnotV
                                           ; SOURCE LINE # 504
05CC         ?C0133:
                                           ; SOURCE LINE # 505
05CC E500        R     MOV     A,midiMsg+01H
05CE B40205            CJNE    A,#02H,?C0134
                                           ; SOURCE LINE # 506
05D1 850000      R     MOV     midiMsg+02H,dataByte
                                           ; SOURCE LINE # 507
05D4 0100        R     AJMP    ?C0050
05D6         ?C0134:
                                           ; SOURCE LINE # 508
05D6 E500        R     MOV     A,midiMsg+02H
05D8 120000      E     LCALL   ?C?CCASE
05DB 0000        R     DW      ?C0137
05DD 10                DB      010H
05DE 0000        R     DW      ?C0139
05E0 30                DB      030H
05E1 0000        R     DW      ?C0141
05E3 50                DB      050H
05E4 0000        R     DW      ?C0144
05E6 78                DB      078H
05E7 0000        R     DW      ?C0146
05E9 7A                DB      07AH
05EA 0000        R     DW      ?C0149
05EC 7B                DB      07BH
05ED 0000        R     DW      ?C0150
05EF 7C                DB      07CH
05F0 0000        R     DW      ?C0151
05F2 7D                DB      07DH
05F3 0000        R     DW      ?C0152
05F5 7E                DB      07EH
05F6 0000              DW      00H
05F8 0000        R     DW      ?C0050
                                           ; SOURCE LINE # 510
05FA         ?C0137:
                                           ; SOURCE LINE # 511
05FA E500        E     MOV     A,station+01H
05FC 2444              ADD     A,#044H
05FE FF                MOV     R7,A
05FF E500        E     MOV     A,station
0601 34FD              ADDC    A,#0FDH
0603 FE                MOV     R6,A
0604 EF                MOV     A,R7
0605 7802              MOV     R0,#02H
0607         ?C0199:
0607 CE                XCH     A,R6
0608 C3                CLR     C
0609 13                RRC     A
060A CE                XCH     A,R6
060B 13                RRC     A
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 54  

060C D8F9              DJNZ    R0,?C0199
060E 6500        R     XRL     A,dataByte
0610 7001              JNZ     ?C0200
0612 EE                MOV     A,R6
0613         ?C0200:
0613 7002              JNZ     $ + 4H
0615 0100        R     AJMP    ?C0050
                                           ; SOURCE LINE # 512
0617 530003      E     ANL     station+01H,#03H
061A 750000      E     MOV     station,#00H
                                           ; SOURCE LINE # 513
061D E500        R     MOV     A,dataByte
061F 75F004            MOV     B,#04H
0622 A4                MUL     AB
0623 24BC              ADD     A,#0BCH
0625 FF                MOV     R7,A
0626 E5F0              MOV     A,B
0628 3402              ADDC    A,#02H
062A FE                MOV     R6,A
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
062B 8016              SJMP    ?C0209
                                           ; SOURCE LINE # 518
062D         ?C0139:
                                           ; SOURCE LINE # 519
062D E500        R     MOV     A,dataByte
062F C4                SWAP    A
0630 13                RRC     A
0631 5407              ANL     A,#07H
0633 FF                MOV     R7,A
0634 7E00              MOV     R6,#00H
0636 E500        E     MOV     A,station+01H
0638 5403              ANL     A,#03H
063A 6F                XRL     A,R7
063B 7001              JNZ     ?C0201
063D E4                CLR     A
063E         ?C0201:
063E 606B              JZ      ?C0050
                                           ; SOURCE LINE # 520
0640 5300FC      E     ANL     station+01H,#0FCH
                                           ; SOURCE LINE # 521
0643         ?C0209:
0643 EF                MOV     A,R7
0644 2500        E     ADD     A,station+01H
0646 F500        E     MOV     station+01H,A
0648 EE                MOV     A,R6
0649 3500        E     ADDC    A,station
064B F500        E     MOV     station,A
                                           ; SOURCE LINE # 522
064D AF00        E     MOV     R7,station+01H
064F FE                MOV     R6,A
0650 120000      E     LCALL   _setFreq
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
0653 8056              SJMP    ?C0050
                                           ; SOURCE LINE # 529
0655         ?C0141:
                                           ; SOURCE LINE # 530
0655 E500        R     MOV     A,dataByte
0657 C3                CLR     C
0658 9440              SUBB    A,#040H
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 55  

065A 4006              JC      ?C0142
                                           ; SOURCE LINE # 531
065C D2A5              SETB    LED
                                           ; SOURCE LINE # 532
065E C200        E     CLR     txOffSwitch
                                           ; SOURCE LINE # 533
0660 8049              SJMP    ?C0050
0662         ?C0142:
                                           ; SOURCE LINE # 534
0662 C2A5              CLR     LED
                                           ; SOURCE LINE # 535
0664 D200        E     SETB    txOffSwitch
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
0666 8043              SJMP    ?C0050
                                           ; SOURCE LINE # 579
0668         ?C0144:
                                           ; SOURCE LINE # 580
0668 C200        E     CLR     AUDIO_L_ON
                                           ; SOURCE LINE # 581
066A C200        E     CLR     TX_VCC_ON
                                           ; SOURCE LINE # 582
066C 803D              SJMP    ?C0050
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 589
066E         ?C0146:
                                           ; SOURCE LINE # 590
066E E500        R     MOV     A,dataByte
0670 547F              ANL     A,#07FH
0672 6004              JZ      ?C0147
                                           ; SOURCE LINE # 591
0674 D200        E     SETB    BUTT_EN
                                           ; SOURCE LINE # 592
0676 8033              SJMP    ?C0050
0678         ?C0147:
                                           ; SOURCE LINE # 593
0678 C200        E     CLR     BUTT_EN
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
067A 802F              SJMP    ?C0050
                                           ; SOURCE LINE # 598
067C         ?C0149:
                                           ; SOURCE LINE # 600
067C         ?C0207:
067C C200        E     CLR     TX_VCC_ON
                                           ; SOURCE LINE # 601
067E C200        E     CLR     AUDIO_L_ON
                                           ; SOURCE LINE # 602
0680 8029              SJMP    ?C0050
                                           ; SOURCE LINE # 605
0682         ?C0150:
                                           ; SOURCE LINE # 607
0682 C200        E     CLR     OMNI
                                           ; SOURCE LINE # 608
0684 8025              SJMP    ?C0050
                                           ; SOURCE LINE # 611
0686         ?C0151:
                                           ; SOURCE LINE # 613
0686 D200        E     SETB    OMNI
                                           ; SOURCE LINE # 614
0688 8021              SJMP    ?C0050
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 56  

                                           ; SOURCE LINE # 616
068A         ?C0152:
                                           ; SOURCE LINE # 617
068A C200        E     CLR     PLAYING
                                           ; SOURCE LINE # 621
068C E500        R     MOV     A,dataByte
068E C3                CLR     C
068F 9400              SUBB    A,#00H
0691 4016              JC      ?C0153
                                           ; SOURCE LINE # 622
0693 D28E              SETB    TR1
                                           ; SOURCE LINE # 623
0695 750010      E     MOV     periodH1,#010H
                                           ; SOURCE LINE # 624
0698 E500        R     MOV     A,dataByte
069A 9401              SUBB    A,#01H
069C 4007              JC      ?C0154
                                           ; SOURCE LINE # 625
069E D28C              SETB    TR0
                                           ; SOURCE LINE # 626
06A0 750010      E     MOV     periodH0,#010H
                                           ; SOURCE LINE # 627
06A3 8006              SJMP    ?C0050
06A5         ?C0154:
                                           ; SOURCE LINE # 628
06A5 C28C              CLR     TR0
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
06A7 8002              SJMP    ?C0050
06A9         ?C0153:
                                           ; SOURCE LINE # 631
06A9 C28E              CLR     TR1
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 640
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 646
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
06AB         ?C0050:
                                           ; SOURCE LINE # 656
06AB 630003      R     XRL     midiMsg+01H,#03H
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 658
06AE         IGNORE_MIDI:
                                           ; SOURCE LINE # 661
06AE C200        R     CLR     LnotV
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
06B0         ?C0161:
06B0 D0D0              POP     PSW
06B2 D082              POP     DPL
06B4 D083              POP     DPH
06B6 63A201            XRL     AUXR1,#01H
06B9 D082              POP     DPL
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 57  

06BB D083              POP     DPH
06BD D0F0              POP     B
06BF D0E0              POP     ACC
06C1 32                RETI    
             ; FUNCTION uart_rx_isr (END)

             ; FUNCTION uart_tx_isr (BEGIN)
                                           ; SOURCE LINE # 664
                                           ; SOURCE LINE # 665
0000 109902            JBC     TI,?C0203
0003 8002              SJMP    ?C0163
0005         ?C0203:
                                           ; SOURCE LINE # 669
0005 C200        R     CLR     mtxbusy
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
0007         ?C0163:
0007 32                RETI    
             ; FUNCTION uart_tx_isr (END)

             ; FUNCTION _uart_transmit (BEGIN)
                                           ; SOURCE LINE # 673
;---- Variable 'value' assigned to Register 'R7' ----
0000         ?C0164:
                                           ; SOURCE LINE # 674
0000 2000FD            JB      mtxbusy,?C0164
0003         ?C0165:
                                           ; SOURCE LINE # 675
0003 D200        R     SETB    mtxbusy
                                           ; SOURCE LINE # 676
0005 8F99              MOV     SBUF,R7
                                           ; SOURCE LINE # 677
0007 22                RET     
             ; FUNCTION _uart_transmit (END)

             ; FUNCTION uart_get (BEGIN)
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 680
0000 AF99              MOV     R7,SBUF
                                           ; SOURCE LINE # 681
0002         ?C0167:
0002 22                RET     
             ; FUNCTION uart_get (END)

             ; FUNCTION _ascii_to_hex (BEGIN)
                                           ; SOURCE LINE # 683
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 684
0000 EF                MOV     A,R7
0001 30E603            JNB     ACC.6,?C0168
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
0004 2409              ADD     A,#09H
0006 FF                MOV     R7,A
                                           ; SOURCE LINE # 687
0007         ?C0168:
                                           ; SOURCE LINE # 688
0007 53070F            ANL     AR7,#0FH
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 690
000A         ?C0169:
000A 22                RET     
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 58  

             ; FUNCTION _ascii_to_hex (END)

             ; FUNCTION _print_hex_to_ascii (BEGIN)
                                           ; SOURCE LINE # 692
;---- Variable 'ch' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 694
;---- Variable 'temp_character' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 695
0002 EF                MOV     A,R7
0003 7804              MOV     R0,#04H
0005         ?C0204:
0005 A2E7              MOV     C,ACC.7
0007 13                RRC     A
0008 D8FB              DJNZ    R0,?C0204
000A FF                MOV     R7,A
                                           ; SOURCE LINE # 696
000B 53070F            ANL     AR7,#0FH
                                           ; SOURCE LINE # 697
000E C3                CLR     C
000F EF                MOV     A,R7
0010 6480              XRL     A,#080H
0012 948A              SUBB    A,#08AH
0014 4004              JC      ?C0170
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
0016 7407              MOV     A,#07H
0018 2F                ADD     A,R7
0019 FF                MOV     R7,A
                                           ; SOURCE LINE # 700
001A         ?C0170:
                                           ; SOURCE LINE # 701
001A 7430              MOV     A,#030H
001C 2F                ADD     A,R7
001D FF                MOV     R7,A
                                           ; SOURCE LINE # 702
001E 120000      R     LCALL   _uart_transmit
                                           ; SOURCE LINE # 703
0021 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 704
0023 53070F            ANL     AR7,#0FH
                                           ; SOURCE LINE # 705
0026 C3                CLR     C
0027 EF                MOV     A,R7
0028 6480              XRL     A,#080H
002A 948A              SUBB    A,#08AH
002C 4004              JC      ?C0171
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 707
002E 7407              MOV     A,#07H
0030 2F                ADD     A,R7
0031 FF                MOV     R7,A
                                           ; SOURCE LINE # 708
0032         ?C0171:
                                           ; SOURCE LINE # 709
0032 7430              MOV     A,#030H
0034 2F                ADD     A,R7
0035 FF                MOV     R7,A
                                           ; SOURCE LINE # 710
0036 020000      R     LJMP    _uart_transmit
             ; FUNCTION _print_hex_to_ascii (END)

C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 59  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


F9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P0M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
G9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
periodH0 . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
P1M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
P0M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
txOffSwitch. . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
periodH1 . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
P2M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
P1M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
AA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
P3M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P2M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
periodL0 . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
EI2C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
periodL1 . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
LUTFreq. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  198
station. . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
CE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
EC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
EWDRT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
SPCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
_print_hex_to_ascii. . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  temp_character . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
txClk. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
SCC0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
HLTRN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
txVcc. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
SCC1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
FE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
IEN0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
IEN1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
RxD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
I2EN . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
PI2C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
TxD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
SSTAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
IP0H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
CMP1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
PWDRT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
IP1H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
CMP2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
_uart_transmit . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
PLAYING. . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
ADCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 60  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Cs10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TMOD20 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
ADCON1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
Ds10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TMOD21 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
EIEE . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
Fs10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
UPDOWN_OFF . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
SI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
EKBI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
AUDIO_L_ON . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
WFEED1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
sysEx. . . . . . . . . . . . . . . . .  EXTERN   XDATA  ARRAY    -----  512
WFEED2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
updateNote . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
deltaLUp . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
mtxbusy. . . . . . . . . . . . . . . .  STATIC   DATA   BIT      0000H  1
deltaTxUp. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
ECCU . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
sysIx. . . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
C10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PIEE . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
D10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
E10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
F10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PKBI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
I2SCLH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
DEEADR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
ADMODA . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
DEEDAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
ADMODB . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
TX_ON. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_UP . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
I2SCLL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
PCCU . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
DEECON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
DIVM . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
ESPI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
RTCH . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
LPeriod. . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0000H  2
OMNI . . . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
BUTT_EN. . . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
NOTE_OFF_MEM . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TPCR2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 61  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
byte . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
RTCL . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
MOSI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
MISO . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
TPCR2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
I2STAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
uart_rx_isr. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  tempDelta. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0003H  2
  tempDelta. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0003H  2
  tempBit. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
  thisDelta. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0003H  2
  thisUp . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
  dataByte . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0002H  1
  riffClks . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
  riffCntGotReset. . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  IGNORE_MIDI. . . . . . . . . . . . .  LABEL    CODE   LABEL    -----  -----
KBMASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
uart_tx_isr. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
VPeriod. . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0002H  2
KB0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
PSPI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
TRIM . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
BRGCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
word . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
KB1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
STATION_DOWN . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
KB2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
SONG_DONE. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
KB3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
AD0BH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
AD0DAT0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
deltaPos . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
midiClk. . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
KB4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
AD1BH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
AD1DAT0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
AD0DAT1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
BURST0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
KB5. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
PB0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
KBPATN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
AD1DAT1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
AD0DAT2. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
BURST1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
KB6. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
AD1DAT2. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
AD0DAT3. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
KB7. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
AD0BL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
AD1DAT3. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
AD1BL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 62  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SPICLK . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
EAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
nextRiff . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
RTCCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TCR20. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
ICA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TCR21. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
midiMsg. . . . . . . . . . . . . . . .  STATIC   DATA   STRUCT   0004H  6
BNDI0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
ICB. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
TH2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
numRiffs . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
BNDI1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
TL2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
OCA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
I2ADR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
OCB. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
uart_init. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
LED. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
OCC. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
PAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
I2DAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
UP1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCAN0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
OCD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
EBO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
UP2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCAN1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
UP3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HOLD0. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SDA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 63  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
lDelta . . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
HOLD1. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UP4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
txDelta. . . . . . . . . . . . . . . .  EXTERN   DATA   U_INT    -----  2
nextNote . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
HOLD2. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UP5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PT0AD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
NUM_NOTES. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RIFF_T . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  rAddy. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  repeats. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
Riff_s . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  3
  rAddy. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  repeats. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
I2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
midButt. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
STATION_UP2. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRA. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
_setFreq . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
numNotes . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
STATION_UP3. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRB. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
BRGR0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
STATION_UP4. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRC. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
BRGR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
uart_get . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
STATION_UP5. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
audioL . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
STATION_UP6. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SPSTAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
SCL. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
Fm0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
audioN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
RSTSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
Fm1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
curSong. . . . . . . . . . . . . . . .  EXTERN   DATA   PTR      -----  3
ALTAB. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
TICR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
As2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TDIR2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
As3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TX_VCC_ON. . . . . . . . . . . . . . .  EXTERN   DATA   BIT      -----  1
WDL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
As4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 64  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Cs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TX_OFF . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
TISE2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
TIFR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
ICRAH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
As5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
txData . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
ALTCD. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
ICRBH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
As6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DOWN1. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ESR. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
As7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
songNum. . . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
DOWN2. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
XTAL1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
As8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DOWN3. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
XTAL2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
EST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
ICRAL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
SADEN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
As9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DOWN4. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ICRBL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
Cs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
DOWN5. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRAH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
KBCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
Cs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 65  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


OCRBH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
SADDR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
Ds9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TOR2H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
OCRCH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
ADINS. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
Fs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_DOWN2. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRDH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
Fs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_DOWN3. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PC_. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
PCONA. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
OCRAL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
AUXR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
NOTE_OFF . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
hiButt . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
STATION_DOWN4. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRBL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
A4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_DOWN5. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TOR2L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
OCRCL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
LnotV. . . . . . . . . . . . . . . . .  STATIC   DATA   BIT      0001H  1
A5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_DOWN6. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PSR. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
OCRDL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
A6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 66  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


G0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
F1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
TAMOD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
A7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
_ascii_to_hex. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
PST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
A8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
m_in_s . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  typeChan . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  count. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  controller . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  pitch. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  position . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
A9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
m_in_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  typeChan . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  count. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  controller . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  pitch. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  position . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
RST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
B9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CRSEL. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
C9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.12   UART                                                                  12/05/2015 12:11:32 PAGE 67  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


G6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
curRiffCnt . . . . . . . . . . . . . .  EXTERN   DATA   U_CHAR   -----  1
HLTEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
PLLEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
E9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
loButt . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
SPDAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1877    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
