C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE BLINKY87
OBJECT MODULE PLACED IN .\obj\Blinky87.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Blinky87.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYMBOLS 
                    -PRINT(.\lst\Blinky87.lst) PREPRINT(.\lst\Blinky87.i) OBJECT(.\obj\Blinky87.obj)

line level    source

   1          /* Blinky.C - LED Fla+-
   2           sher for the Keil LPC900 EPM Emulator/Programmer Module */
   3          
   4          #include <REG936.H>                     // register definition
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG936.H
   3      =1  
   4      =1  Header file for Philips 89LPC936
   5      =1  Copyright (c) 1988-2006 KEIL - An ARM Company
   6      =1  All rights reserved.
   7      =1  V1.1
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __REG936_H__
  11      =1  #define __REG936_H__
  12      =1  
  13      =1  /*  BYTE Registers  */
  14      =1  sfr P0   = 0x80;
  15      =1  sfr P1   = 0x90;
  16      =1  sfr P2   = 0xA0;
  17      =1  sfr P3   = 0xB0;
  18      =1  sfr PSW  = 0xD0;
  19      =1  sfr ACC  = 0xE0;
  20      =1  sfr B    = 0xF0;
  21      =1  sfr SP   = 0x81;
  22      =1  sfr DPL  = 0x82;
  23      =1  sfr DPH  = 0x83;
  24      =1  sfr PCON = 0x87;
  25      =1  sfr TCON = 0x88;
  26      =1  sfr TMOD = 0x89;
  27      =1  sfr TL0  = 0x8A;
  28      =1  sfr TL1  = 0x8B;
  29      =1  sfr TH0  = 0x8C;
  30      =1  sfr TH1  = 0x8D;
  31      =1  sfr IEN0 = 0xA8;
  32      =1  sfr IP0  = 0xB8;
  33      =1  sfr SCON = 0x98;
  34      =1  sfr SBUF = 0x99;
  35      =1  
  36      =1  sfr ADCON0 = 0x8E;
  37      =1  sfr ADCON1 = 0x97;
  38      =1  sfr ADMODA = 0xC0;
  39      =1  sfr ADMODB = 0xA1;
  40      =1  sfr ADINS  = 0xA3;
  41      =1  sfr AD0DAT0= 0xC5;
  42      =1  sfr AD0DAT1= 0xC6;
  43      =1  sfr AD0DAT2= 0xC7;
  44      =1  sfr AD0DAT3= 0xF4;
  45      =1  sfr AD1DAT0= 0xD5;
  46      =1  sfr AD1DAT1= 0xD6;
  47      =1  sfr AD1DAT2= 0xD7;
  48      =1  sfr AD1DAT3= 0xF5;
  49      =1  sfr AD0BH  = 0xBB;
  50      =1  sfr AD0BL  = 0xA6;
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 2   

  51      =1  sfr AD1BH  = 0xC4;
  52      =1  sfr AD1BL  = 0xBC;
  53      =1  sfr AUXR1  = 0xA2;
  54      =1  sfr SADDR  = 0xA9;
  55      =1  sfr SADEN  = 0xB9;
  56      =1  sfr TL2    = 0xCC;
  57      =1  sfr TH2    = 0xCD;
  58      =1  sfr BRGR0  = 0xBE;
  59      =1  sfr BRGR1  = 0xBF;
  60      =1  sfr BRGCON = 0xBD;
  61      =1  sfr CCCRA  = 0xEA;
  62      =1  sfr CCCRB  = 0xEB;
  63      =1  sfr CCCRC  = 0xEC;
  64      =1  sfr CCCRD  = 0xED;
  65      =1  sfr CMP1   = 0xAC;
  66      =1  sfr CMP2   = 0xAD;
  67      =1  sfr DEECON = 0xF1;
  68      =1  sfr DEEDAT = 0xF2;
  69      =1  sfr DEEADR = 0xF3;
  70      =1  sfr DIVM   = 0x95;
  71      =1  sfr I2ADR  = 0xDB;
  72      =1  sfr I2CON  = 0xD8;
  73      =1  sfr I2DAT  = 0xDA;
  74      =1  sfr I2SCLH = 0xDD;
  75      =1  sfr I2SCLL = 0xDC;
  76      =1  sfr I2STAT = 0xD9;
  77      =1  sfr ICRAH  = 0xAB;
  78      =1  sfr ICRAL  = 0xAA;
  79      =1  sfr ICRBH  = 0xAF;
  80      =1  sfr ICRBL  = 0xAE;
  81      =1  sfr IEN1   = 0xE8;
  82      =1  sfr IP1    = 0xF8;
  83      =1  sfr IP1H   = 0xF7;
  84      =1  sfr KBCON  = 0x94;
  85      =1  sfr KBMASK = 0x86;
  86      =1  sfr KBPATN = 0x93;
  87      =1  sfr OCRAH  = 0xEF;
  88      =1  sfr OCRAL  = 0xEE;
  89      =1  sfr OCRBH  = 0xFB;
  90      =1  sfr OCRBL  = 0xFA;
  91      =1  sfr OCRCH  = 0xFD;
  92      =1  sfr OCRCL  = 0xFC;
  93      =1  sfr OCRDH  = 0xFF;
  94      =1  sfr OCRDL  = 0xFE;
  95      =1  sfr P0M1   = 0x84;
  96      =1  sfr P0M2   = 0x85;
  97      =1  sfr P1M1   = 0x91;
  98      =1  sfr P1M2   = 0x92;
  99      =1  sfr P2M1   = 0xA4;
 100      =1  sfr P2M2   = 0xA5;
 101      =1  sfr P3M1   = 0xB1;
 102      =1  sfr P3M2   = 0xB2;
 103      =1  sfr PCONA  = 0xB5;
 104      =1  sfr PT0AD  = 0xF6;
 105      =1  sfr RSTSRC = 0xDF;
 106      =1  sfr RTCCON = 0xD1;
 107      =1  sfr RTCH   = 0xD2;
 108      =1  sfr RTCL   = 0xD3;
 109      =1  sfr SSTAT  = 0xBA;
 110      =1  sfr SPCTL  = 0xE2;
 111      =1  sfr SPSTAT = 0xE1;
 112      =1  sfr SPDAT  = 0xE3;
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 3   

 113      =1  sfr TAMOD  = 0x8F;
 114      =1  sfr TCR20  = 0xC8;
 115      =1  sfr TCR21  = 0xF9;
 116      =1  sfr TICR2  = 0xC9;
 117      =1  sfr TIFR2  = 0xE9;
 118      =1  sfr TISE2  = 0xDE;
 119      =1  sfr TOR2H  = 0xCF;
 120      =1  sfr TOR2L  = 0xCE;
 121      =1  sfr TPCR2H = 0xCB;
 122      =1  sfr TPCR2L = 0xCA;
 123      =1  sfr TRIM   = 0x96;
 124      =1  sfr WDCON  = 0xA7;
 125      =1  sfr WDL    = 0xC1;
 126      =1  sfr WFEED1 = 0xC2;
 127      =1  sfr WFEED2 = 0xC3;
 128      =1  sfr IP0H   = 0xB7;
 129      =1  
 130      =1  /*  BIT Registers  */
 131      =1  /*  PSW   */
 132      =1  sbit CY   = PSW^7;
 133      =1  sbit AC   = PSW^6;
 134      =1  sbit F0   = PSW^5;
 135      =1  sbit RS1  = PSW^4;
 136      =1  sbit RS0  = PSW^3;
 137      =1  sbit OV   = PSW^2;
 138      =1  sbit F1   = PSW^1;
 139      =1  sbit P    = PSW^0;
 140      =1  
 141      =1  /*  TCON  */
 142      =1  sbit TF1  = TCON^7;
 143      =1  sbit TR1  = TCON^6;
 144      =1  sbit TF0  = TCON^5;
 145      =1  sbit TR0  = TCON^4;
 146      =1  sbit IE1  = TCON^3;
 147      =1  sbit IT1  = TCON^2;
 148      =1  sbit IE0  = TCON^1;
 149      =1  sbit IT0  = TCON^0;
 150      =1  
 151      =1  /*  IEN0   */
 152      =1  sbit EA   = IEN0^7;
 153      =1  sbit EWDRT = IEN0^6;
 154      =1  sbit EBO   = IEN0^5;
 155      =1  sbit ES   = IEN0^4; // alternatively "ESR"
 156      =1  sbit ESR  = IEN0^4;
 157      =1  sbit ET1  = IEN0^3;
 158      =1  sbit EX1  = IEN0^2;
 159      =1  sbit ET0  = IEN0^1;
 160      =1  sbit EX0  = IEN0^0;
 161      =1  
 162      =1  /*  IEN1   */
 163      =1  sbit EAD  = IEN1^7; // alternatively "EIEE" 
 164      =1  sbit EIEE = IEN1^7;
 165      =1  sbit EST  = IEN1^6;
 166      =1  sbit ECCU = IEN1^4;
 167      =1  sbit ESPI = IEN1^3;
 168      =1  sbit EC   = IEN1^2;
 169      =1  sbit EKBI = IEN1^1;
 170      =1  sbit EI2C = IEN1^0;
 171      =1  
 172      =1  /*  IP0   */ 
 173      =1  sbit PWDRT = IP0^6;
 174      =1  sbit PB0   = IP0^5;
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 4   

 175      =1  sbit PS    = IP0^4; // alternatively "PSR"
 176      =1  sbit PSR   = IP0^4;
 177      =1  sbit PT1   = IP0^3;
 178      =1  sbit PX1   = IP0^2;
 179      =1  sbit PT0   = IP0^1;
 180      =1  sbit PX0   = IP0^0;
 181      =1  
 182      =1  /*  IP1   */
 183      =1  sbit PAD  = IP1^7; // alternatively "PIEE" 
 184      =1  sbit PIEE = IP1^7;
 185      =1  sbit PST  = IP1^6;
 186      =1  sbit PCCU = IP1^4;
 187      =1  sbit PSPI = IP1^3;
 188      =1  sbit PC_  = IP1^2;
 189      =1  sbit PKBI = IP1^1;
 190      =1  sbit PI2C = IP1^0;
 191      =1  
 192      =1  /*  SCON  */
 193      =1  sbit SM0  = SCON^7; // alternatively "FE"
 194      =1  sbit FE   = SCON^7;
 195      =1  sbit SM1  = SCON^6;
 196      =1  sbit SM2  = SCON^5;
 197      =1  sbit REN  = SCON^4;
 198      =1  sbit TB8  = SCON^3;
 199      =1  sbit RB8  = SCON^2;
 200      =1  sbit TI   = SCON^1;
 201      =1  sbit RI   = SCON^0;
 202      =1  
 203      =1  /*  I2CON  */
 204      =1  sbit I2EN  = I2CON^6;
 205      =1  sbit STA   = I2CON^5;
 206      =1  sbit STO   = I2CON^4;
 207      =1  sbit SI    = I2CON^3;
 208      =1  sbit AA    = I2CON^2;
 209      =1  sbit CRSEL = I2CON^0;
 210      =1  
 211      =1  /*  P0  */
 212      =1  sbit KB7 = P0^7; // alternatively "T1"
 213      =1  sbit T1 = P0^7;
 214      =1  sbit KB6 = P0^6; // alternatively "CMP1"
 215      =1  //sbit CMP1 = P0^6;
 216      =1  sbit KB5 = P0^5;
 217      =1  sbit KB4 = P0^4;
 218      =1  sbit KB3 = P0^3;
 219      =1  sbit KB2 = P0^2;
 220      =1  sbit KB1 = P0^1;
 221      =1  sbit KB0 = P0^0; // alternatively "CMP2"
 222      =1  //sbit CMP2 = P0^0;
 223      =1  
 224      =1  /*  P1  */
 225      =1  sbit OCC     = P1^7;
 226      =1  sbit OCB     = P1^6;
 227      =1  sbit RST     = P1^5;
 228      =1  sbit INT1    = P1^4;
 229      =1  sbit INT0    = P1^3; // alternatively "SDA"
 230      =1  sbit SDA     = P1^3;
 231      =1  sbit T0      = P1^2; // alternatively "SCL"
 232      =1  sbit SCL     = P1^2;
 233      =1  sbit RxD     = P1^1;
 234      =1  sbit TxD     = P1^0;
 235      =1  
 236      =1  /*  P2  */
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 5   

 237      =1  sbit ICA     = P2^7;
 238      =1  sbit OCA     = P2^6;
 239      =1  sbit SPICLK  = P2^5;
 240      =1  sbit SS      = P2^4;
 241      =1  sbit MISO    = P2^3;
 242      =1  sbit MOSI    = P2^2;
 243      =1  sbit OCD     = P2^1;
 244      =1  sbit ICB     = P2^0;
 245      =1  
 246      =1  /*  P3  */
 247      =1  sbit XTAL1= P3^1;
 248      =1  sbit XTAL2= P3^0;
 249      =1  
 250      =1  /* TCR20 */
 251      =1  sbit PLLEN = TCR20^7;
 252      =1  sbit HLTRN = TCR20^6;
 253      =1  sbit HLTEN = TCR20^5;
 254      =1  sbit ALTCD = TCR20^4;
 255      =1  sbit ALTAB = TCR20^3;
 256      =1  sbit TDIR2 = TCR20^2;
 257      =1  sbit TMOD21= TCR20^1;
 258      =1  sbit TMOD20= TCR20^0;
 259      =1  
 260      =1  /* ADMODA */
 261      =1  sbit BNDI1  = ADMODA^7;
 262      =1  sbit BURST1 = ADMODA^6;
 263      =1  sbit SCC1   = ADMODA^5;
 264      =1  sbit SCAN1  = ADMODA^4;
 265      =1  sbit BNDI0  = ADMODA^3;
 266      =1  sbit BURST0 = ADMODA^2;
 267      =1  sbit SCC0   = ADMODA^1;
 268      =1  sbit SCAN0  = ADMODA^0;
 269      =1  
 270      =1  #endif
 271      =1  
   5          #include <LIMITS.H>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  LIMITS.H
   3      =1  
   4      =1  ANSI standard include file.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __LIMITS_H__
  10      =1  #define __LIMITS_H__
  11      =1  
  12      =1  #define CHAR_BIT         8              /* Number of bits in any "char" */
  13      =1  #define CHAR_MAX         127            /* Max             "char" value */
  14      =1  #define CHAR_MIN       (-128)           /* Min             "char" value */
  15      =1  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  16      =1  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
  17      =1  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  18      =1  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  19      =1  #define SHRT_MIN       (-32768)         /* Min ("signed") "short" value */
  20      =1  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  21      =1  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  22      =1  #define INT_MIN        (-32768)         /* Min ("signed")   "int" value */
  23      =1  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  24      =1  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  25      =1  #define LONG_MIN        -2147483648     /* Min ("signed")  "long" value */
  26      =1  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 6   

  27      =1  
  28      =1  #endif
   6          #include <INTRINS.H>   
   1      =1  /*--------------------------------------------------------------------------
   2      =1  INTRINS.H
   3      =1  
   4      =1  Intrinsic functions for C51.
   5      =1  Copyright (c) 1988-2004 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __INTRINS_H__
  10      =1  #define __INTRINS_H__
  11      =1  
  12      =1  extern void          _nop_     (void);
  13      =1  extern bit           _testbit_ (bit);
  14      =1  extern unsigned char _cror_    (unsigned char, unsigned char);
  15      =1  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  16      =1  extern unsigned long _lror_    (unsigned long, unsigned char);
  17      =1  extern unsigned char _crol_    (unsigned char, unsigned char);
  18      =1  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  19      =1  extern unsigned long _lrol_    (unsigned long, unsigned char);
  20      =1  extern unsigned char _chkfloat_(float);
  21      =1  extern void          _push_    (unsigned char _sfr);
  22      =1  extern void          _pop_     (unsigned char _sfr);
  23      =1  
  24      =1  #endif
  25      =1  
   7          #include <STDIO.H> 
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
  17      =1   #define NULL ((void *) 0)
  18      =1  #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
  21      =1   #define _SIZE_T
  22      =1   typedef unsigned int size_t;
  23      =1  #endif
  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 7   

  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
   8          #include <CTYPE.H>   
   1      =1  /*--------------------------------------------------------------------------
   2      =1  CTYPE.H
   3      =1  
   4      =1  Prototypes for character functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __CTYPE_H__
  10      =1  #define __CTYPE_H__
  11      =1  
  12      =1  #pragma SAVE
  13      =1  #pragma REGPARMS
  14      =1  extern bit isalpha (unsigned char);
  15      =1  extern bit isalnum (unsigned char);
  16      =1  extern bit iscntrl (unsigned char);
  17      =1  extern bit isdigit (unsigned char);
  18      =1  extern bit isgraph (unsigned char);
  19      =1  extern bit isprint (unsigned char);
  20      =1  extern bit ispunct (unsigned char);
  21      =1  extern bit islower (unsigned char);
  22      =1  extern bit isupper (unsigned char);
  23      =1  extern bit isspace (unsigned char);
  24      =1  extern bit isxdigit (unsigned char);
  25      =1  extern unsigned char tolower (unsigned char);
  26      =1  extern unsigned char toupper (unsigned char);
  27      =1  extern unsigned char toint (unsigned char);
  28      =1  
  29      =1  #define _tolower(c) ( (c)-'A'+'a' )
  30      =1  #define _toupper(c) ( (c)-'a'+'A' )
  31      =1  #define toascii(c)  ( (c) & 0x7F )
  32      =1  #pragma RESTORE
  33      =1  
  34      =1  #endif
   9          #include "ITRIP.H"
   1      =1  /*
   2      =1  itrip HEADERZ v1e-9
   3      =1  */
   4      =1  
   5      =1  #ifndef ITRIP_H
   6      =1  #define ITRIP_H 
   7      =1  /**************************GLOBALS*******************************************/
   8      =1  typedef unsigned char byte;
   9      =1  typedef unsigned int word;
  10      =1  
  11      =1  #define MAX_FREQ        1080
  12      =1  #define MIN_FREQ        700
  13      =1  
  14      =1  #define BARKER_7                0x58    //01011000
  15      =1  #define NOT_BARKER_7    0xA7    //10100111
  16      =1  
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 8   

  17      =1  #define fineStruct 1
  18      =1  #define BUFFER_LENGTH   0x06
  19      =1  #define MAX_FRAME 0x08
  20      =1  #define DATABYTES_PER_FRAME 0x02
  21      =1  #define SAMPLES_PER_BIT 0x03
  22      =1  #define t0High  0xFF
  23      =1  #define t0Low   0x96
  24      =1  //#define       t1High  0xFF
  25      =1  //#define t1Low         0x3C
  26      =1  /*******************************EMPerical numbers
  27      =1  11.8.10
  28      =1  50 -> 416 HZ
  29      =1  5 - >31.25 kHz
  30      =1  
  31      =1  11.22.10
  32      =1  30 -> 25k  nothing else....
  33      =1  *******************************************************************************/
  34      =1  
  35      =1  
  36      =1  /****************************PROTOS*********************/
  37      =1          void setup ();  //name and turn on
  38      =1          void delay (word cnt);
  39      =1          void shiftout8 (byte d);
  40      =1  //      void shiftout16 (word d);
  41      =1  //      void shiftout32 (word dh, word dl);
  42      =1          void txProg ();
  43      =1          void setFreq (word freq);
  44      =1          void tone ();
  45      =1          void delayT (word t);
  46      =1  /************************EMPTY Protos****************/  
  47      =1  //      void txStero ();
  48      =1  //      void txMono ();
  49      =1  //      
  50      =1  //      void incFreq ();
  51      =1  //      void decFreq ();
  52      =1  //      void setChan (byte numChan);
  53      =1  
  54      =1  /******************PIN NAMES****************************/       
  55      =1          sbit txVcc = P2^7;
  56      =1          sbit txData = P2^2;
  57      =1          sbit txClk = P2^3;
  58      =1          sbit LED = P2^5;
  59      =1          sbit CE = P2^4;
  60      =1          sbit midButt = P0^0;
  61      =1          sbit hiButt = P0^1;
  62      =1          sbit loButt = P0^2;
  63      =1          sbit audioL = P0^3;
  64      =1          sbit audioN = P0^4;     //must be soldered and AC coupled (DC blocked) with 1 uF
  65      =1          sbit ccTimer = P2^0;
  66      =1  #endif
  10          
  11          
  12          /******************************* GLOBALS**************************************/
  13          /****************************BH141* instruction*******************************/
  14          volatile word bdata txState;
  15          sbit stereo = txState^3;
  16          sbit phaseMode0 = txState^4;
  17          sbit phaseMode1 = txState^5;
  18          sbit test0 = txState^6;
  19          sbit test1 = txState^7; 
  20          
  21          
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 9   

  22          /***********************************8MAIN????????????????????????*****************/
  23          void main() {   
  24   1         
  25   1      /**************LOCALS****************************/
  26   1              
  27   1              word station = 870;
  28   1      
  29   1      /**************SETUP++***************************************/
  30   1              setup();                                                                                         
  31   1              setFreq(station);
  32   1      /****************LOOP*****************************************/
  33   1              for(;;) {
  34   2                      delay(UINT_MAX);
  35   2                      if (midButt == 0) {
  36   3                              LED ^= 1;
  37   3                              txVcc ^= 1; 
  38   3                      }
  39   2                      delay(UINT_MAX);
  40   2                      if (LED) {
  41   3                              if (hiButt == 0) {
  42   4                                      LED = 0;
  43   4                                      delay(UINT_MAX);
  44   4                                      station++;
  45   4                                      setFreq(station);
  46   4                                      LED = 1;
  47   4                                      delay(UINT_MAX);
  48   4                              } 
  49   3                              else if (loButt == 0) {
  50   4                                      LED = 0;
  51   4                                      delay(UINT_MAX);
  52   4                                      --station;
  53   4                                      setFreq(station);
  54   4                                      LED = 1;
  55   4                                      delay(UINT_MAX);
  56   4                              }
  57   3                              if (station < MIN_FREQ) {
  58   4                                      station = 700;
  59   4                                      LED = 0;
  60   4                                      delay(UINT_MAX);
  61   4                                      LED = 1;
  62   4                                      delay(UINT_MAX);
  63   4                                      LED = 0;
  64   4                                      delay(UINT_MAX);
  65   4                                      LED = 1;
  66   4                                      delay(UINT_MAX);
  67   4                                      LED = 0;
  68   4                                      delay(UINT_MAX);
  69   4                                      LED = 1;
  70   4                                      delay(UINT_MAX);
  71   4                                      LED = 0;
  72   4                                      delay(UINT_MAX);
  73   4                                      LED = 1;
  74   4                                      delay(UINT_MAX);
  75   4                              }
  76   3                              if (station > MAX_FREQ) {
  77   4                                      station = 1080;
  78   4                                      LED = 0;
  79   4                                      delay(UINT_MAX);
  80   4                                      LED = 1;
  81   4                                      delay(UINT_MAX);
  82   4                                      LED = 0;
  83   4                                      delay(UINT_MAX);
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 10  

  84   4                                      LED = 1;
  85   4                                      delay(UINT_MAX);
  86   4                                      LED = 0;
  87   4                                      delay(UINT_MAX);
  88   4                                      LED = 1;
  89   4                                      delay(UINT_MAX);
  90   4                                      LED = 0;
  91   4                                      delay(UINT_MAX);
  92   4                                      LED = 1;
  93   4                                      delay(UINT_MAX);
  94   4                              }                                                 
  95   3                      }
  96   2              }
  97   1      }
  98          /*******************SETUP FUNCTION*********************/
  99          void setup() {
 100   1      
 101   1              P0M1 = 0x17;     //input for buttons and audioN, output for audioL
 102   1              P1M1 = 0;               //quasi-bidirectional pins or inputs
 103   1              P2M1 = 0;
 104   1              P3M1 = 0;
 105   1              midButt = 1; //pull up resistors on the button inputs
 106   1              hiButt = 1;
 107   1              loButt = 1;
 108   1              LED = 1;        //LED on
 109   1              txVcc = 0;      //transmitter off
 110   1              CE = 0;         //serial input inable for transmitter
 111   1              stereo = 0;
 112   1              audioL = 0;
 113   1              test0 = 1;      //always
 114   1              test1 = 0;      //always
 115   1              phaseMode0 = 0; //?
 116   1              phaseMode1 = 0; //?
 117   1      }       
 118          
 119          /*****************TEST SETUP***************************************/
 120          
 121          /********************SETTERS****************************/  
 122          void setFreq (word freq) { //takes
 123   1              if (freq > MAX_FREQ || freq < MIN_FREQ) return;  //out of bounds, do-over
 124   1              else {
 125   2                      word temp = freq;
 126   2                      EA = 0;         //Disable interrupts for tuning
 127   2                      temp += (txState & 0xF800);  //keep phase cntrl, channels, and test bits
 128   2                      txState = temp;  //return or sorts
 129   2                      txProg();
 130   2                      EA = 1;         //resume interrupt service
 131   2              }       
 132   1      }
 133          
 134          /*********************8CEREAL***************************/
 135          void txProg() { //shift out txState to the transmitter
 136   1              word i = 0x01;
 137   1              EA = 0;
 138   1              txVcc = 0;      //      TX on
 139   1              txClk = 0;   
 140   1              CE = 0;   
 141   1              CE = 1;   
 142   1              for(i = 0x01; i != 0; i <<= 1) {  
 143   2                      txData = txState & i;
 144   2                      txClk = 1;   
 145   2                      txClk = 0;   
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 11  

 146   2              }       
 147   1              CE = 0;
 148   1              EA = 1;   
 149   1      }
 150          
 151                                                             
 152          void delay (word cnt) { //2.17 us * cnt
 153   1        while (--cnt);
 154   1      }
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 27
0000 750003      R     MOV     station,#03H
0003 750066      R     MOV     station+01H,#066H
                                           ; SOURCE LINE # 30
0006 120000      R     LCALL   setup
                                           ; SOURCE LINE # 31
0009 AF00        R     MOV     R7,station+01H
000B AE00        R     MOV     R6,station
000D 120000      R     LCALL   _setFreq
                                           ; SOURCE LINE # 33
0010         ?C0001:
                                           ; SOURCE LINE # 34
0010 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 35
0013 20800A            JB      midButt,?C0003
                                           ; SOURCE LINE # 36
0016 A2A5              MOV     C,LED
0018 B3                CPL     C
0019 92A5              MOV     LED,C
                                           ; SOURCE LINE # 37
001B A2A7              MOV     C,txVcc
001D B3                CPL     C
001E 92A7              MOV     txVcc,C
                                           ; SOURCE LINE # 38
0020         ?C0003:
                                           ; SOURCE LINE # 39
0020 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 40
0023 30A5EA            JNB     LED,?C0001
                                           ; SOURCE LINE # 41
0026 20810E            JB      hiButt,?C0005
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
0029 120000      R     LCALL   L?0027
                                           ; SOURCE LINE # 44
002C 0500        R     INC     station+01H
002E E500        R     MOV     A,station+01H
0030 7002              JNZ     ?C0023
0032 0500        R     INC     station
0034         ?C0023:
                                           ; SOURCE LINE # 45
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0035 8010              SJMP    ?C0026
0037         ?C0005:
                                           ; SOURCE LINE # 49
0037 208217            JB      loButt,?C0006
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
003A 120000      R     LCALL   L?0027
                                           ; SOURCE LINE # 52
003D E500        R     MOV     A,station+01H
003F 1500        R     DEC     station+01H
0041 7002              JNZ     ?C0024
0043 1500        R     DEC     station
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 13  

0045         ?C0024:
                                           ; SOURCE LINE # 53
0045 AF00        R     MOV     R7,station+01H
0047         ?C0026:
0047 AE00        R     MOV     R6,station
0049 120000      R     LCALL   _setFreq
                                           ; SOURCE LINE # 54
004C D2A5              SETB    LED
                                           ; SOURCE LINE # 55
004E 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 56
0051         ?C0006:
                                           ; SOURCE LINE # 57
0051 C3                CLR     C
0052 E500        R     MOV     A,station+01H
0054 94BC              SUBB    A,#0BCH
0056 E500        R     MOV     A,station
0058 9402              SUBB    A,#02H
005A 5026              JNC     ?C0008
                                           ; SOURCE LINE # 58
005C 750002      R     MOV     station,#02H
005F 7500BC      R     MOV     station+01H,#0BCH
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
0062 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 61
0065 D2A5              SETB    LED
                                           ; SOURCE LINE # 62
0067 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
006A 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 65
006D D2A5              SETB    LED
                                           ; SOURCE LINE # 66
006F 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
0072 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 69
0075 D2A5              SETB    LED
                                           ; SOURCE LINE # 70
0077 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
007A 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 73
007D D2A5              SETB    LED
                                           ; SOURCE LINE # 74
007F 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 75
0082         ?C0008:
                                           ; SOURCE LINE # 76
0082 D3                SETB    C
0083 E500        R     MOV     A,station+01H
0085 9438              SUBB    A,#038H
0087 E500        R     MOV     A,station
0089 9404              SUBB    A,#04H
008B 4083              JC      ?C0001
                                           ; SOURCE LINE # 77
008D 750004      R     MOV     station,#04H
0090 750038      R     MOV     station+01H,#038H
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 14  

                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
0093 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 80
0096 D2A5              SETB    LED
                                           ; SOURCE LINE # 81
0098 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
009B 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 84
009E D2A5              SETB    LED
                                           ; SOURCE LINE # 85
00A0 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
00A3 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 88
00A6 D2A5              SETB    LED
                                           ; SOURCE LINE # 89
00A8 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
00AB 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 92
00AE D2A5              SETB    LED
                                           ; SOURCE LINE # 93
00B0 120000      R     LCALL   L?0029
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
00B3 0100        R     AJMP    ?C0001
             ; FUNCTION main (END)

             ; FUNCTION setup (BEGIN)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 101
0000 758417            MOV     P0M1,#017H
                                           ; SOURCE LINE # 102
0003 E4                CLR     A
0004 F591              MOV     P1M1,A
                                           ; SOURCE LINE # 103
0006 F5A4              MOV     P2M1,A
                                           ; SOURCE LINE # 104
0008 F5B1              MOV     P3M1,A
                                           ; SOURCE LINE # 105
000A D280              SETB    midButt
                                           ; SOURCE LINE # 106
000C D281              SETB    hiButt
                                           ; SOURCE LINE # 107
000E D282              SETB    loButt
                                           ; SOURCE LINE # 108
0010 D2A5              SETB    LED
                                           ; SOURCE LINE # 109
0012 C2A7              CLR     txVcc
                                           ; SOURCE LINE # 110
0014 C2A4              CLR     CE
                                           ; SOURCE LINE # 111
0016 C200        R     CLR     stereo
                                           ; SOURCE LINE # 112
0018 C283              CLR     audioL
                                           ; SOURCE LINE # 113
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 15  

001A D200        R     SETB    test0
                                           ; SOURCE LINE # 114
001C C200        R     CLR     test1
                                           ; SOURCE LINE # 115
001E C200        R     CLR     phaseMode0
                                           ; SOURCE LINE # 116
0020 C200        R     CLR     phaseMode1
                                           ; SOURCE LINE # 117
0022 22                RET     
             ; FUNCTION setup (END)

             ; FUNCTION _setFreq (BEGIN)
                                           ; SOURCE LINE # 122
;---- Variable 'freq' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 123
0000 D3                SETB    C
0001 EF                MOV     A,R7
0002 9438              SUBB    A,#038H
0004 EE                MOV     A,R6
0005 9404              SUBB    A,#04H
0007 5028              JNC     ?C0014
0009 C3                CLR     C
000A EF                MOV     A,R7
000B 94BC              SUBB    A,#0BCH
000D EE                MOV     A,R6
000E 9402              SUBB    A,#02H
0010 401F              JC      ?C0014
0012         ?C0012:
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0012 8E00        R     MOV     temp,R6
0014 8F00        R     MOV     temp+01H,R7
                                           ; SOURCE LINE # 126
0016 C2AF              CLR     EA
                                           ; SOURCE LINE # 127
0018 E500        R     MOV     A,txState
001A 54F8              ANL     A,#0F8H
001C FE                MOV     R6,A
001D E4                CLR     A
001E 2500        R     ADD     A,temp+01H
0020 F500        R     MOV     temp+01H,A
0022 EE                MOV     A,R6
0023 3500        R     ADDC    A,temp
0025 F500        R     MOV     temp,A
                                           ; SOURCE LINE # 128
0027 F500        R     MOV     txState,A
0029 850000      R     MOV     txState+01H,temp+01H
                                           ; SOURCE LINE # 129
002C 120000      R     LCALL   txProg
                                           ; SOURCE LINE # 130
002F D2AF              SETB    EA
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0031         ?C0014:
0031 22                RET     
             ; FUNCTION _setFreq (END)

             ; FUNCTION txProg (BEGIN)
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
;---- Variable 'i' assigned to Register 'R6/R7' ----
0000 7F01              MOV     R7,#01H
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 16  

0002 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 137
0004 C2AF              CLR     EA
                                           ; SOURCE LINE # 138
0006 C2A7              CLR     txVcc
                                           ; SOURCE LINE # 139
0008 C2A3              CLR     txClk
                                           ; SOURCE LINE # 140
000A C2A4              CLR     CE
                                           ; SOURCE LINE # 141
000C D2A4              SETB    CE
                                           ; SOURCE LINE # 142
000E         ?C0016:
000E EF                MOV     A,R7
000F 4E                ORL     A,R6
0010 6019              JZ      ?C0017
                                           ; SOURCE LINE # 143
0012 E500        R     MOV     A,txState
0014 5E                ANL     A,R6
0015 FC                MOV     R4,A
0016 E500        R     MOV     A,txState+01H
0018 5F                ANL     A,R7
0019 4C                ORL     A,R4
001A 24FF              ADD     A,#0FFH
001C 92A2              MOV     txData,C
                                           ; SOURCE LINE # 144
001E D2A3              SETB    txClk
                                           ; SOURCE LINE # 145
0020 C2A3              CLR     txClk
                                           ; SOURCE LINE # 146
0022 EF                MOV     A,R7
0023 25E0              ADD     A,ACC
0025 FF                MOV     R7,A
0026 EE                MOV     A,R6
0027 33                RLC     A
0028 FE                MOV     R6,A
0029 80E3              SJMP    ?C0016
002B         ?C0017:
                                           ; SOURCE LINE # 147
002B C2A4              CLR     CE
                                           ; SOURCE LINE # 148
002D D2AF              SETB    EA
                                           ; SOURCE LINE # 149
002F 22                RET     
             ; FUNCTION txProg (END)

             ; FUNCTION L?0027 (BEGIN)
0000         L?0028:
0000 C2A5              CLR     LED
0002         L?0029:
0002 74FF              MOV     A,#0FFH
0004 FF                MOV     R7,A
0005 FE                MOV     R6,A
             ; FUNCTION _delay (BEGIN)
                                           ; SOURCE LINE # 152
;---- Variable 'cnt' assigned to Register 'R6/R7' ----
0006         ?C0020:
                                           ; SOURCE LINE # 153
0006 EF                MOV     A,R7
0007 1F                DEC     R7
0008 7001              JNZ     ?C0025
000A 1E                DEC     R6
C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 17  

000B         ?C0025:
000B 14                DEC     A
000C 4E                ORL     A,R6
000D 70F7              JNZ     ?C0020
                                           ; SOURCE LINE # 154
000F         ?C0022:
000F 22                RET     
             ; FUNCTION _delay (END)

C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 18  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
P1M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P2M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P3M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
CE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
txProg . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
txClk. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
txVcc. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
IEN0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
IEN1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
_delay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0006H  -----
  cnt. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
stereo . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0003H  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  station. . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
ADMODA . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
setup. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
byte . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
word . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
phaseMode0 . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0004H  1
TCR20. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
phaseMode1 . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0005H  1
LED. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
I2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
midButt. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
_setFreq . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  freq . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  temp . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
audioL . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
txData . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
txState. . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0000H  2
test0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0006H  1
test1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0007H  1
hiButt . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
loButt . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    330    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V8.12   BLINKY87                                                              02/24/2011 01:06:42 PAGE 19  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
