C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE BLINKY
OBJECT MODULE PLACED IN .\obj\Blinky.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Blinky.c OMF2 ROM(COMPACT) BROWSE MODP2 DEBUG CODE LISTINCLUDE SYMBOLS PRIN
                    -T(.\lst\Blinky.lst) PREPRINT(.\lst\Blinky.i) OBJECT(.\obj\Blinky.obj)

line level    source

   1          /* Blinky.C - LED Fla+-
   2           sher for the Keil LPC900 EPM Emulator/Programmer Module */
   3          
   4          #include <REG936.H>                     // register definition
   1      =1  /*--------------------------------------------------------------------------
   2      =1  REG936.H
   3      =1  
   4      =1  Header file for Philips 89LPC936
   5      =1  Copyright (c) 1988-2006 KEIL - An ARM Company
   6      =1  All rights reserved.
   7      =1  V1.1
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __REG936_H__
  11      =1  #define __REG936_H__
  12      =1  
  13      =1  /*  BYTE Registers  */
  14      =1  sfr P0   = 0x80;
  15      =1  sfr P1   = 0x90;
  16      =1  sfr P2   = 0xA0;
  17      =1  sfr P3   = 0xB0;
  18      =1  sfr PSW  = 0xD0;
  19      =1  sfr ACC  = 0xE0;
  20      =1  sfr B    = 0xF0;
  21      =1  sfr SP   = 0x81;
  22      =1  sfr DPL  = 0x82;
  23      =1  sfr DPH  = 0x83;
  24      =1  sfr PCON = 0x87;
  25      =1  sfr TCON = 0x88;
  26      =1  sfr TMOD = 0x89;
  27      =1  sfr TL0  = 0x8A;
  28      =1  sfr TL1  = 0x8B;
  29      =1  sfr TH0  = 0x8C;
  30      =1  sfr TH1  = 0x8D;
  31      =1  sfr IEN0 = 0xA8;
  32      =1  sfr IP0  = 0xB8;
  33      =1  sfr SCON = 0x98;
  34      =1  sfr SBUF = 0x99;
  35      =1  
  36      =1  sfr ADCON0 = 0x8E;
  37      =1  sfr ADCON1 = 0x97;
  38      =1  sfr ADMODA = 0xC0;
  39      =1  sfr ADMODB = 0xA1;
  40      =1  sfr ADINS  = 0xA3;
  41      =1  sfr AD0DAT0= 0xC5;
  42      =1  sfr AD0DAT1= 0xC6;
  43      =1  sfr AD0DAT2= 0xC7;
  44      =1  sfr AD0DAT3= 0xF4;
  45      =1  sfr AD1DAT0= 0xD5;
  46      =1  sfr AD1DAT1= 0xD6;
  47      =1  sfr AD1DAT2= 0xD7;
  48      =1  sfr AD1DAT3= 0xF5;
  49      =1  sfr AD0BH  = 0xBB;
  50      =1  sfr AD0BL  = 0xA6;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 2   

  51      =1  sfr AD1BH  = 0xC4;
  52      =1  sfr AD1BL  = 0xBC;
  53      =1  sfr AUXR1  = 0xA2;
  54      =1  sfr SADDR  = 0xA9;
  55      =1  sfr SADEN  = 0xB9;
  56      =1  sfr TL2    = 0xCC;
  57      =1  sfr TH2    = 0xCD;
  58      =1  sfr BRGR0  = 0xBE;
  59      =1  sfr BRGR1  = 0xBF;
  60      =1  sfr BRGCON = 0xBD;
  61      =1  sfr CCCRA  = 0xEA;
  62      =1  sfr CCCRB  = 0xEB;
  63      =1  sfr CCCRC  = 0xEC;
  64      =1  sfr CCCRD  = 0xED;
  65      =1  sfr CMP1   = 0xAC;
  66      =1  sfr CMP2   = 0xAD;
  67      =1  sfr DEECON = 0xF1;
  68      =1  sfr DEEDAT = 0xF2;
  69      =1  sfr DEEADR = 0xF3;
  70      =1  sfr DIVM   = 0x95;
  71      =1  sfr I2ADR  = 0xDB;
  72      =1  sfr I2CON  = 0xD8;
  73      =1  sfr I2DAT  = 0xDA;
  74      =1  sfr I2SCLH = 0xDD;
  75      =1  sfr I2SCLL = 0xDC;
  76      =1  sfr I2STAT = 0xD9;
  77      =1  sfr ICRAH  = 0xAB;
  78      =1  sfr ICRAL  = 0xAA;
  79      =1  sfr ICRBH  = 0xAF;
  80      =1  sfr ICRBL  = 0xAE;
  81      =1  sfr IEN1   = 0xE8;
  82      =1  sfr IP1    = 0xF8;
  83      =1  sfr IP1H   = 0xF7;
  84      =1  sfr KBCON  = 0x94;
  85      =1  sfr KBMASK = 0x86;
  86      =1  sfr KBPATN = 0x93;
  87      =1  sfr OCRAH  = 0xEF;
  88      =1  sfr OCRAL  = 0xEE;
  89      =1  sfr OCRBH  = 0xFB;
  90      =1  sfr OCRBL  = 0xFA;
  91      =1  sfr OCRCH  = 0xFD;
  92      =1  sfr OCRCL  = 0xFC;
  93      =1  sfr OCRDH  = 0xFF;
  94      =1  sfr OCRDL  = 0xFE;
  95      =1  sfr P0M1   = 0x84;
  96      =1  sfr P0M2   = 0x85;
  97      =1  sfr P1M1   = 0x91;
  98      =1  sfr P1M2   = 0x92;
  99      =1  sfr P2M1   = 0xA4;
 100      =1  sfr P2M2   = 0xA5;
 101      =1  sfr P3M1   = 0xB1;
 102      =1  sfr P3M2   = 0xB2;
 103      =1  sfr PCONA  = 0xB5;
 104      =1  sfr PT0AD  = 0xF6;
 105      =1  sfr RSTSRC = 0xDF;
 106      =1  sfr RTCCON = 0xD1;
 107      =1  sfr RTCH   = 0xD2;
 108      =1  sfr RTCL   = 0xD3;
 109      =1  sfr SSTAT  = 0xBA;
 110      =1  sfr SPCTL  = 0xE2;
 111      =1  sfr SPSTAT = 0xE1;
 112      =1  sfr SPDAT  = 0xE3;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 3   

 113      =1  sfr TAMOD  = 0x8F;
 114      =1  sfr TCR20  = 0xC8;
 115      =1  sfr TCR21  = 0xF9;
 116      =1  sfr TICR2  = 0xC9;
 117      =1  sfr TIFR2  = 0xE9;
 118      =1  sfr TISE2  = 0xDE;
 119      =1  sfr TOR2H  = 0xCF;
 120      =1  sfr TOR2L  = 0xCE;
 121      =1  sfr TPCR2H = 0xCB;
 122      =1  sfr TPCR2L = 0xCA;
 123      =1  sfr TRIM   = 0x96;
 124      =1  sfr WDCON  = 0xA7;
 125      =1  sfr WDL    = 0xC1;
 126      =1  sfr WFEED1 = 0xC2;
 127      =1  sfr WFEED2 = 0xC3;
 128      =1  sfr IP0H   = 0xB7;
 129      =1  
 130      =1  /*  BIT Registers  */
 131      =1  ////AUXR1
 132      =1  //sbit DPS  = AUXR1^0;
 133      =1  ////not used
 134      =1  ////hard wired to 0
 135      =1  //sbit SRST = AUXR1^3;
 136      =1  //sbit ENT0 = AUXR1^4; //hardware toggle
 137      =1  //sbit ENT1 = AUXR1^5;
 138      =1  //sbit EBRR = AUXR1^6;
 139      =1  //sbit CLKLP = AUXR1^7;
 140      =1  
 141      =1  /*  PSW   */
 142      =1  sbit CY   = PSW^7;
 143      =1  sbit AC   = PSW^6;
 144      =1  sbit F0   = PSW^5;
 145      =1  sbit RS1  = PSW^4;
 146      =1  sbit RS0  = PSW^3;
 147      =1  sbit OV   = PSW^2;                 
 148      =1  sbit F1   = PSW^1;
 149      =1  sbit P    = PSW^0;
 150      =1  
 151      =1  /*  TCON  */
 152      =1  sbit TF1  = TCON^7;
 153      =1  sbit TR1  = TCON^6;
 154      =1  sbit TF0  = TCON^5;
 155      =1  sbit TR0  = TCON^4;
 156      =1  sbit IE1  = TCON^3;
 157      =1  sbit IT1  = TCON^2;
 158      =1  sbit IE0  = TCON^1;
 159      =1  sbit IT0  = TCON^0;
 160      =1  
 161      =1  /*  IEN0   */
 162      =1  sbit EA   = IEN0^7;
 163      =1  sbit EWDRT = IEN0^6;
 164      =1  sbit EBO   = IEN0^5;
 165      =1  sbit ES   = IEN0^4; // alternatively "ESR"
 166      =1  sbit ESR  = IEN0^4;
 167      =1  sbit ET1  = IEN0^3;
 168      =1  sbit EX1  = IEN0^2;
 169      =1  sbit ET0  = IEN0^1;
 170      =1  sbit EX0  = IEN0^0;
 171      =1  
 172      =1  /*  IEN1   */
 173      =1  sbit EAD  = IEN1^7; // alternatively "EIEE" 
 174      =1  sbit EIEE = IEN1^7;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 4   

 175      =1  sbit EST  = IEN1^6;
 176      =1  sbit ECCU = IEN1^4;
 177      =1  sbit ESPI = IEN1^3;
 178      =1  sbit EC   = IEN1^2;
 179      =1  sbit EKBI = IEN1^1;
 180      =1  sbit EI2C = IEN1^0;
 181      =1  
 182      =1  /*  IP0   */ 
 183      =1  sbit PWDRT = IP0^6;
 184      =1  sbit PB0   = IP0^5;
 185      =1  sbit PS    = IP0^4; // alternatively "PSR"
 186      =1  sbit PSR   = IP0^4;
 187      =1  sbit PT1   = IP0^3;
 188      =1  sbit PX1   = IP0^2;
 189      =1  sbit PT0   = IP0^1;
 190      =1  sbit PX0   = IP0^0;
 191      =1  
 192      =1  /*  IP1   */
 193      =1  sbit PAD  = IP1^7; // alternatively "PIEE" 
 194      =1  sbit PIEE = IP1^7;
 195      =1  sbit PST  = IP1^6;
 196      =1  sbit PCCU = IP1^4;
 197      =1  sbit PSPI = IP1^3;
 198      =1  sbit PC_  = IP1^2;
 199      =1  sbit PKBI = IP1^1;
 200      =1  sbit PI2C = IP1^0;
 201      =1  
 202      =1  /*  SCON  */
 203      =1  sbit SM0  = SCON^7; // alternatively "FE"
 204      =1  sbit FE   = SCON^7;
 205      =1  sbit SM1  = SCON^6;
 206      =1  sbit SM2  = SCON^5;
 207      =1  sbit REN  = SCON^4;
 208      =1  sbit TB8  = SCON^3;
 209      =1  sbit RB8  = SCON^2;
 210      =1  sbit TI   = SCON^1;
 211      =1  sbit RI   = SCON^0;
 212      =1  
 213      =1  /*  I2CON  */
 214      =1  sbit I2EN  = I2CON^6;
 215      =1  sbit STA   = I2CON^5;
 216      =1  sbit STO   = I2CON^4;
 217      =1  sbit SI    = I2CON^3;
 218      =1  sbit AA    = I2CON^2;
 219      =1  sbit CRSEL = I2CON^0;
 220      =1  
 221      =1  /*  P0  */
 222      =1  sbit KB7 = P0^7; // alternatively "T1"
 223      =1  sbit T1 = P0^7;
 224      =1  sbit KB6 = P0^6; // alternatively "CMP1"
 225      =1  //sbit CMP1 = P0^6;
 226      =1  sbit KB5 = P0^5;
 227      =1  sbit KB4 = P0^4;
 228      =1  sbit KB3 = P0^3;
 229      =1  sbit KB2 = P0^2;
 230      =1  sbit KB1 = P0^1;
 231      =1  sbit KB0 = P0^0; // alternatively "CMP2"
 232      =1  //sbit CMP2 = P0^0;
 233      =1  
 234      =1  /*  P1  */
 235      =1  sbit OCC     = P1^7;
 236      =1  sbit OCB     = P1^6;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 5   

 237      =1  sbit RST     = P1^5;
 238      =1  sbit INT1    = P1^4;
 239      =1  sbit INT0    = P1^3; // alternatively "SDA"
 240      =1  sbit SDA     = P1^3;
 241      =1  sbit T0      = P1^2; // alternatively "SCL"
 242      =1  sbit SCL     = P1^2;
 243      =1  sbit RxD     = P1^1;
 244      =1  sbit TxD     = P1^0;
 245      =1  
 246      =1  /*  P2  */
 247      =1  sbit ICA     = P2^7;
 248      =1  sbit OCA     = P2^6;
 249      =1  sbit SPICLK  = P2^5;
 250      =1  sbit SS      = P2^4;
 251      =1  sbit MISO    = P2^3;
 252      =1  sbit MOSI    = P2^2;
 253      =1  sbit OCD     = P2^1;
 254      =1  sbit ICB     = P2^0;
 255      =1  
 256      =1  /*  P3  */
 257      =1  sbit XTAL1= P3^1;
 258      =1  sbit XTAL2= P3^0;
 259      =1  
 260      =1  /* TCR20 */
 261      =1  sbit PLLEN = TCR20^7;
 262      =1  sbit HLTRN = TCR20^6;
 263      =1  sbit HLTEN = TCR20^5;
 264      =1  sbit ALTCD = TCR20^4;
 265      =1  sbit ALTAB = TCR20^3;
 266      =1  sbit TDIR2 = TCR20^2;
 267      =1  sbit TMOD21= TCR20^1;
 268      =1  sbit TMOD20= TCR20^0;
 269      =1  
 270      =1  /* ADMODA */
 271      =1  sbit BNDI1  = ADMODA^7;
 272      =1  sbit BURST1 = ADMODA^6;
 273      =1  sbit SCC1   = ADMODA^5;
 274      =1  sbit SCAN1  = ADMODA^4;
 275      =1  sbit BNDI0  = ADMODA^3;
 276      =1  sbit BURST0 = ADMODA^2;
 277      =1  sbit SCC0   = ADMODA^1;
 278      =1  sbit SCAN0  = ADMODA^0;
 279      =1  
 280      =1  #endif
 281      =1  
   5          #include <LIMITS.H>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  LIMITS.H
   3      =1  
   4      =1  ANSI standard include file.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __LIMITS_H__
  10      =1  #define __LIMITS_H__
  11      =1  
  12      =1  #define CHAR_BIT         8              /* Number of bits in any "char" */
  13      =1  #define CHAR_MAX         127            /* Max             "char" value */
  14      =1  #define CHAR_MIN       (-128)           /* Min             "char" value */
  15      =1  #define SCHAR_MAX        127            /* Max "signed"    "char" value */
  16      =1  #define SCHAR_MIN      (-128)           /* Min "signed"    "char" value */
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 6   

  17      =1  #define UCHAR_MAX        255            /* Max "unsigned"  "char" value */
  18      =1  #define SHRT_MAX         32767          /* Max ("signed") "short" value */
  19      =1  #define SHRT_MIN       (-32768)         /* Min ("signed") "short" value */
  20      =1  #define USHRT_MAX        0xFFFF         /* Max "unsigned" "short" value */
  21      =1  #define INT_MAX          32767          /* Max ("signed")   "int" value */
  22      =1  #define INT_MIN        (-32768)         /* Min ("signed")   "int" value */
  23      =1  #define UINT_MAX         0xFFFF         /* Max "unsigned"   "int" value */
  24      =1  #define LONG_MAX         2147483647     /* Max ("signed")  "long" value */
  25      =1  #define LONG_MIN        -2147483648     /* Min ("signed")  "long" value */
  26      =1  #define ULONG_MAX        0xFFFFFFFF     /* Max "unsigned"  "long" value */
  27      =1  
  28      =1  #endif
   6          #include <INTRINS.H>   
   1      =1  /*--------------------------------------------------------------------------
   2      =1  INTRINS.H
   3      =1  
   4      =1  Intrinsic functions for C51.
   5      =1  Copyright (c) 1988-2004 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __INTRINS_H__
  10      =1  #define __INTRINS_H__
  11      =1  
  12      =1  extern void          _nop_     (void);
  13      =1  extern bit           _testbit_ (bit);
  14      =1  extern unsigned char _cror_    (unsigned char, unsigned char);
  15      =1  extern unsigned int  _iror_    (unsigned int,  unsigned char);
  16      =1  extern unsigned long _lror_    (unsigned long, unsigned char);
  17      =1  extern unsigned char _crol_    (unsigned char, unsigned char);
  18      =1  extern unsigned int  _irol_    (unsigned int,  unsigned char);
  19      =1  extern unsigned long _lrol_    (unsigned long, unsigned char);
  20      =1  extern unsigned char _chkfloat_(float);
  21      =1  extern void          _push_    (unsigned char _sfr);
  22      =1  extern void          _pop_     (unsigned char _sfr);
  23      =1  
  24      =1  #endif
  25      =1  
   7          #include <STDIO.H> 
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
  17      =1   #define NULL ((void *) 0)
  18      =1  #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
  21      =1   #define _SIZE_T
  22      =1   typedef unsigned int size_t;
  23      =1  #endif
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 7   

  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
   8          #include <CTYPE.H>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  CTYPE.H
   3      =1  
   4      =1  Prototypes for character functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __CTYPE_H__
  10      =1  #define __CTYPE_H__
  11      =1  
  12      =1  #pragma SAVE
  13      =1  #pragma REGPARMS
  14      =1  extern bit isalpha (unsigned char);
  15      =1  extern bit isalnum (unsigned char);
  16      =1  extern bit iscntrl (unsigned char);
  17      =1  extern bit isdigit (unsigned char);
  18      =1  extern bit isgraph (unsigned char);
  19      =1  extern bit isprint (unsigned char);
  20      =1  extern bit ispunct (unsigned char);
  21      =1  extern bit islower (unsigned char);
  22      =1  extern bit isupper (unsigned char);
  23      =1  extern bit isspace (unsigned char);
  24      =1  extern bit isxdigit (unsigned char);
  25      =1  extern unsigned char tolower (unsigned char);
  26      =1  extern unsigned char toupper (unsigned char);
  27      =1  extern unsigned char toint (unsigned char);
  28      =1  
  29      =1  #define _tolower(c) ( (c)-'A'+'a' )
  30      =1  #define _toupper(c) ( (c)-'a'+'A' )
  31      =1  #define toascii(c)  ( (c) & 0x7F )
  32      =1  #pragma RESTORE
  33      =1  
  34      =1  #endif
   9          #include "midi_spec.h"
   1      =1  /*
   2      =1  
   3      =1    thanks Peter Everett!!!!
   4      =1  
   5      =1  */
   6      =1  
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 8   

   7      =1  #ifndef midi_spec_h
   8      =1  #define midi_spec_h
   9      =1  
  10      =1  //COORD extra codes from midi Files... 
  11      =1  //really only ever gonna be TEMPO
  12      =1  #define TEMPO_SET       0x70//0x51 in file
  13      =1  
  14      =1  //Staion macros for general sliders..
  15      =1  #define STATION_TO_HI(x)        ((unsigned char)(((((unsigned int)x) - 700) >> 2) & 0x7f))
  16      =1  #define STATION_TO_LO(x)        ((unsigned char)(((((unsigned int)x) - 700) << 5) & 0x7f))
  17      =1  
  18      =1  #define NUM_MIDI_CHANS      16    // Number of logical channels
  19      =1  
  20      =1  #define PERCUSSION_CHAN     10    // Channel used for percussuion
  21      =1  
  22      =1  #define MIDI_DATA_RANGE    128    // 7 bit data range
  23      =1  
  24      =1  
  25      =1  // Note numbers,
  26      =1  
  27      =1  // lowest note  C0  (0)   =     8.1757989156437073336828122976033Hz
  28      =1  
  29      =1  // middle C is  C5  (60)  =   261.6255653005986346778499935233Hz
  30      =1  
  31      =1  // reference    A6  (69)  =   440Hz
  32      =1  
  33      =1  // highest note G10 (127) = 12543.853951415977410742384974714Hz
  34      =1  
  35      =1  enum
  36      =1  
  37      =1  {
  38      =1  
  39      =1    C0, Cs0, D0, Ds0, E0, Fm0, Fs0, G0, Gs0, A0, As0, B0,
  40      =1  
  41      =1    C1, Cs1, D1, Ds1, E1, Fm1, Fs1, G1, Gs1, A1, As1, B1,
  42      =1  
  43      =1    C2, Cs2, D2, Ds2, E2, F2, Fs2, G2, Gs2, A2, As2, B2,
  44      =1  
  45      =1    C3, Cs3, D3, Ds3, E3, F3, Fs3, G3, Gs3, A3, As3, B3,
  46      =1  
  47      =1    C4, Cs4, D4, Ds4, E4, F4, Fs4, G4, Gs4, A4, As4, B4,
  48      =1  
  49      =1    C5, Cs5, D5, Ds5, E5, F5, Fs5, G5, Gs5, A5, As5, B5,
  50      =1  
  51      =1    C6, Cs6, D6, Ds6, E6, F6, Fs6, G6, Gs6, A6, As6, B6,
  52      =1  
  53      =1    C7, Cs7, D7, Ds7, E7, F7, Fs7, G7, Gs7, A7, As7, B7,
  54      =1  
  55      =1    C8, Cs8, D8, Ds8, E8, F8, Fs8, G8, Gs8, A8, As8, B8,
  56      =1  
  57      =1    C9, Cs9, D9, Ds9, E9, F9, Fs9, G9, Gs9, A9, As9, B9,
  58      =1  
  59      =1    C10,Cs10,D10,Ds10,E10,F10,Fs10,NOTE_OFF,/*G10,*/NUM_NOTES
  60      =1  
  61      =1  };
  62      =1  
  63      =1  
  64      =1  
  65      =1  
  66      =1  // Voice messages. (bits 0..3 are the channel number)
  67      =1  
  68      =1  #define NOTE_OFF            0x80  // + 2 bytes, pitch (note), velocity
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 9   

  69      =1  
  70      =1  #define NOTE_ON             0x90  // + 2 bytes, pitch (note), velocity
  71      =1  
  72      =1  #define KEY_PRESSURE        0xa0  // + 2 bytes, pitch (note), pressure
  73      =1  
  74      =1  #define CONTROL             0xb0  // + 2 bytes, controller, setting
  75      =1  
  76      =1  #define PROGRAM             0xc0  // + 1 byte, program (patch)
  77      =1  
  78      =1  #define CHAN_PRESSURE       0xd0  // + 1 byte, pressure
  79      =1  
  80      =1  #define PITCH_WHEEL         0xe0  // + 2 bytes, 14bit value, 7 lsb's first
  81      =1  
  82      =1  
  83      =1  // System messages
  84      =1  
  85      =1  #define SYSTEM_EXCLUSIVE    0xf0
  86      =1  
  87      =1  #define SONG_POSITION       0xf2
  88      =1  
  89      =1  #define SONG_SELECT         0xf3
  90      =1  
  91      =1  #define TUNE_REQUEST        0xf6
  92      =1  
  93      =1  #define EOX                 0xf7 // system exclusive terminator
  94      =1  
  95      =1  
  96      =1  // Real Time messages
  97      =1  
  98      =1  #define TIMING_CLOCK        0xf8
  99      =1  
 100      =1  #define START               0xfa
 101      =1  
 102      =1  #define CONTINUE            0xfb
 103      =1  
 104      =1  #define STOP                0xfc
 105      =1  
 106      =1  #define ACTIVE_SENSING      0xfe
 107      =1  
 108      =1  #define SYSTEM_RESET        0xff
 109      =1  
 110      =1  
 111      =1  
 112      =1  
 113      =1  // Controllers
 114      =1  
 115      =1  
 116      =1  // msb of 14 bit values
 117      =1  
 118      =1  #define BANK_hi             0x00
 119      =1  
 120      =1  #define MOD_WHEEL_hi        0x01
 121      =1  
 122      =1  #define BREATH_CTRL_hi      0x02
 123      =1  
 124      =1  #define FOOT_PEDAL_hi       0x04
 125      =1  
 126      =1  #define PORTAMENTO_TIME_hi  0x05
 127      =1  
 128      =1  #define DATA_ENTRY_hi       0x06
 129      =1  
 130      =1  #define VOLUME_hi           0x07
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 10  

 131      =1  
 132      =1  #define BALANCE_hi          0x08
 133      =1  
 134      =1  #define PAN_POSN_hi         0x0a
 135      =1  
 136      =1  #define EXPRESSION_hi       0x0b
 137      =1  
 138      =1  #define EFFECT_CTRL_1_hi    0x0c
 139      =1  
 140      =1  #define EFFECT_CTRL_2_hi    0x0d
 141      =1  
 142      =1  #define GENERAL_SLIDER_1_hi 0x10
 143      =1  
 144      =1  #define GENERAL_SLIDER_2_hi 0x11
 145      =1  
 146      =1  #define GENERAL_SLIDER_3_hi 0x12
 147      =1  
 148      =1  #define GENERAL_SLIDER_4_hi 0x13
 149      =1  
 150      =1  
 151      =1  // lsb of 14 bit values
 152      =1  
 153      =1  #define BANK_lo             0x20
 154      =1  
 155      =1  #define MOD_WHEEL_lo        0x21
 156      =1  
 157      =1  #define BREATH_CTRL_lo      0x22
 158      =1  
 159      =1  #define FOOT_PEDAL_lo       0x24
 160      =1  
 161      =1  #define PORTAMENTO_TIME_lo  0x25
 162      =1  
 163      =1  #define DATA_ENTRY_lo       0x26
 164      =1  
 165      =1  #define VOLUME_lo           0x27
 166      =1  
 167      =1  #define BALANCE_lo          0x28
 168      =1  
 169      =1  #define PAN_POSN_lo         0x2a
 170      =1  
 171      =1  #define EXPRESSION_lo       0x2b
 172      =1  
 173      =1  #define EFFECT_CTRL_1_lo    0x2c
 174      =1  
 175      =1  #define EFFECT_CTRL_2_lo    0x2d
 176      =1  
 177      =1  #define GENERAL_SLIDER_1_lo 0x30
 178      =1  
 179      =1  #define GENERAL_SLIDER_2_lo 0x31
 180      =1  
 181      =1  #define GENERAL_SLIDER_3_lo 0x32
 182      =1  
 183      =1  #define GENERAL_SLIDER_4_lo 0x33
 184      =1  
 185      =1  
 186      =1  // switches, >=64 = on, <64 = off
 187      =1  
 188      =1  #define HOLD_PEDAL_on       0x40
 189      =1  
 190      =1  #define PORTAMENTO_on       0x41
 191      =1  
 192      =1  #define SUSTENUTO_PEDAL_on  0x42
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 11  

 193      =1  
 194      =1  #define SOFT_PEDAL_on       0x43
 195      =1  
 196      =1  #define LEGATO_PEDAL_on     0x44
 197      =1  
 198      =1  #define HOLD_2_PEDAL_on     0x45
 199      =1  
 200      =1  
 201      =1  // 7 bit values
 202      =1  
 203      =1  #define SOUND_VARIATION     0x46
 204      =1  
 205      =1  #define SOUND_TIMBRE        0x47
 206      =1  
 207      =1  #define SOUND_RELEASE_TIME  0x48
 208      =1  
 209      =1  #define SOUND_ATTACK_TIME   0x49
 210      =1  
 211      =1  #define SOUND_BRIGHTNESS    0x4a
 212      =1  
 213      =1  #define SOUND_CTRL_6        0x4b
 214      =1  
 215      =1  #define SOUND_CTRL_7        0x4c
 216      =1  
 217      =1  #define SOUND_CTRL_8        0x4d
 218      =1  
 219      =1  #define SOUND_CTRL_9        0x4e
 220      =1  
 221      =1  #define SOUND_CTRL_10       0x4f
 222      =1  
 223      =1  
 224      =1  // switches, >=64 = on, <64 = off
 225      =1  
 226      =1  #define GENERAL_BUTTON_1_on 0x50
 227      =1  
 228      =1  #define GENERAL_BUTTON_2_on 0x51
 229      =1  
 230      =1  #define GENERAL_BUTTON_3_on 0x52
 231      =1  
 232      =1  #define GENERAL_BUTTON_4_on 0x53
 233      =1  
 234      =1  
 235      =1  // 7 bit values
 236      =1  
 237      =1  #define EFFECTS_LEVEL       0x5b
 238      =1  
 239      =1  #define TREMULO_LEVEL       0x5c
 240      =1  
 241      =1  #define CHORUS_LEVEL        0x5d
 242      =1  
 243      =1  #define CELESTE_LEVEL       0x5e
 244      =1  
 245      =1  #define PHASER_LEVEL        0x5f
 246      =1  
 247      =1  
 248      =1  #define DATA_BUTTON_INC     0x60
 249      =1  
 250      =1  #define DATA_BUTTON_DEC     0x61
 251      =1  
 252      =1  
 253      =1  // 14 bit values
 254      =1  
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 12  

 255      =1  #define NON_REG_PARM_lo     0x62
 256      =1  
 257      =1  #define NON_REG_PARM_hi     0x63
 258      =1  
 259      =1  #define REG_PARM_lo         0x64
 260      =1  
 261      =1  #define REG_PARM_hi         0x65
 262      =1  
 263      =1  
 264      =1  // mode controls
 265      =1  
 266      =1  #define ALL_SOUND_OFF       0x78
 267      =1  
 268      =1  #define ALL_CONTROLLERS_OFF 0x79
 269      =1  
 270      =1  #define LOCAL_KEYBOARD_on   0x7a
 271      =1  
 272      =1  #define ALL_NOTES_OFF       0x7b
 273      =1  
 274      =1  #define OMNI_MODE_OFF       0x7c
 275      =1  
 276      =1  #define OMNI_MODE_ON        0x7d
 277      =1  
 278      =1  #define MONO_OPERATION      0x7e
 279      =1  
 280      =1  #define POLY_OPERATION      0x7f
 281      =1  
 282      =1  
 283      =1  
 284      =1  
 285      =1  // System Exclusive ID's
 286      =1  
 287      =1  #define SEQUENTIAL_CIRCUITS 0x01
 288      =1  
 289      =1  #define BIG_BRIAR           0x02
 290      =1  
 291      =1  #define OCTAVE_PLATEAU      0x03
 292      =1  
 293      =1  #define MOOG                0x04
 294      =1  
 295      =1  #define PASSPORT_DESIGNS    0x05
 296      =1  
 297      =1  #define LEXICON             0x06
 298      =1  
 299      =1  #define KURZWEIL            0x07
 300      =1  
 301      =1  #define FENDER              0x08
 302      =1  
 303      =1  #define GULBRANSEN          0x09
 304      =1  
 305      =1  #define DELTA_LABS          0x0a
 306      =1  
 307      =1  #define SOUND_COMP          0x0b
 308      =1  
 309      =1  #define GENERAL_ELECTRO     0x0c
 310      =1  
 311      =1  #define TECHMAR             0x0d
 312      =1  
 313      =1  #define MATTHEWS_RESEARCH   0x0e
 314      =1  
 315      =1  #define OBERHEIM            0x10
 316      =1  
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 13  

 317      =1  #define PAIA                0x11
 318      =1  
 319      =1  #define SIMMONS             0x12
 320      =1  
 321      =1  #define DIGIDESIGN          0x13
 322      =1  
 323      =1  #define FAIRLIGHT           0x14
 324      =1  
 325      =1  #define JL_COOPER           0x15
 326      =1  
 327      =1  #define LOWERY              0x16
 328      =1  
 329      =1  #define LIN                 0x17
 330      =1  
 331      =1  #define EMU                 0x18
 332      =1  
 333      =1  #define PEAVEY              0x1b
 334      =1  
 335      =1  
 336      =1  #define BON_TEMPI           0x20
 337      =1  
 338      =1  #define SEIL                0x21
 339      =1  
 340      =1  #define SYNTHEAXE           0x23
 341      =1  
 342      =1  #define HOHNER              0x24
 343      =1  
 344      =1  #define CRUMAR              0x25
 345      =1  
 346      =1  #define SOLTON              0x26
 347      =1  
 348      =1  #define JELLINGHAUS_MS      0x27
 349      =1  
 350      =1  #define CTS_                0x28
 351      =1  
 352      =1  #define PPG                 0x29
 353      =1  
 354      =1  #define ELKA                0x2f
 355      =1  
 356      =1  #define CHEETAH             0x36
 357      =1  
 358      =1  #define WALDORF             0x3e
 359      =1  
 360      =1  
 361      =1  #define KAWAI               0x40
 362      =1  
 363      =1  #define ROLAND              0x41
 364      =1  
 365      =1  #define KORG                0x42
 366      =1  
 367      =1  #define YAMAHA              0x43
 368      =1  
 369      =1  #define CASIO               0x44
 370      =1  
 371      =1  #define KAMIYA_STUDIO       0x46
 372      =1  
 373      =1  #define AKAI                0x47
 374      =1  
 375      =1  #define VICTOR              0x48
 376      =1  
 377      =1  #define FUJITSU             0x4b
 378      =1  
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 14  

 379      =1  #define SONY                0x4c
 380      =1  
 381      =1  #define TEAC                0x4e
 382      =1  
 383      =1  #define MATSUSHITA          0x50
 384      =1  
 385      =1  #define FOSTEX              0x51
 386      =1  
 387      =1  #define ZOOM                0x52
 388      =1  
 389      =1  #define MATSUSHITA2         0x54
 390      =1  
 391      =1  #define SUZUKI              0x55
 392      =1  
 393      =1  #define FUJI_SOUND          0x56
 394      =1  
 395      =1  #define ACOUSTIC_TECH_LIB   0x57
 396      =1  
 397      =1  
 398      =1  #define EDUCATIONAL_USE_ID  0x7d // for educational or development use only
 399      =1  
 400      =1  #define NON_REAL_TIME_ID    0x7e
 401      =1  
 402      =1  #define REAL_TIME_ID        0x7f
 403      =1  
 404      =1  
 405      =1  #endif
  10          #include "uart.h"
   1      =1  #ifndef _UARTH_
   2      =1  #define _UARTH_
   3      =1  
   4      =1  #define RX_BUF_SIZE     8
   5      =1  
   6      =1  // midi in definition
   7      =1  
   8      =1  typedef struct m_in_s {
   9      =1    unsigned char
  10      =1      typeChan,          // type              )
  11      =1  //    channel,       // channel           )  current message 
  12      =1      count,         // data counter      )
  13      =1      controller,    // controller number )
  14      =1      pitch;         // key pitch         )
  15      =1  //      song;          // song number
  16      =1  // Always acted on, never persistent
  17      =1  //    velocity,      //key velocity      ) last note message or pressure message data
  18      =1  //    pressure,      // key pressure      )
  19      =1    unsigned short
  20      =1      position;      // song position
  21      =1  } m_in_t;
  22      =1  
  23      =1  
  24      =1  void uart_transmit (unsigned char value);
  25      =1  unsigned char uart_get (void);
  26      =1  void uart_init (void);
  27      =1  unsigned char ascii_to_hex(unsigned char ch);
  28      =1  void print_hex_to_ascii(unsigned char ch);
  29      =1  #endif // _UARTH_
  11          #include "LUTFreq.h"  
   1      =1  #ifndef LUTFREQ_H
   2      =1  #define LUTFREQ_H
   3      =1  
   4      =1  #define LUT_NUM_NOTES   99
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 15  

   5      =1  #define LUT_MIDI_NOTE_SHIFT     10
   6      =1  #define LUT_LEN (LUT_NUM_NOTES)
   7      =1  #define LUT_NOTE_LIMIT (LUT_LEN + LUT_MIDI_NOTE_SHIFT)
   8      =1  
   9      =1  extern const unsigned int code LUTFreq[LUT_LEN];
  10      =1  
  11      =1  #endif
  12          #include "LUTsin.h" 
   1      =1  #ifndef LUTSIN_H
   2      =1  #define LUTSIN_H
   3      =1  
   4      =1  const unsigned char code LUTSIN64[64] = {
   5      =1          128,
   6      =1          140,
   7      =1          152,
   8      =1          164,
   9      =1          176,
  10      =1          187,
  11      =1          198,
  12      =1          208,
  13      =1          217,
  14      =1          226,
  15      =1          233,
  16      =1          240,
  17      =1          245,
  18      =1          249,
  19      =1          252,
  20      =1          254,
  21      =1          255,
  22      =1          254,
  23      =1          252,
  24      =1          249,
  25      =1          245,
  26      =1          240,
  27      =1          233,
  28      =1          226,
  29      =1          217,
  30      =1          208,
  31      =1          198,
  32      =1          187,
  33      =1          176,
  34      =1          164,
  35      =1          152,
  36      =1          140,
  37      =1          127,
  38      =1          115,
  39      =1          103,
  40      =1          91,
  41      =1          79,
  42      =1          68,
  43      =1          57,
  44      =1          47,
  45      =1          38,
  46      =1          29,
  47      =1          22,
  48      =1          15,
  49      =1          10,
  50      =1          6,
  51      =1          3,
  52      =1          1,
  53      =1          1,
  54      =1          1,
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 16  

  55      =1          3,
  56      =1          6,
  57      =1          10,
  58      =1          15,
  59      =1          22,
  60      =1          29,
  61      =1          38,
  62      =1          47,
  63      =1          57,
  64      =1          68,
  65      =1          79,
  66      =1          91,
  67      =1          103,
  68      =1          115
  69      =1  };
  70      =1  const unsigned char code LUTSIN128[128] = {
  71      =1          128,
  72      =1          134,
  73      =1          140,
  74      =1          146,
  75      =1          152,
  76      =1          158,
  77      =1          164,
  78      =1          170,
  79      =1          176,
  80      =1          182,
  81      =1          187,
  82      =1          193,
  83      =1          198,
  84      =1          203,
  85      =1          208,
  86      =1          213,
  87      =1          217,
  88      =1          222,
  89      =1          226,
  90      =1          230,
  91      =1          233,
  92      =1          236,
  93      =1          240,
  94      =1          242,
  95      =1          245,
  96      =1          247,
  97      =1          249,
  98      =1          251,
  99      =1          252,
 100      =1          253,
 101      =1          254,
 102      =1          254,
 103      =1          255,
 104      =1          254,
 105      =1          254,
 106      =1          253,
 107      =1          252,
 108      =1          251,
 109      =1          249,
 110      =1          247,
 111      =1          245,
 112      =1          242,
 113      =1          240,
 114      =1          236,
 115      =1          233,
 116      =1          230,
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 17  

 117      =1          226,
 118      =1          222,
 119      =1          217,
 120      =1          213,
 121      =1          208,
 122      =1          203,
 123      =1          198,
 124      =1          193,
 125      =1          187,
 126      =1          182,
 127      =1          176,
 128      =1          170,
 129      =1          164,
 130      =1          158,
 131      =1          152,
 132      =1          146,
 133      =1          140,
 134      =1          134,
 135      =1          128,
 136      =1          121,
 137      =1          115,
 138      =1          109,
 139      =1          103,
 140      =1          97,
 141      =1          91,
 142      =1          85,
 143      =1          79,
 144      =1          73,
 145      =1          68,
 146      =1          62,
 147      =1          57,
 148      =1          52,
 149      =1          47,
 150      =1          42,
 151      =1          38,
 152      =1          33,
 153      =1          29,
 154      =1          25,
 155      =1          22,
 156      =1          19,
 157      =1          15,
 158      =1          13,
 159      =1          10,
 160      =1          8,
 161      =1          6,
 162      =1          4,
 163      =1          3,
 164      =1          2,
 165      =1          1,
 166      =1          1,
 167      =1          1,
 168      =1          1,
 169      =1          1,
 170      =1          2,
 171      =1          3,
 172      =1          4,
 173      =1          6,
 174      =1          8,
 175      =1          10,
 176      =1          13,
 177      =1          15,
 178      =1          19,
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 18  

 179      =1          22,
 180      =1          25,
 181      =1          29,
 182      =1          33,
 183      =1          38,
 184      =1          42,
 185      =1          47,
 186      =1          52,
 187      =1          57,
 188      =1          62,
 189      =1          68,
 190      =1          73,
 191      =1          79,
 192      =1          85,
 193      =1          91,
 194      =1          97,
 195      =1          103,
 196      =1          109,
 197      =1          115,
 198      =1          121
 199      =1  };
 200      =1  #endif
  13          #include "itrip.h"
   1      =1  /*
   2      =1  itrip HEADERZ v1e-9
   3      =1  */
   4      =1  
   5      =1  #ifndef ITRIP_H
   6      =1  #define ITRIP_H 
   7      =1  
   8      =1  #include <REG936.H>
   1      =2  /*--------------------------------------------------------------------------
   2      =2  REG936.H
   3      =2  
   4      =2  Header file for Philips 89LPC936
   5      =2  Copyright (c) 1988-2006 KEIL - An ARM Company
   6      =2  All rights reserved.
   7      =2  V1.1
   8      =2  --------------------------------------------------------------------------*/
   9      =2  
  10      =2  #ifndef __REG936_H__
           =2 #define __REG936_H__
           =2 
           =2 /*  BYTE Registers  */
           =2 sfr P0   = 0x80;
           =2 sfr P1   = 0x90;
           =2 sfr P2   = 0xA0;
           =2 sfr P3   = 0xB0;
           =2 sfr PSW  = 0xD0;
           =2 sfr ACC  = 0xE0;
           =2 sfr B    = 0xF0;
           =2 sfr SP   = 0x81;
           =2 sfr DPL  = 0x82;
           =2 sfr DPH  = 0x83;
           =2 sfr PCON = 0x87;
           =2 sfr TCON = 0x88;
           =2 sfr TMOD = 0x89;
           =2 sfr TL0  = 0x8A;
           =2 sfr TL1  = 0x8B;
           =2 sfr TH0  = 0x8C;
           =2 sfr TH1  = 0x8D;
           =2 sfr IEN0 = 0xA8;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 19  

           =2 sfr IP0  = 0xB8;
           =2 sfr SCON = 0x98;
           =2 sfr SBUF = 0x99;
           =2 
           =2 sfr ADCON0 = 0x8E;
           =2 sfr ADCON1 = 0x97;
           =2 sfr ADMODA = 0xC0;
           =2 sfr ADMODB = 0xA1;
           =2 sfr ADINS  = 0xA3;
           =2 sfr AD0DAT0= 0xC5;
           =2 sfr AD0DAT1= 0xC6;
           =2 sfr AD0DAT2= 0xC7;
           =2 sfr AD0DAT3= 0xF4;
           =2 sfr AD1DAT0= 0xD5;
           =2 sfr AD1DAT1= 0xD6;
           =2 sfr AD1DAT2= 0xD7;
           =2 sfr AD1DAT3= 0xF5;
           =2 sfr AD0BH  = 0xBB;
           =2 sfr AD0BL  = 0xA6;
           =2 sfr AD1BH  = 0xC4;
           =2 sfr AD1BL  = 0xBC;
           =2 sfr AUXR1  = 0xA2;
           =2 sfr SADDR  = 0xA9;
           =2 sfr SADEN  = 0xB9;
           =2 sfr TL2    = 0xCC;
           =2 sfr TH2    = 0xCD;
           =2 sfr BRGR0  = 0xBE;
           =2 sfr BRGR1  = 0xBF;
           =2 sfr BRGCON = 0xBD;
           =2 sfr CCCRA  = 0xEA;
           =2 sfr CCCRB  = 0xEB;
           =2 sfr CCCRC  = 0xEC;
           =2 sfr CCCRD  = 0xED;
           =2 sfr CMP1   = 0xAC;
           =2 sfr CMP2   = 0xAD;
           =2 sfr DEECON = 0xF1;
           =2 sfr DEEDAT = 0xF2;
           =2 sfr DEEADR = 0xF3;
           =2 sfr DIVM   = 0x95;
           =2 sfr I2ADR  = 0xDB;
           =2 sfr I2CON  = 0xD8;
           =2 sfr I2DAT  = 0xDA;
           =2 sfr I2SCLH = 0xDD;
           =2 sfr I2SCLL = 0xDC;
           =2 sfr I2STAT = 0xD9;
           =2 sfr ICRAH  = 0xAB;
           =2 sfr ICRAL  = 0xAA;
           =2 sfr ICRBH  = 0xAF;
           =2 sfr ICRBL  = 0xAE;
           =2 sfr IEN1   = 0xE8;
           =2 sfr IP1    = 0xF8;
           =2 sfr IP1H   = 0xF7;
           =2 sfr KBCON  = 0x94;
           =2 sfr KBMASK = 0x86;
           =2 sfr KBPATN = 0x93;
           =2 sfr OCRAH  = 0xEF;
           =2 sfr OCRAL  = 0xEE;
           =2 sfr OCRBH  = 0xFB;
           =2 sfr OCRBL  = 0xFA;
           =2 sfr OCRCH  = 0xFD;
           =2 sfr OCRCL  = 0xFC;
           =2 sfr OCRDH  = 0xFF;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 20  

           =2 sfr OCRDL  = 0xFE;
           =2 sfr P0M1   = 0x84;
           =2 sfr P0M2   = 0x85;
           =2 sfr P1M1   = 0x91;
           =2 sfr P1M2   = 0x92;
           =2 sfr P2M1   = 0xA4;
           =2 sfr P2M2   = 0xA5;
           =2 sfr P3M1   = 0xB1;
           =2 sfr P3M2   = 0xB2;
           =2 sfr PCONA  = 0xB5;
           =2 sfr PT0AD  = 0xF6;
           =2 sfr RSTSRC = 0xDF;
           =2 sfr RTCCON = 0xD1;
           =2 sfr RTCH   = 0xD2;
           =2 sfr RTCL   = 0xD3;
           =2 sfr SSTAT  = 0xBA;
           =2 sfr SPCTL  = 0xE2;
           =2 sfr SPSTAT = 0xE1;
           =2 sfr SPDAT  = 0xE3;
           =2 sfr TAMOD  = 0x8F;
           =2 sfr TCR20  = 0xC8;
           =2 sfr TCR21  = 0xF9;
           =2 sfr TICR2  = 0xC9;
           =2 sfr TIFR2  = 0xE9;
           =2 sfr TISE2  = 0xDE;
           =2 sfr TOR2H  = 0xCF;
           =2 sfr TOR2L  = 0xCE;
           =2 sfr TPCR2H = 0xCB;
           =2 sfr TPCR2L = 0xCA;
           =2 sfr TRIM   = 0x96;
           =2 sfr WDCON  = 0xA7;
           =2 sfr WDL    = 0xC1;
           =2 sfr WFEED1 = 0xC2;
           =2 sfr WFEED2 = 0xC3;
           =2 sfr IP0H   = 0xB7;
           =2 
           =2 /*  BIT Registers  */
           =2 ////AUXR1
           =2 //sbit DPS  = AUXR1^0;
           =2 ////not used
           =2 ////hard wired to 0
           =2 //sbit SRST = AUXR1^3;
           =2 //sbit ENT0 = AUXR1^4; //hardware toggle
           =2 //sbit ENT1 = AUXR1^5;
           =2 //sbit EBRR = AUXR1^6;
           =2 //sbit CLKLP = AUXR1^7;
           =2 
           =2 /*  PSW   */
           =2 sbit CY   = PSW^7;
           =2 sbit AC   = PSW^6;
           =2 sbit F0   = PSW^5;
           =2 sbit RS1  = PSW^4;
           =2 sbit RS0  = PSW^3;
           =2 sbit OV   = PSW^2;                 
           =2 sbit F1   = PSW^1;
           =2 sbit P    = PSW^0;
           =2 
           =2 /*  TCON  */
           =2 sbit TF1  = TCON^7;
           =2 sbit TR1  = TCON^6;
           =2 sbit TF0  = TCON^5;
           =2 sbit TR0  = TCON^4;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 21  

           =2 sbit IE1  = TCON^3;
           =2 sbit IT1  = TCON^2;
           =2 sbit IE0  = TCON^1;
           =2 sbit IT0  = TCON^0;
           =2 
           =2 /*  IEN0   */
           =2 sbit EA   = IEN0^7;
           =2 sbit EWDRT = IEN0^6;
           =2 sbit EBO   = IEN0^5;
           =2 sbit ES   = IEN0^4; // alternatively "ESR"
           =2 sbit ESR  = IEN0^4;
           =2 sbit ET1  = IEN0^3;
           =2 sbit EX1  = IEN0^2;
           =2 sbit ET0  = IEN0^1;
           =2 sbit EX0  = IEN0^0;
           =2 
           =2 /*  IEN1   */
           =2 sbit EAD  = IEN1^7; // alternatively "EIEE" 
           =2 sbit EIEE = IEN1^7;
           =2 sbit EST  = IEN1^6;
           =2 sbit ECCU = IEN1^4;
           =2 sbit ESPI = IEN1^3;
           =2 sbit EC   = IEN1^2;
           =2 sbit EKBI = IEN1^1;
           =2 sbit EI2C = IEN1^0;
           =2 
           =2 /*  IP0   */ 
           =2 sbit PWDRT = IP0^6;
           =2 sbit PB0   = IP0^5;
           =2 sbit PS    = IP0^4; // alternatively "PSR"
           =2 sbit PSR   = IP0^4;
           =2 sbit PT1   = IP0^3;
           =2 sbit PX1   = IP0^2;
           =2 sbit PT0   = IP0^1;
           =2 sbit PX0   = IP0^0;
           =2 
           =2 /*  IP1   */
           =2 sbit PAD  = IP1^7; // alternatively "PIEE" 
           =2 sbit PIEE = IP1^7;
           =2 sbit PST  = IP1^6;
           =2 sbit PCCU = IP1^4;
           =2 sbit PSPI = IP1^3;
           =2 sbit PC_  = IP1^2;
           =2 sbit PKBI = IP1^1;
           =2 sbit PI2C = IP1^0;
           =2 
           =2 /*  SCON  */
           =2 sbit SM0  = SCON^7; // alternatively "FE"
           =2 sbit FE   = SCON^7;
           =2 sbit SM1  = SCON^6;
           =2 sbit SM2  = SCON^5;
           =2 sbit REN  = SCON^4;
           =2 sbit TB8  = SCON^3;
           =2 sbit RB8  = SCON^2;
           =2 sbit TI   = SCON^1;
           =2 sbit RI   = SCON^0;
           =2 
           =2 /*  I2CON  */
           =2 sbit I2EN  = I2CON^6;
           =2 sbit STA   = I2CON^5;
           =2 sbit STO   = I2CON^4;
           =2 sbit SI    = I2CON^3;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 22  

           =2 sbit AA    = I2CON^2;
           =2 sbit CRSEL = I2CON^0;
           =2 
           =2 /*  P0  */
           =2 sbit KB7 = P0^7; // alternatively "T1"
           =2 sbit T1 = P0^7;
           =2 sbit KB6 = P0^6; // alternatively "CMP1"
           =2 //sbit CMP1 = P0^6;
           =2 sbit KB5 = P0^5;
           =2 sbit KB4 = P0^4;
           =2 sbit KB3 = P0^3;
           =2 sbit KB2 = P0^2;
           =2 sbit KB1 = P0^1;
           =2 sbit KB0 = P0^0; // alternatively "CMP2"
           =2 //sbit CMP2 = P0^0;
           =2 
           =2 /*  P1  */
           =2 sbit OCC     = P1^7;
           =2 sbit OCB     = P1^6;
           =2 sbit RST     = P1^5;
           =2 sbit INT1    = P1^4;
           =2 sbit INT0    = P1^3; // alternatively "SDA"
           =2 sbit SDA     = P1^3;
           =2 sbit T0      = P1^2; // alternatively "SCL"
           =2 sbit SCL     = P1^2;
           =2 sbit RxD     = P1^1;
           =2 sbit TxD     = P1^0;
           =2 
           =2 /*  P2  */
           =2 sbit ICA     = P2^7;
           =2 sbit OCA     = P2^6;
           =2 sbit SPICLK  = P2^5;
           =2 sbit SS      = P2^4;
           =2 sbit MISO    = P2^3;
           =2 sbit MOSI    = P2^2;
           =2 sbit OCD     = P2^1;
           =2 sbit ICB     = P2^0;
           =2 
           =2 /*  P3  */
           =2 sbit XTAL1= P3^1;
           =2 sbit XTAL2= P3^0;
           =2 
           =2 /* TCR20 */
           =2 sbit PLLEN = TCR20^7;
           =2 sbit HLTRN = TCR20^6;
           =2 sbit HLTEN = TCR20^5;
           =2 sbit ALTCD = TCR20^4;
           =2 sbit ALTAB = TCR20^3;
           =2 sbit TDIR2 = TCR20^2;
           =2 sbit TMOD21= TCR20^1;
           =2 sbit TMOD20= TCR20^0;
           =2 
           =2 /* ADMODA */
           =2 sbit BNDI1  = ADMODA^7;
           =2 sbit BURST1 = ADMODA^6;
           =2 sbit SCC1   = ADMODA^5;
           =2 sbit SCAN1  = ADMODA^4;
           =2 sbit BNDI0  = ADMODA^3;
           =2 sbit BURST0 = ADMODA^2;
           =2 sbit SCC0   = ADMODA^1;
           =2 sbit SCAN0  = ADMODA^0;
           =2 
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 23  

           =2 #endif
 281      =2  
   9      =1  
  10      =1  /**************************TYPES*******************************************/
  11      =1  typedef unsigned char byte;
  12      =1  typedef unsigned int word; // 16 bits (is short)
  13      =1  
  14      =1  #define SYS_LEN 512
  15      =1  
  16      =1  typedef struct Riff_s {
  17      =1          word rAddy; //the physical address of riff
  18      =1          byte repeats;
  19      =1  } RIFF_T;
  20      =1  
  21      =1  
  22      =1  /***********************DEFINE SWITCHES**********************/
  23      =1  //a totally different program actually!!!!
  24      =1  //#define COORD         //blast midi clock out of UArt and drive RT messages
  25      =1  #define BASIC_TX
  26      =1  //#define DEBUG_SIM
  27      =1  
  28      =1  //KEIL!!!!  you get the point!!!
  29      =1  //#ifdef (COORD && BASIC_TX)
  30      =1  //      #error "DUMB!!! L00K UP!!!"
  31      =1  //#endif
  32      =1  
  33      =1  
  34      =1  ///MIDI STUFF
  35      =1  #define MY_L_CHAN       0 //[0-15] //base channel
  36      =1  #define MY_V_CHAN       (MY_L_CHAN+1) //always Lchan++
  37      =1  #define MY_ID           0
  38      =1  
  39      =1  #define MAX_FREQ        1200
  40      =1  #define MIN_FREQ        700
  41      =1  #define NUM_NOTE_CMDS   (127-LUT_NUM_NOTES) //28
  42      =1  //we can either stuff cmds in 0-9 and 110-127 or rewrite storage...
  43      =1  //seems tricky to rewrite, we just map low and hi notes to cmds
  44      =1  //woah!!!  we could double these if we teamed up with NOTE_OFF...
  45      =1  //not ideal for storage....  maybe for todo
  46      =1  enum {
  47      =1          TX_OFF = 0,     //npc
  48      =1          TX_ON = 1,  //npc
  49      =1          UPDOWN_OFF = 2,
  50      =1          STATION_UP = 3,
  51      =1          STATION_DOWN = 4,
  52      =1          DOWN1 = 5,  //todo make relative...   align with pitch wheel
  53      =1          DOWN2 = 6,      
  54      =1          DOWN3 = 7,      
  55      =1          DOWN4 = 8,
  56      =1          DOWN5 = 9,
  57      =1          HOLD0 = 109,
  58      =1          UP1 = 110,
  59      =1          UP2 = 111,
  60      =1          UP3 = 112,
  61      =1          UP4 = 113,
  62      =1          UP5 = 114,
  63      =1          STATION_UP2 = 115,                      //npc
  64      =1          STATION_DOWN2 = 116,                     //npc//npc
  65      =1          STATION_UP3 = 117,
  66      =1          STATION_DOWN3 = 118,                                      //npc
  67      =1          STATION_UP4 = 119,                                                        //npc
  68      =1          STATION_DOWN4 = 120,                                                      //npc
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 24  

  69      =1          STATION_UP5 = 121,      //npc
  70      =1          STATION_DOWN5 = 122,     //npc
  71      =1          STATION_UP6 = 123,                       //npc
  72      =1          STATION_DOWN6 = 124,                              //npc
  73      =1          HOLD1 = 125,
  74      =1          HOLD2 = 126,
  75      =1          NOTE_OFF_MEM = 127
  76      =1  };
  77      =1  
  78      =1  
  79      =1  /***************************GLOBALS******************************************/
  80      =1  extern volatile byte songNum; //127
  81      =1  extern volatile word midiClk;
  82      =1  extern volatile byte xdata sysEx[SYS_LEN];
  83      =1  extern volatile byte sysIx;
  84      =1  
  85      =1  extern volatile RIFF_T* curSong;
  86      =1  extern volatile word nextRiff;
  87      =1  extern volatile byte curRiffCnt;
  88      =1  extern volatile word numRiffs;
  89      =1  extern volatile byte code* riff;
  90      =1  extern volatile word deltaPos;
  91      =1  extern volatile byte numNotes;
  92      =1  extern volatile byte nextNote;
  93      =1  
  94      =1  extern volatile byte bdata midiFlags;
  95      =1  //state flags -- maybe change to sbit????
  96      =1  extern bit AUDIO_L_ON;  
  97      =1  extern bit TX_VCC_ON;   
  98      =1  extern bit STEREO;              
  99      =1  extern bit PLAYING;             
 100      =1  extern bit BUTT_EN;             
 101      =1  extern bit OMNI;                
 102      =1  extern bit SONG_DONE;   
 103      =1  //extern bit SYS_EX_DONE;
 104      =1  
 105      =1  extern volatile byte periodH0;
 106      =1  extern volatile byte periodL0;
 107      =1  extern volatile byte periodH1;
 108      =1  extern volatile byte periodL1;
 109      =1  extern volatile word lDelta;   //a proportion of sorts
 110      =1  extern volatile word txDelta;
 111      =1  extern volatile bit deltaLUp;
 112      =1  extern volatile bit deltaTxUp;
 113      =1  //extern volatile byte deltaLMount; 
 114      =1  //extern volatile byte deltaTxMount;
 115      =1  
 116      =1  extern volatile bit txOffSwitch;
 117      =1  extern word station;
 118      =1  
 119      =1  /****************************PROTOS*********************/
 120      =1  void setup ();  //name and turn on
 121      =1  void delay (word cnt);
 122      =1  void shiftout8 (byte d);
 123      =1  //      void shiftout16 (word d);
 124      =1  //      void shiftout32 (word dh, word dl);
 125      =1  void txProg ();
 126      =1  void setFreq (word freq);
 127      =1  void delayT (word t);
 128      =1  void updateNote(void);
 129      =1  /************************EMPTY Protos****************/  
 130      =1  
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 25  

 131      =1  
 132      =1  /******************PIN NAMES****************************/       
 133      =1  sbit txVcc = P2^7;
 134      =1  sbit txData = P2^2;
 135      =1  sbit txClk = P2^3;
 136      =1  sbit LED = P2^5;
 137      =1  sbit CE = P2^4;
 138      =1  sbit midButt = P0^0;
 139      =1  sbit hiButt = P0^1;
 140      =1  sbit loButt = P0^2;
 141      =1  sbit audioL = P0^3;
 142      =1  sbit audioN = P0^4;     //must be soldered and AC coupled (DC blocked) with 1 uF
 143      =1  //sbit LEDout = P2
 144      =1  #endif
  14          #include "riff.h"
   1      =1  #ifndef RIFF_H
   2      =1  #define RIFF_H
   3      =1  
   4      =1  //utility riffs
   5      =1  extern unsigned char code sthRest[5];
   6      =1  extern unsigned char code eiRest[5];
   7      =1  extern unsigned char code qRest[5];
   8      =1  extern unsigned char code hRest[5];
   9      =1  extern unsigned char code wRest[5];
  10      =1  
  11      =1  //single Piteches plus switches
  12      =1  #define MINORDRONE_ROOT         29
  13      =1  #define WHOLEDRONE_ROOT         30
  14      =1  extern unsigned char code wholeDrone[5];
  15      =1  extern unsigned char code minorDrone[5];
  16      =1  
  17      =1  //COORD UTIL
  18      =1  #define RECO_S  (2+1)
  19      =1  extern unsigned char code sthRestCoord[RECO_S];
  20      =1  extern unsigned char code eiRestCoord[RECO_S];
  21      =1  extern unsigned char code qRestCoord[RECO_S];
  22      =1  extern unsigned char code hRestCoord[RECO_S];
  23      =1  extern unsigned char code wRestCoord[RECO_S]; //one empty bar
  24      =1  
  25      =1  #define CRTLTX_S        (4+1)
  26      =1  extern unsigned char code on0Tx[CRTLTX_S];
  27      =1  extern unsigned char code on2Tx[CRTLTX_S];
  28      =1  extern unsigned char code on4Tx[CRTLTX_S];
  29      =1  extern unsigned char code on6Tx[CRTLTX_S];
  30      =1  extern unsigned char code on8Tx[CRTLTX_S];
  31      =1  extern unsigned char code on10Tx[CRTLTX_S];
  32      =1  extern unsigned char code on12Tx[CRTLTX_S];
  33      =1  extern unsigned char code on14Tx[CRTLTX_S];
  34      =1  
  35      =1  extern unsigned char code off0Tx[CRTLTX_S];
  36      =1  extern unsigned char code off2Tx[CRTLTX_S];
  37      =1  extern unsigned char code off4Tx[CRTLTX_S];
  38      =1  extern unsigned char code off6Tx[CRTLTX_S];
  39      =1  extern unsigned char code off8Tx[CRTLTX_S];
  40      =1  extern unsigned char code off10Tx[CRTLTX_S];
  41      =1  extern unsigned char code off12Tx[CRTLTX_S];
  42      =1  extern unsigned char code off14Tx[CRTLTX_S];
  43      =1  
  44      =1  //special riffs
  45      =1  
  46      =1  ///////////COORD SONG////////////////
  47      =1  /*
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 26  

  48      =1          Spec for COORD song
  49      =1          word songLen, byte???,
  50      =1          word riffAddy, byte repeats... 
  51      =1  */
  52      =1  /*
  53      =1          spec for COORD riff
  54      =1          byte deltaPos, byte MIDI / CC+Ch, byte val
  55      =1                                     o
  56      =1                                     MIDI / Sys or RT,
  57      =1                                     o
  58      =1                                     tempo [hiNibble] val [loNibble], 2 bytes
  59      =1                                     [e.g. 0x7F, 0xF3, 0xFF -> cnt0 = 0f, periodH0 = f3, periodL0 = ff
  60      =1          ideal 77160 [0x12D68] is 120 bpm <- theres a mystery factor of two, but thats a godd thing!!!!
  61      =1          Tempo and future file meta events...  
  62      =1          we reserve the high nibble for meta events
  63      =1          and the low nibble for data...
  64      =1          Meta events are sparse and easily mapped and
  65      =1          even extended to 8 states... (high bit is for real midi)
  66      =1  */
  67      =1  
  68      =1  /////////////WORKER SONG//////////////////
  69      =1  /*
  70      =1  Spec for song:
  71      =1  
  72      =1    word songLen, byte ???,
  73      =1    (word) riffAddress, byte repeats,      (riff_t)
  74      =1    (word) riffAddress, byte repeats,
  75      =1    ... 
  76      =1  */
  77      =1  /*
  78      =1  Spec for riff:
  79      =1  
  80      =1          byte riffLen,
  81      =1          byte deltaSongPos, byte 0-126 Notes [ 127 = NoteOff, 0x80 = V_Chan ]
  82      =1          byte deltaSongPos, byte 0-126 Notes [ 127 = NoteOff, 0x80 = V_Chan ]
  83      =1          ...
  84      =1  */
  85      =1  
  86      =1  #define BEAT_ROOT       (48)
  87      =1  #define BEAT1_TEMPO     (0x6f00/2)  //240
  88      =1  #define BEAT2_TEMPO     (0x6f00/4)  //240
  89      =1  #define BEATCOORD1_S    (69)
  90      =1  #define BEAT1_S         3
  91      =1  extern unsigned char code beatCoord1[BEATCOORD1_S];
  92      =1  extern unsigned char code beatCoord2[BEATCOORD1_S];
  93      =1  extern unsigned char code beat1[BEAT1_S];
  94      =1  
  95      =1  //Driving me back...
  96      =1  #define DMB_ROOT        (25) //C# - yeah we in tune!
  97      =1  #define DMB_PEDAL       (DMB_ROOT-1)
  98      =1  #define DMB_TEMPO       (0x20B61) //~69-70 BPM 0x20B61
  99      =1  
 100      =1  #define DMBINIT_S       37
 101      =1  extern unsigned char code dmbInit[37];//tempo ... does pickup!!!
 102      =1  
 103      =1  #define DMBVAMP_S       (4+1)
 104      =1  extern unsigned char code dmbVamp0[DMBVAMP_S]; //sans downbeat
 105      =1  extern unsigned char code dmbVamp1[DMBVAMP_S]; //cum downbeat
 106      =1  
 107      =1  #define DMBROOT_S       ((104-72)*4+1)
 108      =1  extern unsigned char code dmbRoot0[DMBROOT_S]; //sans downbeat
 109      =1  extern unsigned char code dmbRoot1[DMBROOT_S];
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 27  

 110      =1  
 111      =1  #define DMBBD_S         7       
 112      =1  extern unsigned char code dmbBDHa[DMBBD_S];
 113      =1  extern unsigned char code dmbBDWh[DMBBD_S];
 114      =1  
 115      =1  #define TEST_LEN        10//easier to parse later
 116      =1  extern unsigned char code downR1[];
 117      =1  extern unsigned char code downR2[];
 118      =1  extern unsigned char code downR3[];
 119      =1  extern unsigned char code downR4[];
 120      =1  extern unsigned char code downR5[];
 121      =1  
 122      =1  extern unsigned char code upR1[];
 123      =1  extern unsigned char code upR2[];
 124      =1  extern unsigned char code upR3[];
 125      =1  extern unsigned char code upR4[];
 126      =1  extern unsigned char code upR5[];
 127      =1  
 128      =1  
 129      =1  extern unsigned char code testCo1[];
 130      =1  extern unsigned char code testCo1b[];
 131      =1  extern unsigned char code testCo2[];
 132      =1  
 133      =1  extern unsigned char code testCo3[];
 134      =1  extern unsigned char code testCo3b[];
 135      =1  extern unsigned char code testCo3c[];
 136      =1  
 137      =1  extern unsigned char code testCo4[];
 138      =1  
 139      =1  /*
 140      =1  #define SAUCER_VOLCANO_SONG_SIZE 3
 141      =1  SONG_T saucerVolcano[SAUCER_VOLCANO_SONG_SIZE] = {
 142      =1          (word) saucer1, 8-1, SAUCER_SIZE/2
 143      =1  //      (word) volcano1, 2-1, VOLCANO_SIZE/2
 144      =1  };
 145      =1  
 146      =1  #define HEAVY_11_SONG_SIZE 6      
 147      =1  volatile word code heavy1Song[6] = {
 148      =1          (word) heavy111, 4 - 1, HEAVY_11_SIZE/2,        //4*11
 149      =1          (word) heavy121, 1 - 1, HEAVY_12_SIZE/2         //1*22
 150      =1  };
 151      =1  
 152      =1  volatile word code heavy2Song[6] = {
 153      =1          (word) heavy112, 4 - 1, HEAVY_11_SIZE/2,
 154      =1          (word) heavy122, 1 - 1, HEAVY_12_SIZE/2
 155      =1  };
 156      =1  
 157      =1  #define DRIVE_BACK_SONG0_SIZE 3   
 158      =1  volatile word code driveBackSong0[3] = {
 159      =1          (word) driveBack0, 48 - 1, DRIVE_BACK_0SIZE/2
 160      =1  };
 161      =1  
 162      =1  #define DRIVE_BACK_SONG1_SIZE 3
 163      =1  volatile word code driveBackSong1[3] = {
 164      =1          (word) driveBack1, 48 - 1, DRIVE_BACK_1SIZE/2   
 165      =1  };
 166      =1  
 167      =1  #define DRIVE_BACK_SONG2_SIZE 3   
 168      =1  volatile word code driveBackSong2[3] = {
 169      =1          (word) driveBack2, 256 - 1, DRIVE_BACK_2SIZE/2
 170      =1  };
 171      =1  
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 28  

 172      =1  #define DRIVE_BACK_SONG3_SIZE 3   
 173      =1  volatile word code driveBackSong3[3] = {
 174      =1          (word) driveBack3, 256 - 1, DRIVE_BACK_3SIZE/2
 175      =1  };
 176      =1  
 177      =1  #define FIRST_SONG_SIZE 24
 178      =1  volatile word code firstSong[FIRST_SONG_SIZE] = {
 179      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 180      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 181      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 182      =1          (word) oneRockMod, 3-1, ONEROCKMOD_SIZE/2, //8 - 24     
 183      =1          (word) fourFloor, 2 - 1, FOURFLOOR_SIZE/2,       //4 - 8
 184      =1          (word) fourFloorTX, 2 - 1, FOURFLOORTX_SIZE/2,   //4 - 8
 185      =1          (word) fourFloor, 2 - 1, FOURFLOOR_SIZE/2,       //4 - 8
 186      =1          (word) fourFloorTX, 2 - 1, FOURFLOORTX_SIZE/2    //4 - 8
 187      =1  };
 188      =1  
 189      =1  #define SEC_SONG_SIZE   24 
 190      =1  volatile word code secSong[SEC_SONG_SIZE] = {
 191      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 192      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 193      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 194      =1          (word) oneRockMod, 2-1, ONEROCKMOD_SIZE/2, //8 - 8      
 195      =1          (word) fourFloor, 2 - 1, FOURFLOOR_SIZE/2,       //4 - 8
 196      =1          (word) fourFloorTX, 2 - 1, FOURFLOORTX_SIZE/2,   //4 - 8
 197      =1          (word) fourFloor, 2 - 1, FOURFLOOR_SIZE/2,       //4 - 8
 198      =1          (word) fourFloorTX, 3 - 1, FOURFLOORTX_SIZE/2    //4 - 8
 199      =1  };
 200      =1  #endif
 201      =1  
 202      =1  SONG_T testSong[6] = {
 203      =1          (word) test, 1-1, TEST_SIZE/2,
 204      =1          (word) test, 1-1, TEST_SIZE/2
 205      =1  };
 206      =1  
 207      =1  //begin thumpDream song - not sure about freqs - maybe add high pitch drone?
 208      =1  #define THUMP1_SONG_SIZE        6        
 209      =1  SONG_T thump1Song[THUMP1_SONG_SIZE] = {
 210      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 211      =1          (word) thumpFall8, 4 - 1, THUMP_FALL8_SIZE/2     //4 - 16
 212      =1  };
 213      =1  
 214      =1  #define THUMP2_SONG_SIZE 18      
 215      =1  SONG_T thump2Song[THUMP2_SONG_SIZE] = {
 216      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 217      =1          (word) thumpFall8, 4 - 1, THUMP_FALL8_SIZE/2,    //4 - 16
 218      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 219      =1          (word) thump2, 4 - 1, THUMP_2_SIZE/2,    //4 - 16
 220      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 221      =1          (word) thump2, 4 - 1, THUMP_2_SIZE/2     //4 - 16
 222      =1  };
 223      =1  
 224      =1  #define THUMP3_SONG_SIZE 24      
 225      =1  SONG_T thump3Song[THUMP3_SONG_SIZE] = {
 226      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 227      =1          (word) thumpFall8, 4 - 1, THUMP_FALL8_SIZE/2,    //4 - 16
 228      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 229      =1          (word) thumpFall8, 4 - 1, THUMP_FALL8_SIZE/2,    //4 - 16
 230      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 231      =1          (word) thump3, 4 - 1, THUMP_3_SIZE/2,    //4 - 16
 232      =1                  (word) thumpThump, 4 - 1, THUMP_THUMP_SIZE/2, //4 - 16
 233      =1          (word) thump3, 4 - 1, THUMP_3_SIZE/2     //4 - 16
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 29  

 234      =1  };
 235      =1  
 236      =1  //Begin altSong - space two songs at 3 freqs - slowish interlocking riffage 
 237      =1  #define FIR_SONG_ALT_SIZE       15
 238      =1  volatile word code firSongAlt[FIR_SONG_ALT_SIZE] = {
 239      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 240      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 241      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 242      =1          (word) oneRockMod, 3-1, ONEROCKMOD_SIZE/2, //8 - 16
 243      =1          (word) oneRockB, 8-1, ONEROCKB_SIZE/2      //4 - 32
 244      =1  };
 245      =1  
 246      =1  #define SEC_SONG_ALT_SIZE       18 
 247      =1  volatile word code secSongAlt[SEC_SONG_ALT_SIZE] = {
 248      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 249      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 250      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 251      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 252      =1          (word) oneRockMod, 2-1, ONEROCKMOD_SIZE/2, //8 - 8
 253      =1          (word) twoRockB, 8-1, TWOROCKB_SIZE/2      //4 - 32
 254      =1  };
 255      =1  
 256      =1  #define THI_SONG_ALT_SIZE       18 
 257      =1  volatile word code thiSongAlt[THI_SONG_ALT_SIZE] = {
 258      =1          (word) oneRockB, 10-1, ONEROCKB_SIZE/2,    //4 - 40
 259      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 260      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 261      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 262      =1          (word) twoRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 263      =1          (word) oneRockMod, 1-1, ONEROCKMOD_SIZE/2 //8 - 8
 264      =1  };
 265      =1  
 266      =1  
 267      =1  #define FOR_SONG_ALT_SIZE       18 
 268      =1  volatile word code forSongAlt[FOR_SONG_ALT_SIZE] = {
 269      =1          (word) twoRockB, 10-1, TWOROCKB_SIZE/2,    //4 - 40
 270      =1          (word) twoRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 271      =1          (word) oneRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 272      =1          (word) twoRockMod, 1-1, ONEROCKMOD_SIZE/2, //8 - 8
 273      =1          (word) oneRockMod, 1-1, TWOROCKMOD_SIZE/2, //8 - 8
 274      =1          (word) twoRockMod, 1-1, ONEROCKMOD_SIZE/2 //8 - 8
 275      =1  };
 276      =1  */
 277      =1  #endif
  15          #include "song.h"
   1      =1  #ifndef SONG_H
   2      =1  #define SONG_H
   3      =1  
   4      =1  #define NUM_SONGS       7
   5      =1  
   6      =1  //heavy Beats!!!
   7      =1  extern RIFF_T code beatSong[];
   8      =1  
   9      =1  //Our body
  10      =1  
  11      =1  //droneStrike
  12      =1  
  13      =1  //omes
  14      =1  
  15      =1  //whole tone scale
  16      =1  extern RIFF_T code wholeToneSong[];
  17      =1  
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 30  

  18      =1  //minor
  19      =1  extern RIFF_T code minorSong[];
  20      =1  
  21      =1  //silence 
  22      =1  extern RIFF_T code silentSong[];
  23      =1  
  24      =1  //driving me backwards!!!!!
  25      =1  extern RIFF_T code dmbSong[];
  26      =1  
  27      =1  #define TEST_SS1 6+1
  28      =1  extern RIFF_T code testS1[TEST_SS1];
  29      =1  
  30      =1  #define TEST_SS2 6+1
  31      =1  extern RIFF_T code testS2[TEST_SS2];
  32      =1  
  33      =1  extern RIFF_T code testSCo1[7];
  34      =1  
  35      =1  extern RIFF_T code testSCo2[3];
  36      =1  
  37      =1  #endif
  16          
  17          /******************************* GLOBALS**************************************/
  18          volatile byte xdata sysEx[SYS_LEN];
  19          volatile byte sysIx = 0;
  20          
  21          ///////////all songs....   //drive song selection from here...
  22          
  23          void* code songBook[NUM_SONGS] = {
  24                  silentSong,
  25                  testS1,////testSCo1,//
  26                  testS2,////testSCo2,//
  27                  minorSong,
  28                  wholeToneSong,
  29                  beatSong,
  30                  dmbSong
  31          };
  32          
  33          volatile byte songNum = 0; 
  34          volatile word midiClk = 0;
  35          
  36          //state flags -- maybe change to sbit????
  37          volatile byte bdata midiFlags;
  38          sbit AUDIO_L_ON = midiFlags^0;  //(0x01)        //allow wiggling the Laudio (attached to noteOn and sequencer)
  39          sbit TX_VCC_ON = midiFlags^1;   //(0x02)        //allow wiggle the txVCC        (attached to noteOn and sequencer)
  40          sbit STEREO = midiFlags^2;              //(0x04)        //keep track of tx number of channels
  41          sbit PLAYING = midiFlags^3;             //(0x08)        //am I playing now?  //not Ignoring midiClk
  42          sbit BUTT_EN = midiFlags^4;             //(0x10)        //todo test
  43          sbit OMNI = midiFlags^5;                //(0x20)        //todo ?test
  44          sbit SONG_DONE = midiFlags^6;   //0x40
  45          sbit LOOP_SONGS = midiFlags^7;  //instead of naziMidi stop...  just one?  everyone??  deviant!!!
  46          
  47          
  48          //try moving to locals!!!
  49          //#define NUM_RIFFS HEAVY_11_SONG_SIZE//SAUCER_VOLCANO_SONG_SIZE//THUMP1_SONG_SIZE//3//FOR_SONG_ALT_SIZE//
             -FIRST_SONG_ALT_SIZE//THIRD_SONG_SIZE//
  50          volatile RIFF_T* curSong;
  51          volatile word nextRiff = 0;
  52          volatile byte curRiffCnt = 0;
  53          volatile word numRiffs = 0;
  54          volatile byte code* riff;
  55          //deltaSongPos ... just ... cant..  be ...  a ...  byte....
  56          volatile word deltaPos = 0;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 31  

  57          volatile byte numNotes = 0;
  58          volatile byte nextNote = 0;
  59          
  60          //end exclusive defines
  61          #define SPEED_DIV       1
  62          #define FREQ_START      879
  63                                     
  64          
  65          //timing globals
  66          //REMEMBER!!!  these are up timers... period = 0x0 - values...
  67          //tempo or txVcc pitch
  68          volatile byte periodH0 = 0; 
  69          volatile byte periodL0 = 0;   
  70          volatile byte cnt0 = 0;
  71          volatile byte temp0 = 0;
  72          
  73          //pitch
  74          volatile byte periodH1 = 0; 
  75          volatile byte periodL1 = 0;
  76          
  77          volatile word lDelta = 0;
  78          volatile word txDelta = 0;
  79          volatile bit deltaLUp;
  80          volatile bit deltaTxUp;
  81          
  82          /****************************BH141* instruction*******************************/
  83          
  84          volatile word bdata txState;
  85          sbit stereoTx = txState^3;
  86          sbit phaseMode0 = txState^4;
  87          sbit phaseMode1 = txState^5;
  88          sbit test0 = txState^6;
  89          sbit test1 = txState^7;
  90          
  91          volatile bit txOffSwitch = 0; 
  92          
  93          volatile word station = FREQ_START;
  94          
  95          /***********************************8MAIN????????????????????????*****************/
  96          void main() {   
  97   1      /**************LOCALS****************************/
  98   1              byte i = 0;
  99   1      /**************SETUP++***************************************/
 100   1              setup();
 101   1              txVcc = 0; //on
 102   1              setFreq(station);
 103   1              uart_init();                                                                                     
 104   1              //init first song... just incase its the first one we play
 105   1              //nextRiff = 0; //to be explicit
 106   1              curSong = songBook[songNum];
 107   1              numRiffs = (curSong[nextRiff]).rAddy;  //grab song length!  update will inc nextRiff!!!
 108   1              EA = 1;
 109   1              BUTT_EN = 1;
 110   1      #ifdef COORD
                      TR0 = 0;
                      TR1 = 0;
              //      while (1) {
              //              uart_transmit(CONTROL);
              //              uart_transmit(GENERAL_SLIDER_1_lo);
              //              uart_transmit((i++ << 5) & ~(0x80));
              //              delay(1000);
              //      }
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 32  

                      //makes for a happy synth!!!!
                      delay(50000);
                      uart_transmit(SONG_SELECT);
                      uart_transmit(songNum);
                      delay(50000);
                      for (i = 0; i < 16; i += 2) {
                              uart_transmit(CONTROL+i);
                              uart_transmit(GENERAL_SLIDER_1_lo);
                              uart_transmit(STATION_TO_LO(FREQ_START));
                              delay(1000);
                              uart_transmit(CONTROL+i);
                              uart_transmit(GENERAL_SLIDER_1_hi);
                              uart_transmit(STATION_TO_HI(FREQ_START));
                              delay(1000);
                              uart_transmit(CONTROL+i);
                              uart_transmit(GENERAL_BUTTON_1_on);
                              uart_transmit(127);
                      }
                      LED = 0;
              #else
 139   1              delay(65000);
 140   1              delay(65000);
 141   1              TR1 = 1;
 142   1              TR0 = 1;
 143   1      #endif
 144   1      /****************LOOP*****************************************/
 145   1              for(;;) {
 146   2      #ifdef COORD
                              txVcc = 1; //assert tx off...
                              if (BUTT_EN == 1) {
                                      if (midButt == 0) {  //debounced midButt switches COORD's PLAYING
                                              delay(50000);     //cant functionalize this says the internet...
                                              if (midButt == 0) {
                                                      delay(50000);
                                                      if(midButt == 0) {
                                                              if (PLAYING) { //we are already playing
                                                                      uart_transmit(STOP);
                                                                      PLAYING = 0;
                                                              } else if (midiClk == 0) { //we were playing once
                                                                      curSong = songBook[songNum];
                                                                      nextRiff = 0;
                                                                      deltaPos = 0; //trigger update
                                                                      numRiffs = (curSong[nextRiff]).rAddy;  //grab song length!  dont inc it.. update will
                                                                      uart_transmit(SONG_SELECT);
                                                                      uart_transmit(songNum);
                                                                      uart_transmit(START);
                                                                      PLAYING = 1;
                                                                      curRiffCnt = 0;
                                                                      numNotes = 0;
                                                                      nextNote = 0;
                                                              } else {
                                                                      uart_transmit(CONTINUE);
                                                                      PLAYING = 1;
                                                              }
                                                      }
                                              }
                                              LED = PLAYING;
                                              TR0 = PLAYING;
                                              //TR1 = PLAYING;
                                              delay(50000);
                                      } else if (hiButt == 0) {        //switch to previous song
                                              delay(50000);     //cant functionalize this says the internet...
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 33  

                                              if (hiButt == 0) {
                                                      delay(50000);
                                                      if(hiButt == 0) {
                                                              LED = 1;
                                                              delay(50000);
                                                              if (++songNum >= NUM_SONGS) {    //have we gone past song 0 or 127?
                                                                      songNum = NUM_SONGS-1;
                                                              }
                                                              midiClk = 0;
                                                              PLAYING = 0;
                                                              TR0 = 0;
                                                              //TR1 = 0;
                                                              uart_transmit(STOP);
                                                              uart_transmit(SONG_SELECT);
                                                              uart_transmit(songNum);
                                                              curSong = songBook[songNum];
                                                              nextRiff = 0;
                                                              deltaPos = 0; //trigger update
                                                              numRiffs = (curSong[nextRiff]).rAddy;  //grab song length!  dont inc it.. update will
                                                              curRiffCnt = 0;
                                                              numNotes = 0;
                                                              nextNote = 0;
                                                              LED = 0;
                                                      }
                                              }
                                              delay(50000);
                                      } else if (loButt == 0) {       //switch to previous song
                                              delay(50000);     //cant functionalize this says the internet...
                                              if (loButt == 0) {
                                                      delay(50000);
                                                      if(loButt == 0) {
                                                              LED = 1;
                                                              delay(50000);
                                                              if (--songNum > 127) {  //have we gone past song 0 or 127?
                                                                      songNum = 0;
                                                              }
                                                              midiClk = 0;
                                                              PLAYING = 0;
                                                              TR0 = 0;
                                                              //TR1 = 0;
                                                              uart_transmit(STOP);
                                                              uart_transmit(SONG_SELECT);
                                                              uart_transmit(songNum);
                                                              curSong = songBook[songNum];
                                                              nextRiff = 0;
                                                              deltaPos = 0; //trigger update
                                                              numRiffs = (curSong[nextRiff]).rAddy;  //grab song length!  dont inc it.. update will
                                                              curRiffCnt = 0;
                                                              numNotes = 0;
                                                              nextNote = 0;
                                                              LED = 0;
                                                      }
                                              }
                                              delay(50000);
                                      }
                              }
              
              #else
 239   2              if (curSong != songBook[songNum]) {
 240   3                      curSong = songBook[songNum];
 241   3                      midiClk = 0;
 242   3                      nextRiff = 0;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 34  

 243   3                      deltaPos = 0; //trigger update
 244   3                      numRiffs = (curSong[nextRiff]).rAddy;  //grab song length!  dont inc it.. update will           
 245   3              } else {
 246   3              //low priority stuff
 247   3              //todo add a flag to loop songs???  fuck midi....
 248   3      #ifdef BASIC_TX
 249   3                      if (midButt == 0) {
 250   4      //                      LED ^= 1;
 251   4                              txVcc ^= 1;
 252   4                              if(txVcc == 1) {
 253   5                                      txOffSwitch = 1;
 254   5                                      LED = 0;
 255   5                              } else {
 256   5                                      txOffSwitch = 0;
 257   5                                      LED = 1;
 258   5                                      setFreq(station);
 259   5                              } 
 260   4                      }                       
 261   3                      delay(UINT_MAX);
 262   3                      if (LED) {
 263   4                              if (hiButt == 0) {
 264   5                                      LED = 0;
 265   5                                      delay(UINT_MAX);
 266   5                                      station++;
 267   5                                      setFreq(station);
 268   5                                      LED = 1;
 269   5                                      delay(UINT_MAX);
 270   5                              } 
 271   4                              else if (loButt == 0) {
 272   5                                      LED = 0;
 273   5                                      delay(UINT_MAX);
 274   5                                      --station;
 275   5                                      setFreq(station);
 276   5                                      LED = 1;
 277   5                                      delay(UINT_MAX);
 278   5                              }
 279   4                              if (station < MIN_FREQ) {
 280   5                                      station = MIN_FREQ;
 281   5                                      LED = 0;
 282   5                                      delay(UINT_MAX);
 283   5                                      LED = 1;
 284   5                                      delay(UINT_MAX);
 285   5                                      LED = 0;
 286   5                                      delay(UINT_MAX);
 287   5                                      LED = 1;
 288   5                                      delay(UINT_MAX);
 289   5                                      LED = 0;
 290   5                                      delay(UINT_MAX);
 291   5                                      LED = 1;
 292   5                                      delay(UINT_MAX);
 293   5                                      LED = 0;
 294   5                                      delay(UINT_MAX);
 295   5                                      LED = 1;
 296   5                                      delay(UINT_MAX);
 297   5                              }
 298   4                              if (station > MAX_FREQ) {
 299   5                                      station = MAX_FREQ;
 300   5                                      LED = 0;
 301   5                                      delay(UINT_MAX);
 302   5                                      LED = 1;
 303   5                                      delay(UINT_MAX);
 304   5                                      LED = 0;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 35  

 305   5                                      delay(UINT_MAX);
 306   5                                      LED = 1;
 307   5                                      delay(UINT_MAX);
 308   5                                      LED = 0;
 309   5                                      delay(UINT_MAX);
 310   5                                      LED = 1;
 311   5                                      delay(UINT_MAX);
 312   5                                      LED = 0;
 313   5                                      delay(UINT_MAX);
 314   5                                      LED = 1;
 315   5                                      delay(UINT_MAX);
 316   5                              }                                                 
 317   4                      }
 318   3      #endif
 319   3              }
 320   2      #endif
 321   2              }
 322   1      }
 323          /*******************SETUP FUNCTION*********************/
 324          void setup() {
 325   1      
 326   1              P0M1 = 0x07;     //input for buttons and audioN, push pull for audioL
 327   1              P0M2 = 0x08;
 328   1              P1M1 = 0;               //uart_init takes care of TX/RX
 329   1      //      P1M2 |= 0x04;   //configure t0 [p1^2] as push pull
 330   1              P2M1 = 0;               
 331   1              P3M1 = 0;
 332   1              midButt = 1; //pull up resistors on the button inputs
 333   1              hiButt = 1;
 334   1              loButt = 1;
 335   1              LED = 1;        //LED on
 336   1              txVcc = 1;      //transmitter off
 337   1              CE = 0;         //serial input inable for transmitter
 338   1              stereoTx = STEREO;
 339   1              audioL = 0;
 340   1              test0 = 1;      //always
 341   1              test1 = 0;      //always
 342   1              phaseMode0 = 0; //?
 343   1              phaseMode1 = 0; //?
 344   1      
 345   1      #ifdef DAC1_OUT
                      //configure DAC1 out
                        // set dac1 pin to input only (disables digital output)
                      P0M1 |= 0x10;
                      P0M2 &= ~0x10;
                      // init dac1 value to zero
                      AD1DAT3 = 0x00;
                      // enable dac1 output
                      ADMODB |= 0x08;
                      // enable adc1 (also enables dac1)
                      ADCON1 |= 0x04;
              #endif
 357   1      
 358   1                // configure timers
 359   1      
 360   1              TMOD &= 0x00;    //clear conf for timers
 361   1      
 362   1              TAMOD &= 0xEE;   //clear conf for timers
 363   1              TMOD |= 0x11;    //16bit mode for both
 364   1      
 365   1              //TAMOD |= 0x10;
 366   1              periodH1 = 0;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 36  

 367   1              periodL1 = 0;
 368   1              // timer values                 
 369   1              TH0 = 0;
 370   1              TL0 = 0;
 371   1              
 372   1              TH1 = periodH1;
 373   1              TL1 = periodL1;
 374   1      //#ifdef COORD   //didnt work
 375   1      //      //chain the timers with GPIO toggling
 376   1      //      TMOD |= 0x04;  //set up t0 as a counter
 377   1      //#endif
 378   1              //timer 0 interrupt is higher than timer 1 thus timer 0 is tempo and t1 is pitch
 379   1      #ifdef COORD
                      //set timer0 priority to 2, below tx
                      IP0 &= ~(0x02);
                      IP0H &= ~(0x02);
              #endif
 384   1              // set timer 1 isr priority to 2 and timer 0 to priority 3
 385   1      
 386   1              IP0 &= ~(0x80);
 387   1              IP0H &= ~(0x00);
 388   1              //  // enable timer 1 interrupt
 389   1      
 390   1              ET1 = 1;
 391   1              ET0 = 1;
 392   1      
 393   1              // start timers
 394   1      
 395   1              //TR1 = 1;
 396   1              //TR0 = 1;
 397   1      //      LEDout = 0;
 398   1              //adc_init();
 399   1      }       
 400          /*********************TIMER interrupts****************************/
 401          
 402          void timers_isr1 (void) interrupt 3 using 2
 403          {
 404   1      #ifdef COORD
                              //reload with som const todo
                              //todo explore 8 bit timer mode
              //              TH1 = 0xfe;//periodH1;
                              //TL1 = periodL1;       //is 0xff - the following
              //              TL1 = 0x2e; // we think is close to 256us
                              //TL0++; //didint work....
                              //TL0 = TL0 + 1; //didnt work either...
                              //T0 = 0;
              //              P1^2 ^= 1; //also didnt work in conjunction with count mode...
                              //todo test...
              #else
 416   1                      //reload
 417   1                      TH1 = periodH1; //remember this only counts up!!!!
 418   1                      TL1 = periodL1;
 419   1                      //generate square waves
 420   1                      _nop_(); //matching cycles to t0 rupt
 421   1                      _nop_();
 422   1                      _nop_();
 423   1                      if(AUDIO_L_ON) { //could play with nops here
 424   2                              audioL ^= 1; 
 425   2                      }
 426   1      #endif
 427   1      }
 428          
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 37  

 429          void timers_isr0 (void) interrupt 1 using 3
 430          {
 431   1      #ifdef COORD
                              if (cnt0-- == 0) {
                                      uart_transmit(TIMING_CLOCK);
                                      ++midiClk;
                                      if (deltaPos == 0) {
                                              updateNote();
                                      } else { //parse song
                                              --deltaPos;             
                                      }
                                      cnt0 = temp0;
                                      TH0 = periodH0;
                                      TL0 = periodL0; 
                              } else {
                                      TH0 = 0;
                                      TL0 = 0;
                              }
              #else
 448   1                      //reload
 449   1                      TH0 = periodH0;
 450   1                      TL0 = periodL0;
 451   1                      //generate square waves
 452   1                      if (!txOffSwitch) {
 453   2                              if(TX_VCC_ON) {
 454   3                                      txVcc ^= 1;
 455   3                              } else {
 456   3                                      txVcc = 0; //keep the transmitter ON!!!
 457   3                              }
 458   2                      } else {
 459   2                              txVcc = 1; //tx OFF!  station???
 460   2                      }
 461   1      #endif
 462   1      }
 463          
 464          void updateNote(void) {
 465   1              byte temp, temp2;
 466   1              word thisDelta = 0;
 467   1              bit thisUp = 0, VnotL = 0;;
 468   1      UPDATE_NOTE:
 469   1              if (nextNote >= numNotes) {      //equal to catches init!!!
 470   2                      nextNote = 1; //skip the riff len header
 471   2                      if (curRiffCnt-- == 0) {
 472   3                              if (++nextRiff == numRiffs) { //next riff is newRiff
 473   4                                      //end of SONG!!!!
 474   4                                      PLAYING = 0; //midi says stop
 475   4                                      midiClk = 0;
 476   4                                      LED = 0;
 477   4                                      //going silent for the moment
 478   4                                      AUDIO_L_ON = 0;
 479   4                                      TX_VCC_ON = 0;
 480   4                                      //ensure that we always fall through to this point
 481   4                                      nextRiff = numRiffs - 1;
 482   4                                      curRiffCnt = 0;
 483   4                                      nextNote = numNotes;
 484   4                                      SONG_DONE = 1;
 485   4      #ifdef COORD
                                              uart_transmit(STOP);
                                              TR0 = 0;  //stop playing
                                              //TR1 = 0;      
              #endif
 490   4                              } else {
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 38  

 491   4                                      riff = (byte*) (curSong[nextRiff]).rAddy;//grab the physical addy of first riff
 492   4                                      curRiffCnt = (curSong[nextRiff]).repeats;//grabs number of time riff repeats  
 493   4                                      numNotes = riff[0];                             //grab the length of the riff
 494   4                              }
 495   3                      }
 496   2              }
 497   1              deltaPos = riff[nextNote++];                            //grab deleta T for note
 498   1              temp = (riff[nextNote++]);                              //nextNote is now next note
 499   1      #ifdef COORD
                      //this can likely be very much more optomized!!!!!  todo
                      if (PLAYING) {
                              if (temp & 0x80) {
                                      if (temp < 0xf0) { 
                                              switch (temp & 0xf0) { //find CC and PC and the future todos...
                                              
                                                      case CONTROL:
                                                              
                                                              temp2 = riff[nextNote++]; 
                                                              switch(temp2) { //this could become a big switch!!!
                                                                      
                                                                      case GENERAL_BUTTON_1_on:
                                                                              //delay(900); //didnt help with bad sync on txToggle
                                                                      case GENERAL_SLIDER_1_hi: //todo keep thinking about 14 bit values...
                                                                      case GENERAL_SLIDER_1_lo:
                                                                      default:
                                                                              uart_transmit(temp);
                                                                              uart_transmit(temp2);
                                                                              uart_transmit(riff[nextNote++]);
                                                                      break;
                      
                      //                                              case SOUND_RELEASE_TIME: //todo a sustain structure!
                      //                                              break;
                      
                                                              }
                                                              break;
                                      
                                                      case PROGRAM:
                                                      case PITCH_WHEEL:
                                                      case NOTE_ON:
                                                      case NOTE_OFF:
                                                      case CHAN_PRESSURE:
                                                      case KEY_PRESSURE:
                                                      default:
                                                              break;
                                              }
                                      } else {
                                              switch (temp) {
                                                      case SYSTEM_EXCLUSIVE: // variable length until terminated by an EOX or any status byte
                                                              sysIx = 0;
                                                              //todo in COORD/file sysEx
                                                              //uart_transmit(temp);
                                                      break;
                              
                                              case SONG_POSITION: //beam out the 14-16 bit songPos  LSB first
              //                                              uart_transmit(temp);
              //                                              uart_transmit(riff[nextNote++]);
              //                                              uart_transmit(riff[nextNote++]);
                                                              //todo COORD scan and fix for everybody...
                                                      break;
                              
                                              case SONG_SELECT: //new Song in this Song!!!!! Untested
                                                              curSong = songBook[nextNote]; //nextNote is song number!!!
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 39  

                                                              uart_transmit(temp);
                                                              uart_transmit(riff[nextNote++]);
                                                              midiClk = 0;
                                                              deltaPos = 0;
                                                              nextRiff = 0;
                                                              numRiffs = (curSong[nextRiff]).rAddy;
                                                              curRiffCnt = 0;
                                                              numNotes = 0;
                                                              nextNote = 0;
                                                              PLAYING = 0;
                                                              TR0 = 0;
                                                      break;
                              
                                              case START:      //from the beginning
                                                              midiClk = 0;
                                                              deltaPos = 0;
                                                              nextRiff = 0;
                                                              numRiffs = (curSong[nextRiff]).rAddy;
                                                              curRiffCnt = 0;
                                                              numNotes = 0;
                                                              nextNote = 0;
                                                              uart_transmit(temp);
                                                              PLAYING = 1;
                                                              TR0 = 1;
                                              break;
                              
                                              case STOP:  //this will cease the whole !# till the button is pressed again
                                                              PLAYING = 0;
                                                              uart_transmit(temp);
                                                              TR0 = 0;
                                                              break;
                      
                                              case CONTINUE:
                                                              PLAYING = 1;
                                                              uart_transmit(temp);
                                                              TR0 = 1;
                                                              break;
                                                                       
                                              case SYSTEM_RESET:
                                                              uart_transmit(temp);
                      //                                      AUXR1 |= 0x08; //soft reset, maybe not me...    
                                                      break;
                                                      
                                                      case EOX:                       //also we will find this before the switch!     
                                                      case TIMING_CLOCK: //the thing that should not be
                                                      case TUNE_REQUEST:
                                                      case ACTIVE_SENSING:
                                                      default:
                                                              break;
                                              }
                                      }
                              } else { //we are disastrously misaligned or have 127 values to play with ...
                                      switch (temp & 0x70) {
                                              
                                              case TEMPO_SET: //tempo!!!
                                                      temp0 = (temp & 0x0f); //MSN first
                                                      periodH0 = 0xFF - riff[nextNote++];
                                                      periodL0 = 0xFF - riff[nextNote++];
                                                      cnt0 = 0;
                                                      break;
                                      }
                              }
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 40  

                              if (deltaPos == 0) {
                                      goto UPDATE_NOTE;
                              }
                      }
              #else
 620   1              if (PLAYING) { //todo test switches for cool TX stuff...  
 621   2                      if (temp & 0x80) {
 622   3                              VnotL = 1;
 623   3                      }
 624   2                      temp &= 0x7f;
 625   2                      switch (temp) {
 626   3      
 627   3                              case TX_OFF:
 628   3                                      LED = 0;
 629   3                                      txOffSwitch = 1;        //      TX off
 630   3                              break;
 631   3                              
 632   3                              case TX_ON:
 633   3                                      LED = 1;
 634   3                                      txOffSwitch = 0;        //      TX on
 635   3                              break;
 636   3                              
 637   3                              case UP1:
 638   3                                      thisUp = 1;
 639   3                              case DOWN1:
 640   3                                      thisDelta = 10;
 641   3                              break;
 642   3                              
 643   3                              case UP2:
 644   3                                      thisUp = 1;
 645   3                              case DOWN2:
 646   3                                      thisDelta = 9;
 647   3                              break;
 648   3                              
 649   3                              case UP3:
 650   3                                      thisUp = 1;
 651   3                              case DOWN3:
 652   3                                      thisDelta = 8;
 653   3                              break;
 654   3                              
 655   3                              case UP4:
 656   3                                      thisUp = 1;
 657   3                              case DOWN4:
 658   3                                      thisDelta = 7;
 659   3                              break;
 660   3                              
 661   3                              case UP5:
 662   3                                      thisUp = 1;
 663   3                              case DOWN5:
 664   3                                      thisDelta = 6;
 665   3                              break;
 666   3                      
 667   3                              case UPDOWN_OFF:
 668   3                                      thisDelta = 0;
 669   3                              break;
 670   3                              
 671   3                              case STATION_UP6:
 672   3                                      ++station;
 673   3                              case STATION_UP5:
 674   3                                      ++station;
 675   3                              case STATION_UP4:
 676   3                                      ++station;
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 41  

 677   3                              case STATION_UP3:
 678   3                                      ++station;
 679   3                              case STATION_UP2:
 680   3                                      ++station;
 681   3                              case STATION_UP:
 682   3                                      setFreq(++station);
 683   3                              break;
 684   3                              
 685   3                              case STATION_DOWN6:
 686   3                                      --station;
 687   3                              case STATION_DOWN5:
 688   3                                      --station;
 689   3                              case STATION_DOWN4:
 690   3                                      --station;
 691   3                              case STATION_DOWN3:
 692   3                                      --station;
 693   3                              case STATION_DOWN2:
 694   3                                      --station;
 695   3                              case STATION_DOWN:
 696   3                                      setFreq(--station);
 697   3                              break;
 698   3                              
 699   3                              case HOLD0:
 700   3                              case HOLD1:
 701   3                              case HOLD2:
 702   3                              break;
 703   3      
 704   3                              case NOTE_OFF_MEM:
 705   3                                      if (VnotL == 1) {
 706   4                                              TX_VCC_ON = 0;
 707   4                                      } else {
 708   4                                              AUDIO_L_ON = 0;
 709   4                                      }
 710   3                              break;
 711   3      
 712   3                              default:
 713   3                                      temp -= LUT_MIDI_NOTE_SHIFT;
 714   3                                      if (VnotL == 1) {
 715   4                                              TX_VCC_ON = 1;
 716   4                                              periodH0 = (0xff & (LUTFreq[temp] >> 8));
 717   4                                              periodL0 = (0xff & LUTFreq[temp]);
 718   4                                      } else {
 719   4                                              AUDIO_L_ON = 1;
 720   4                                              periodH1 = (0xff & (LUTFreq[temp] >> 8));
 721   4                                              periodL1 = (0xff & LUTFreq[temp]);
 722   4                                      }
 723   3                              break;
 724   3                      }
 725   2                      if (thisDelta) {
 726   3                              if (VnotL == 1) {        //not OMNIfied!!!! todo
 727   4                                      txDelta = thisDelta;
 728   4                                      deltaTxUp = thisUp;
 729   4                              } else {
 730   4                                      lDelta = thisDelta;
 731   4                                      deltaLUp = thisUp;
 732   4                              }
 733   3                      }
 734   2                      //should just work.... untested...
 735   2                      if (deltaPos == 0) {
 736   3                              goto UPDATE_NOTE;
 737   3                      }
 738   2              }
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 42  

 739   1      #endif
 740   1      }
*** WARNING C280 IN LINE 465 OF BLINKY.C: 'temp2': unreferenced local variable
 741          
 742          /*****************TEST SETUP***************************************/
 743          
 744          /********************SETTERS****************************/  
 745          void setFreq (word freq) { //takes
 746   1              if (txOffSwitch || freq > MAX_FREQ || freq < MIN_FREQ) return;  //out of bounds, do-over
 747   1              //if (freq > MAX_FREQ || freq < MIN_FREQ) return;  //out of bounds, do-over
 748   1              else {
 749   2                      word temp = freq;
 750   2                      //EA = 0;               //Disable interrupts for tuning
 751   2                      temp += (txState & 0xF800);  //keep phase cntrl, channels, and test bits
 752   2                      txState = temp;  //return or sorts
 753   2                      txProg();
 754   2                      //EA = 1;               //resume interrupt service
 755   2              }       
 756   1      }
 757          /*********************8CEREAL***************************/
 758          void txProg() { //shift out txState to the transmitter
 759   1              word i = 0x01;
 760   1              bit tempTX = TX_VCC_ON;
 761   1              TX_VCC_ON = 0;
 762   1              txVcc = 0;      //      TX on
 763   1              txClk = 0;   
 764   1              CE = 0;   
 765   1              CE = 1;   
 766   1              for(i = 0x01; i != 0; i <<= 1) {  
 767   2                      txData = txState & i;
 768   2                      txClk = 1;   
 769   2                      txClk = 0;   
 770   2              }       
 771   1              CE = 0;
 772   1              TX_VCC_ON = tempTX; 
 773   1      }
 774          
 775                                                             
 776          void delay (word cnt) { //2.17 us * cnt
 777   1        while (--cnt);
 778   1      }
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 43  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 98
0000 E4                CLR     A
0001 F500        R     MOV     i,A
                                           ; SOURCE LINE # 100
0003 120000      R     LCALL   setup
                                           ; SOURCE LINE # 101
0006 C2A7              CLR     txVcc
                                           ; SOURCE LINE # 102
0008 AF00        R     MOV     R7,station+01H
000A AE00        R     MOV     R6,station
000C 120000      R     LCALL   _setFreq
                                           ; SOURCE LINE # 103
000F 120000      E     LCALL   uart_init
                                           ; SOURCE LINE # 106
0012 AF00        R     MOV     R7,songNum
0014 EF                MOV     A,R7
0015 75F003            MOV     B,#03H
0018 A4                MUL     AB
0019 2400        R     ADD     A,#LOW songBook
001B F582              MOV     DPL,A
001D E4                CLR     A
001E 3400        R     ADDC    A,#HIGH songBook
0020 F583              MOV     DPH,A
0022 E4                CLR     A
0023 93                MOVC    A,@A+DPTR
0024 FB                MOV     R3,A
0025 7401              MOV     A,#01H
0027 93                MOVC    A,@A+DPTR
0028 FA                MOV     R2,A
0029 7402              MOV     A,#02H
002B 93                MOVC    A,@A+DPTR
002C 8B00        R     MOV     curSong,R3
002E 8A00        R     MOV     curSong+01H,R2
0030 F500        R     MOV     curSong+02H,A
                                           ; SOURCE LINE # 107
0032 F9                MOV     R1,A
0033 AE00        R     MOV     R6,nextRiff
0035 AF00        R     MOV     R7,nextRiff+01H
0037 8F82              MOV     DPL,R7
0039 8E83              MOV     DPH,R6
003B 7403              MOV     A,#03H
003D 120000      E     LCALL   ?C?OFFX256
0040 120000      E     LCALL   ?C?ILDOPTR
0043 F500        R     MOV     numRiffs+01H,A
0045 85F000      R     MOV     numRiffs,B
                                           ; SOURCE LINE # 108
0048 D2AF              SETB    EA
                                           ; SOURCE LINE # 109
004A D200        R     SETB    BUTT_EN
                                           ; SOURCE LINE # 139
004C 7FE8              MOV     R7,#0E8H
004E 7EFD              MOV     R6,#0FDH
0050 120000      R     LCALL   _delay
                                           ; SOURCE LINE # 140
0053 7FE8              MOV     R7,#0E8H
0055 7EFD              MOV     R6,#0FDH
0057 120000      R     LCALL   _delay
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 44  

                                           ; SOURCE LINE # 141
005A D28E              SETB    TR1
                                           ; SOURCE LINE # 142
005C D28C              SETB    TR0
                                           ; SOURCE LINE # 145
005E         ?C0001:
                                           ; SOURCE LINE # 239
005E AF00        R     MOV     R7,songNum
0060 EF                MOV     A,R7
0061 75F003            MOV     B,#03H
0064 A4                MUL     AB
0065 2400        R     ADD     A,#LOW songBook
0067 F582              MOV     DPL,A
0069 E4                CLR     A
006A 3400        R     ADDC    A,#HIGH songBook
006C F583              MOV     DPH,A
006E E4                CLR     A
006F 93                MOVC    A,@A+DPTR
0070 FB                MOV     R3,A
0071 7401              MOV     A,#01H
0073 93                MOVC    A,@A+DPTR
0074 FA                MOV     R2,A
0075 7402              MOV     A,#02H
0077 93                MOVC    A,@A+DPTR
0078 F9                MOV     R1,A
0079 EB                MOV     A,R3
007A 8A83              MOV     DPH,R2
007C 8982              MOV     DPL,R1
007E AB00        R     MOV     R3,curSong
0080 AA00        R     MOV     R2,curSong+01H
0082 A900        R     MOV     R1,curSong+02H
0084 6500        R     XRL     A,curSong
0086 700A              JNZ     ?C0081
0088 E500        R     MOV     A,curSong+02H
008A 6582              XRL     A,DPL
008C 7004              JNZ     ?C0081
008E E500        R     MOV     A,curSong+01H
0090 6583              XRL     A,DPH
0092         ?C0081:
0092 604A              JZ      ?C0003
                                           ; SOURCE LINE # 240
0094 AF00        R     MOV     R7,songNum
0096 EF                MOV     A,R7
0097 75F003            MOV     B,#03H
009A A4                MUL     AB
009B 2400        R     ADD     A,#LOW songBook
009D F582              MOV     DPL,A
009F E4                CLR     A
00A0 3400        R     ADDC    A,#HIGH songBook
00A2 F583              MOV     DPH,A
00A4 E4                CLR     A
00A5 93                MOVC    A,@A+DPTR
00A6 FB                MOV     R3,A
00A7 7401              MOV     A,#01H
00A9 93                MOVC    A,@A+DPTR
00AA FA                MOV     R2,A
00AB 7402              MOV     A,#02H
00AD 93                MOVC    A,@A+DPTR
00AE 8B00        R     MOV     curSong,R3
00B0 8A00        R     MOV     curSong+01H,R2
00B2 F500        R     MOV     curSong+02H,A
                                           ; SOURCE LINE # 241
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 45  

00B4 E4                CLR     A
00B5 F500        R     MOV     midiClk,A
00B7 F500        R     MOV     midiClk+01H,A
                                           ; SOURCE LINE # 242
00B9 F500        R     MOV     nextRiff,A
00BB F500        R     MOV     nextRiff+01H,A
                                           ; SOURCE LINE # 243
00BD F500        R     MOV     deltaPos,A
00BF F500        R     MOV     deltaPos+01H,A
                                           ; SOURCE LINE # 244
00C1 AB00        R     MOV     R3,curSong
00C3 AA00        R     MOV     R2,curSong+01H
00C5 A900        R     MOV     R1,curSong+02H
00C7 AE00        R     MOV     R6,nextRiff
00C9 AF00        R     MOV     R7,nextRiff+01H
00CB 8F82              MOV     DPL,R7
00CD 8E83              MOV     DPH,R6
00CF 7403              MOV     A,#03H
00D1 120000      E     LCALL   ?C?OFFX256
00D4 120000      E     LCALL   ?C?ILDOPTR
00D7 F500        R     MOV     numRiffs+01H,A
00D9 85F000      R     MOV     numRiffs,B
                                           ; SOURCE LINE # 245
00DC 8080              SJMP    ?C0001
00DE         ?C0003:
                                           ; SOURCE LINE # 249
00DE 208019            JB      midButt,?C0005
                                           ; SOURCE LINE # 251
00E1 A2A7              MOV     C,txVcc
00E3 B3                CPL     C
00E4 92A7              MOV     txVcc,C
                                           ; SOURCE LINE # 252
00E6 30A706            JNB     txVcc,?C0006
                                           ; SOURCE LINE # 253
00E9 D200        R     SETB    txOffSwitch
                                           ; SOURCE LINE # 254
00EB C2A5              CLR     LED
                                           ; SOURCE LINE # 255
00ED 800B              SJMP    ?C0005
00EF         ?C0006:
                                           ; SOURCE LINE # 256
00EF C200        R     CLR     txOffSwitch
                                           ; SOURCE LINE # 257
00F1 D2A5              SETB    LED
                                           ; SOURCE LINE # 258
00F3 AF00        R     MOV     R7,station+01H
00F5 AE00        R     MOV     R6,station
00F7 120000      R     LCALL   _setFreq
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
00FA         ?C0005:
                                           ; SOURCE LINE # 261
00FA 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 262
00FD 20A502            JB      LED,$ + 5H
0100 0100        R     AJMP    ?C0001
                                           ; SOURCE LINE # 263
0102 20810D            JB      hiButt,?C0009
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
0105 120000      R     LCALL   L?0101
                                           ; SOURCE LINE # 266
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 46  

0108 0500        R     INC     station+01H
010A E500        R     MOV     A,station+01H
010C 7012              JNZ     ?C0099
010E 0500        R     INC     station
0110         ?C0082:
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
0110 800E              SJMP    ?C0099
0112         ?C0009:
                                           ; SOURCE LINE # 271
0112 208217            JB      loButt,?C0010
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0115 120000      R     LCALL   L?0101
                                           ; SOURCE LINE # 274
0118 E500        R     MOV     A,station+01H
011A 1500        R     DEC     station+01H
011C 7002              JNZ     ?C0083
011E 1500        R     DEC     station
0120         ?C0083:
                                           ; SOURCE LINE # 275
0120         ?C0099:
0120 AF00        R     MOV     R7,station+01H
0122 AE00        R     MOV     R6,station
0124 120000      R     LCALL   _setFreq
                                           ; SOURCE LINE # 276
0127 D2A5              SETB    LED
                                           ; SOURCE LINE # 277
0129 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 278
012C         ?C0010:
                                           ; SOURCE LINE # 279
012C C3                CLR     C
012D E500        R     MOV     A,station+01H
012F 94BC              SUBB    A,#0BCH
0131 E500        R     MOV     A,station
0133 9402              SUBB    A,#02H
0135 5026              JNC     ?C0012
                                           ; SOURCE LINE # 280
0137 750002      R     MOV     station,#02H
013A 7500BC      R     MOV     station+01H,#0BCH
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
013D 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 283
0140 D2A5              SETB    LED
                                           ; SOURCE LINE # 284
0142 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
0145 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 287
0148 D2A5              SETB    LED
                                           ; SOURCE LINE # 288
014A 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
014D 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 291
0150 D2A5              SETB    LED
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 47  

                                           ; SOURCE LINE # 292
0152 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
0155 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 295
0158 D2A5              SETB    LED
                                           ; SOURCE LINE # 296
015A 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 297
015D         ?C0012:
                                           ; SOURCE LINE # 298
015D D3                SETB    C
015E E500        R     MOV     A,station+01H
0160 94B0              SUBB    A,#0B0H
0162 E500        R     MOV     A,station
0164 9404              SUBB    A,#04H
0166 5002              JNC     $ + 4H
0168 0100        R     AJMP    ?C0001
                                           ; SOURCE LINE # 299
016A 750004      R     MOV     station,#04H
016D 7500B0      R     MOV     station+01H,#0B0H
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
0170 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 302
0173 D2A5              SETB    LED
                                           ; SOURCE LINE # 303
0175 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0178 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 306
017B D2A5              SETB    LED
                                           ; SOURCE LINE # 307
017D 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0180 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 310
0183 D2A5              SETB    LED
                                           ; SOURCE LINE # 311
0185 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
0188 120000      R     LCALL   L?0102
                                           ; SOURCE LINE # 314
018B D2A5              SETB    LED
                                           ; SOURCE LINE # 315
018D 120000      R     LCALL   L?0103
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 321
0190 0100        R     AJMP    ?C0001
             ; FUNCTION main (END)

             ; FUNCTION setup (BEGIN)
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 326
0000 758407            MOV     P0M1,#07H
                                           ; SOURCE LINE # 327
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 48  

0003 758508            MOV     P0M2,#08H
                                           ; SOURCE LINE # 328
0006 E4                CLR     A
0007 F591              MOV     P1M1,A
                                           ; SOURCE LINE # 330
0009 F5A4              MOV     P2M1,A
                                           ; SOURCE LINE # 331
000B F5B1              MOV     P3M1,A
                                           ; SOURCE LINE # 332
000D D280              SETB    midButt
                                           ; SOURCE LINE # 333
000F D281              SETB    hiButt
                                           ; SOURCE LINE # 334
0011 D282              SETB    loButt
                                           ; SOURCE LINE # 335
0013 D2A5              SETB    LED
                                           ; SOURCE LINE # 336
0015 D2A7              SETB    txVcc
                                           ; SOURCE LINE # 337
0017 C2A4              CLR     CE
                                           ; SOURCE LINE # 338
0019 A200        R     MOV     C,STEREO
001B 9200        R     MOV     stereoTx,C
                                           ; SOURCE LINE # 339
001D C283              CLR     audioL
                                           ; SOURCE LINE # 340
001F D200        R     SETB    test0
                                           ; SOURCE LINE # 341
0021 C200        R     CLR     test1
                                           ; SOURCE LINE # 342
0023 C200        R     CLR     phaseMode0
                                           ; SOURCE LINE # 343
0025 C200        R     CLR     phaseMode1
                                           ; SOURCE LINE # 360
0027 F589              MOV     TMOD,A
                                           ; SOURCE LINE # 362
0029 538FEE            ANL     TAMOD,#0EEH
                                           ; SOURCE LINE # 363
002C 438911            ORL     TMOD,#011H
                                           ; SOURCE LINE # 366
002F F500        R     MOV     periodH1,A
                                           ; SOURCE LINE # 367
0031 F500        R     MOV     periodL1,A
                                           ; SOURCE LINE # 369
0033 F58C              MOV     TH0,A
                                           ; SOURCE LINE # 370
0035 F58A              MOV     TL0,A
                                           ; SOURCE LINE # 372
0037 85008D      R     MOV     TH1,periodH1
                                           ; SOURCE LINE # 373
003A 85008B      R     MOV     TL1,periodL1
                                           ; SOURCE LINE # 386
003D 53B87F            ANL     IP0,#07FH
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 390
0040 D2AB              SETB    ET1
                                           ; SOURCE LINE # 391
0042 D2A9              SETB    ET0
                                           ; SOURCE LINE # 399
0044 22                RET     
             ; FUNCTION setup (END)

C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 49  

             ; FUNCTION timers_isr1 (BEGIN)
0000 C0D0              PUSH    PSW
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 417
0002 85008D      R     MOV     TH1,periodH1
                                           ; SOURCE LINE # 418
0005 85008B      R     MOV     TL1,periodL1
                                           ; SOURCE LINE # 420
0008 00                NOP     
                                           ; SOURCE LINE # 421
0009 00                NOP     
                                           ; SOURCE LINE # 422
000A 00                NOP     
                                           ; SOURCE LINE # 423
000B 300005            JNB     AUDIO_L_ON,?C0017
                                           ; SOURCE LINE # 424
000E A283              MOV     C,audioL
0010 B3                CPL     C
0011 9283              MOV     audioL,C
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 427
0013         ?C0017:
0013 D0D0              POP     PSW
0015 32                RETI    
             ; FUNCTION timers_isr1 (END)

             ; FUNCTION timers_isr0 (BEGIN)
0000 C0D0              PUSH    PSW
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 449
0002 85008C      R     MOV     TH0,periodH0
                                           ; SOURCE LINE # 450
0005 85008A      R     MOV     TL0,periodL0
                                           ; SOURCE LINE # 452
0008 20000E            JB      txOffSwitch,?C0018
                                           ; SOURCE LINE # 453
000B 300007            JNB     TX_VCC_ON,?C0019
                                           ; SOURCE LINE # 454
000E A2A7              MOV     C,txVcc
0010 B3                CPL     C
0011 92A7              MOV     txVcc,C
                                           ; SOURCE LINE # 455
0013 8006              SJMP    ?C0022
0015         ?C0019:
                                           ; SOURCE LINE # 456
0015 C2A7              CLR     txVcc
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
0017 8002              SJMP    ?C0022
0019         ?C0018:
                                           ; SOURCE LINE # 459
0019 D2A7              SETB    txVcc
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 462
001B         ?C0022:
001B D0D0              POP     PSW
001D 32                RETI    
             ; FUNCTION timers_isr0 (END)

             ; FUNCTION updateNote (BEGIN)
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 466
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 50  

0000 E4                CLR     A
0001 F500        R     MOV     thisDelta,A
0003 F500        R     MOV     thisDelta+01H,A
                                           ; SOURCE LINE # 467
0005 C200        R     CLR     thisUp
0007 C200        R     CLR     VnotL
                                           ; SOURCE LINE # 468
0009         UPDATE_NOTE:
                                           ; SOURCE LINE # 469
0009 E500        R     MOV     A,nextNote
000B C3                CLR     C
000C 9500        R     SUBB    A,numNotes
000E 407C              JC      ?C0024
                                           ; SOURCE LINE # 470
0010 750001      R     MOV     nextNote,#01H
                                           ; SOURCE LINE # 471
0013 AF00        R     MOV     R7,curRiffCnt
0015 1500        R     DEC     curRiffCnt
0017 EF                MOV     A,R7
0018 7072              JNZ     ?C0024
                                           ; SOURCE LINE # 472
001A 0500        R     INC     nextRiff+01H
001C E500        R     MOV     A,nextRiff+01H
001E 7002              JNZ     ?C0084
0020 0500        R     INC     nextRiff
0022         ?C0084:
0022 AE00        R     MOV     R6,nextRiff
0024 B50027            CJNE    A,numRiffs+01H,?C0026
0027 EE                MOV     A,R6
0028 B50023            CJNE    A,numRiffs,?C0026
                                           ; SOURCE LINE # 474
002B C200        R     CLR     PLAYING
                                           ; SOURCE LINE # 475
002D E4                CLR     A
002E F500        R     MOV     midiClk,A
0030 F500        R     MOV     midiClk+01H,A
                                           ; SOURCE LINE # 476
0032 C2A5              CLR     LED
                                           ; SOURCE LINE # 478
0034 C200        R     CLR     AUDIO_L_ON
                                           ; SOURCE LINE # 479
0036 C200        R     CLR     TX_VCC_ON
                                           ; SOURCE LINE # 481
0038 E500        R     MOV     A,numRiffs+01H
003A 24FF              ADD     A,#0FFH
003C F500        R     MOV     nextRiff+01H,A
003E E500        R     MOV     A,numRiffs
0040 34FF              ADDC    A,#0FFH
0042 F500        R     MOV     nextRiff,A
                                           ; SOURCE LINE # 482
0044 E4                CLR     A
0045 F500        R     MOV     curRiffCnt,A
                                           ; SOURCE LINE # 483
0047 850000      R     MOV     nextNote,numNotes
                                           ; SOURCE LINE # 484
004A D200        R     SETB    SONG_DONE
                                           ; SOURCE LINE # 490
004C 803E              SJMP    ?C0024
004E         ?C0026:
                                           ; SOURCE LINE # 491
004E AB00        R     MOV     R3,curSong
0050 AA00        R     MOV     R2,curSong+01H
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 51  

0052 A900        R     MOV     R1,curSong+02H
0054 AE00        R     MOV     R6,nextRiff
0056 AF00        R     MOV     R7,nextRiff+01H
0058 8F82              MOV     DPL,R7
005A 8E83              MOV     DPH,R6
005C 7403              MOV     A,#03H
005E 120000      E     LCALL   ?C?OFFX256
0061 120000      E     LCALL   ?C?ILDOPTR
0064 85F000      R     MOV     riff,B
0067 F500        R     MOV     riff+01H,A
                                           ; SOURCE LINE # 492
0069 AE00        R     MOV     R6,nextRiff
006B AF00        R     MOV     R7,nextRiff+01H
006D 7C00              MOV     R4,#00H
006F 7D03              MOV     R5,#03H
0071 120000      E     LCALL   ?C?IMUL
0074 E9                MOV     A,R1
0075 2F                ADD     A,R7
0076 F9                MOV     R1,A
0077 EA                MOV     A,R2
0078 3E                ADDC    A,R6
0079 FA                MOV     R2,A
007A 900002            MOV     DPTR,#02H
007D 120000      E     LCALL   ?C?CLDOPTR
0080 F500        R     MOV     curRiffCnt,A
                                           ; SOURCE LINE # 493
0082 850082      R     MOV     DPL,riff+01H
0085 850083      R     MOV     DPH,riff
0088 E4                CLR     A
0089 93                MOVC    A,@A+DPTR
008A F500        R     MOV     numNotes,A
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
008C         ?C0024:
                                           ; SOURCE LINE # 497
008C AF00        R     MOV     R7,nextNote
008E 0500        R     INC     nextNote
0090 E500        R     MOV     A,riff+01H
0092 2F                ADD     A,R7
0093 F582              MOV     DPL,A
0095 E4                CLR     A
0096 3500        R     ADDC    A,riff
0098 F583              MOV     DPH,A
009A E4                CLR     A
009B 93                MOVC    A,@A+DPTR
009C 750000      R     MOV     deltaPos,#00H
009F F500        R     MOV     deltaPos+01H,A
                                           ; SOURCE LINE # 498
00A1 AF00        R     MOV     R7,nextNote
00A3 0500        R     INC     nextNote
00A5 E500        R     MOV     A,riff+01H
00A7 2F                ADD     A,R7
00A8 F582              MOV     DPL,A
00AA E4                CLR     A
00AB 3500        R     ADDC    A,riff
00AD F583              MOV     DPH,A
00AF E4                CLR     A
00B0 93                MOVC    A,@A+DPTR
00B1 F500        R     MOV     temp,A
                                           ; SOURCE LINE # 620
00B3 200002      R     JB      PLAYING,$ + 5H
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 52  

00B6 0100        R     AJMP    ?C0069
                                           ; SOURCE LINE # 621
00B8 30E702            JNB     ACC.7,?C0029
                                           ; SOURCE LINE # 622
00BB D200        R     SETB    VnotL
                                           ; SOURCE LINE # 623
00BD         ?C0029:
                                           ; SOURCE LINE # 624
00BD 53007F      R     ANL     temp,#07FH
                                           ; SOURCE LINE # 625
00C0 E500        R     MOV     A,temp
00C2 120000      E     LCALL   ?C?CCASE
00C5 0000        R     DW      ?C0031
00C7 00                DB      00H
00C8 0000        R     DW      ?C0032
00CA 01                DB      01H
00CB 0000        R     DW      ?C0043
00CD 02                DB      02H
00CE 0000        R     DW      ?C0049
00D0 03                DB      03H
00D1 0000        R     DW      ?C0055
00D3 04                DB      04H
00D4 0000        R     DW      ?C0034
00D6 05                DB      05H
00D7 0000        R     DW      ?C0036
00D9 06                DB      06H
00DA 0000        R     DW      ?C0038
00DC 07                DB      07H
00DD 0000        R     DW      ?C0040
00DF 08                DB      08H
00E0 0000        R     DW      ?C0042
00E2 09                DB      09H
00E3 0000        R     DW      ?C0030
00E5 6D                DB      06DH
00E6 0000        R     DW      ?C0033
00E8 6E                DB      06EH
00E9 0000        R     DW      ?C0035
00EB 6F                DB      06FH
00EC 0000        R     DW      ?C0037
00EE 70                DB      070H
00EF 0000        R     DW      ?C0039
00F1 71                DB      071H
00F2 0000        R     DW      ?C0041
00F4 72                DB      072H
00F5 0000        R     DW      ?C0048
00F7 73                DB      073H
00F8 0000        R     DW      ?C0054
00FA 74                DB      074H
00FB 0000        R     DW      ?C0047
00FD 75                DB      075H
00FE 0000        R     DW      ?C0053
0100 76                DB      076H
0101 0000        R     DW      ?C0046
0103 77                DB      077H
0104 0000        R     DW      ?C0052
0106 78                DB      078H
0107 0000        R     DW      ?C0045
0109 79                DB      079H
010A 0000        R     DW      ?C0051
010C 7A                DB      07AH
010D 0000        R     DW      ?C0044
010F 7B                DB      07BH
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 53  

0110 0000        R     DW      ?C0050
0112 7C                DB      07CH
0113 0000        R     DW      ?C0030
0115 7D                DB      07DH
0116 0000        R     DW      ?C0030
0118 7E                DB      07EH
0119 0000        R     DW      ?C0059
011B 7F                DB      07FH
011C 0000              DW      00H
011E 0000        R     DW      ?C0062
                                           ; SOURCE LINE # 627
0120         ?C0031:
                                           ; SOURCE LINE # 628
0120 C2A5              CLR     LED
                                           ; SOURCE LINE # 629
0122 D200        R     SETB    txOffSwitch
                                           ; SOURCE LINE # 630
0124 0100        R     AJMP    ?C0030
                                           ; SOURCE LINE # 632
0126         ?C0032:
                                           ; SOURCE LINE # 633
0126 D2A5              SETB    LED
                                           ; SOURCE LINE # 634
0128 C200        R     CLR     txOffSwitch
                                           ; SOURCE LINE # 635
012A 0100        R     AJMP    ?C0030
                                           ; SOURCE LINE # 637
012C         ?C0033:
                                           ; SOURCE LINE # 638
012C D200        R     SETB    thisUp
                                           ; SOURCE LINE # 639
012E         ?C0034:
                                           ; SOURCE LINE # 640
012E 750000      R     MOV     thisDelta,#00H
0131 75000A      R     MOV     thisDelta+01H,#0AH
                                           ; SOURCE LINE # 641
0134 0100        R     AJMP    ?C0030
                                           ; SOURCE LINE # 643
0136         ?C0035:
                                           ; SOURCE LINE # 644
0136 D200        R     SETB    thisUp
                                           ; SOURCE LINE # 645
0138         ?C0036:
                                           ; SOURCE LINE # 646
0138 750000      R     MOV     thisDelta,#00H
013B 750009      R     MOV     thisDelta+01H,#09H
                                           ; SOURCE LINE # 647
013E 0100        R     AJMP    ?C0030
                                           ; SOURCE LINE # 649
0140         ?C0037:
                                           ; SOURCE LINE # 650
0140 D200        R     SETB    thisUp
                                           ; SOURCE LINE # 651
0142         ?C0038:
                                           ; SOURCE LINE # 652
0142 750000      R     MOV     thisDelta,#00H
0145 750008      R     MOV     thisDelta+01H,#08H
                                           ; SOURCE LINE # 653
0148 0100        R     AJMP    ?C0030
                                           ; SOURCE LINE # 655
014A         ?C0039:
                                           ; SOURCE LINE # 656
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 54  

014A D200        R     SETB    thisUp
                                           ; SOURCE LINE # 657
014C         ?C0040:
                                           ; SOURCE LINE # 658
014C 750000      R     MOV     thisDelta,#00H
014F 750007      R     MOV     thisDelta+01H,#07H
                                           ; SOURCE LINE # 659
0152 0100        R     AJMP    ?C0030
                                           ; SOURCE LINE # 661
0154         ?C0041:
                                           ; SOURCE LINE # 662
0154 D200        R     SETB    thisUp
                                           ; SOURCE LINE # 663
0156         ?C0042:
                                           ; SOURCE LINE # 664
0156 750000      R     MOV     thisDelta,#00H
0159 750006      R     MOV     thisDelta+01H,#06H
                                           ; SOURCE LINE # 665
015C 0100        R     AJMP    ?C0030
                                           ; SOURCE LINE # 667
015E         ?C0043:
                                           ; SOURCE LINE # 668
015E E4                CLR     A
015F F500        R     MOV     thisDelta,A
0161 F500        R     MOV     thisDelta+01H,A
                                           ; SOURCE LINE # 669
0163 0100        R     AJMP    ?C0030
                                           ; SOURCE LINE # 671
0165         ?C0044:
                                           ; SOURCE LINE # 672
0165 0500        R     INC     station+01H
0167 E500        R     MOV     A,station+01H
0169 7002              JNZ     ?C0086
016B 0500        R     INC     station
016D         ?C0086:
                                           ; SOURCE LINE # 673
016D         ?C0045:
                                           ; SOURCE LINE # 674
016D 0500        R     INC     station+01H
016F E500        R     MOV     A,station+01H
0171 7002              JNZ     ?C0087
0173 0500        R     INC     station
0175         ?C0087:
                                           ; SOURCE LINE # 675
0175         ?C0046:
                                           ; SOURCE LINE # 676
0175 0500        R     INC     station+01H
0177 E500        R     MOV     A,station+01H
0179 7002              JNZ     ?C0088
017B 0500        R     INC     station
017D         ?C0088:
                                           ; SOURCE LINE # 677
017D         ?C0047:
                                           ; SOURCE LINE # 678
017D 0500        R     INC     station+01H
017F E500        R     MOV     A,station+01H
0181 7002              JNZ     ?C0089
0183 0500        R     INC     station
0185         ?C0089:
                                           ; SOURCE LINE # 679
0185         ?C0048:
                                           ; SOURCE LINE # 680
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 55  

0185 0500        R     INC     station+01H
0187 E500        R     MOV     A,station+01H
0189 7002              JNZ     ?C0090
018B 0500        R     INC     station
018D         ?C0090:
                                           ; SOURCE LINE # 681
018D         ?C0049:
                                           ; SOURCE LINE # 682
018D 0500        R     INC     station+01H
018F E500        R     MOV     A,station+01H
0191 7035              JNZ     ?C0100
0193 0500        R     INC     station
0195         ?C0091:
                                           ; SOURCE LINE # 683
0195 8031              SJMP    ?C0100
                                           ; SOURCE LINE # 685
0197         ?C0050:
                                           ; SOURCE LINE # 686
0197 E500        R     MOV     A,station+01H
0199 1500        R     DEC     station+01H
019B 7002              JNZ     ?C0092
019D 1500        R     DEC     station
019F         ?C0092:
                                           ; SOURCE LINE # 687
019F         ?C0051:
                                           ; SOURCE LINE # 688
019F E500        R     MOV     A,station+01H
01A1 1500        R     DEC     station+01H
01A3 7002              JNZ     ?C0093
01A5 1500        R     DEC     station
01A7         ?C0093:
                                           ; SOURCE LINE # 689
01A7         ?C0052:
                                           ; SOURCE LINE # 690
01A7 E500        R     MOV     A,station+01H
01A9 1500        R     DEC     station+01H
01AB 7002              JNZ     ?C0094
01AD 1500        R     DEC     station
01AF         ?C0094:
                                           ; SOURCE LINE # 691
01AF         ?C0053:
                                           ; SOURCE LINE # 692
01AF E500        R     MOV     A,station+01H
01B1 1500        R     DEC     station+01H
01B3 7002              JNZ     ?C0095
01B5 1500        R     DEC     station
01B7         ?C0095:
                                           ; SOURCE LINE # 693
01B7         ?C0054:
                                           ; SOURCE LINE # 694
01B7 E500        R     MOV     A,station+01H
01B9 1500        R     DEC     station+01H
01BB 7002              JNZ     ?C0096
01BD 1500        R     DEC     station
01BF         ?C0096:
                                           ; SOURCE LINE # 695
01BF         ?C0055:
                                           ; SOURCE LINE # 696
01BF E500        R     MOV     A,station+01H
01C1 1500        R     DEC     station+01H
01C3 7002              JNZ     ?C0097
01C5 1500        R     DEC     station
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 56  

01C7         ?C0097:
01C7 14                DEC     A
01C8         ?C0100:
01C8 FF                MOV     R7,A
01C9 AE00        R     MOV     R6,station
01CB 120000      R     LCALL   _setFreq
                                           ; SOURCE LINE # 697
01CE 804C              SJMP    ?C0030
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 704
01D0         ?C0059:
                                           ; SOURCE LINE # 705
01D0 300004            JNB     VnotL,?C0060
                                           ; SOURCE LINE # 706
01D3 C200        R     CLR     TX_VCC_ON
                                           ; SOURCE LINE # 707
01D5 8045              SJMP    ?C0030
01D7         ?C0060:
                                           ; SOURCE LINE # 708
01D7 C200        R     CLR     AUDIO_L_ON
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 710
01D9 8041              SJMP    ?C0030
                                           ; SOURCE LINE # 712
01DB         ?C0062:
                                           ; SOURCE LINE # 713
01DB 74F6              MOV     A,#0F6H
01DD 2500        R     ADD     A,temp
01DF F500        R     MOV     temp,A
                                           ; SOURCE LINE # 714
01E1 30001C            JNB     VnotL,?C0063
                                           ; SOURCE LINE # 715
01E4 D200        R     SETB    TX_VCC_ON
                                           ; SOURCE LINE # 716
01E6 25E0              ADD     A,ACC
01E8 2400        E     ADD     A,#LOW LUTFreq
01EA F582              MOV     DPL,A
01EC E4                CLR     A
01ED 3400        E     ADDC    A,#HIGH LUTFreq
01EF F583              MOV     DPH,A
01F1 E4                CLR     A
01F2 93                MOVC    A,@A+DPTR
01F3 FC                MOV     R4,A
01F4 7401              MOV     A,#01H
01F6 93                MOVC    A,@A+DPTR
01F7 FD                MOV     R5,A
01F8 EC                MOV     A,R4
01F9 F500        R     MOV     periodH0,A
                                           ; SOURCE LINE # 717
01FB ED                MOV     A,R5
01FC F500        R     MOV     periodL0,A
                                           ; SOURCE LINE # 718
01FE 801C              SJMP    ?C0030
0200         ?C0063:
                                           ; SOURCE LINE # 719
0200 D200        R     SETB    AUDIO_L_ON
                                           ; SOURCE LINE # 720
0202 E500        R     MOV     A,temp
0204 25E0              ADD     A,ACC
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 57  

0206 2400        E     ADD     A,#LOW LUTFreq
0208 F582              MOV     DPL,A
020A E4                CLR     A
020B 3400        E     ADDC    A,#HIGH LUTFreq
020D F583              MOV     DPH,A
020F E4                CLR     A
0210 93                MOVC    A,@A+DPTR
0211 FC                MOV     R4,A
0212 7401              MOV     A,#01H
0214 93                MOVC    A,@A+DPTR
0215 FD                MOV     R5,A
0216 EC                MOV     A,R4
0217 F500        R     MOV     periodH1,A
                                           ; SOURCE LINE # 721
0219 ED                MOV     A,R5
021A F500        R     MOV     periodL1,A
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
                                           ; SOURCE LINE # 724
021C         ?C0030:
                                           ; SOURCE LINE # 725
021C E500        R     MOV     A,thisDelta+01H
021E 4500        R     ORL     A,thisDelta
0220 6019              JZ      ?C0065
                                           ; SOURCE LINE # 726
0222 30000C            JNB     VnotL,?C0066
                                           ; SOURCE LINE # 727
0225 850000      R     MOV     txDelta,thisDelta
0228 850000      R     MOV     txDelta+01H,thisDelta+01H
                                           ; SOURCE LINE # 728
022B A200        R     MOV     C,thisUp
022D 9200        R     MOV     deltaTxUp,C
                                           ; SOURCE LINE # 729
022F 800A              SJMP    ?C0065
0231         ?C0066:
                                           ; SOURCE LINE # 730
0231 850000      R     MOV     lDelta,thisDelta
0234 850000      R     MOV     lDelta+01H,thisDelta+01H
                                           ; SOURCE LINE # 731
0237 A200        R     MOV     C,thisUp
0239 9200        R     MOV     deltaLUp,C
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 733
023B         ?C0065:
                                           ; SOURCE LINE # 735
023B E500        R     MOV     A,deltaPos+01H
023D 4500        R     ORL     A,deltaPos
023F 7002              JNZ     $ + 4H
0241 0100        R     AJMP    UPDATE_NOTE
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 740
0243         ?C0069:
0243 22                RET     
             ; FUNCTION updateNote (END)

             ; FUNCTION _setFreq (BEGIN)
                                           ; SOURCE LINE # 745
;---- Variable 'freq' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 746
0000 20002D            JB      txOffSwitch,?C0072
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 58  

0003 D3                SETB    C
0004 EF                MOV     A,R7
0005 94B0              SUBB    A,#0B0H
0007 EE                MOV     A,R6
0008 9404              SUBB    A,#04H
000A 5024              JNC     ?C0072
000C C3                CLR     C
000D EF                MOV     A,R7
000E 94BC              SUBB    A,#0BCH
0010 EE                MOV     A,R6
0011 9402              SUBB    A,#02H
0013 401B              JC      ?C0072
0015         ?C0070:
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 749
0015 8E00        R     MOV     temp,R6
0017 8F00        R     MOV     temp+01H,R7
                                           ; SOURCE LINE # 751
0019 E500        R     MOV     A,txState
001B 54F8              ANL     A,#0F8H
001D FE                MOV     R6,A
001E E4                CLR     A
001F 2500        R     ADD     A,temp+01H
0021 F500        R     MOV     temp+01H,A
0023 EE                MOV     A,R6
0024 3500        R     ADDC    A,temp
0026 F500        R     MOV     temp,A
                                           ; SOURCE LINE # 752
0028 F500        R     MOV     txState,A
002A 850000      R     MOV     txState+01H,temp+01H
                                           ; SOURCE LINE # 753
002D 120000      R     LCALL   txProg
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
0030         ?C0072:
0030 22                RET     
             ; FUNCTION _setFreq (END)

             ; FUNCTION txProg (BEGIN)
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
;---- Variable 'i' assigned to Register 'R6/R7' ----
0000 7F01              MOV     R7,#01H
0002 7E00              MOV     R6,#00H
                                           ; SOURCE LINE # 760
0004 A200        R     MOV     C,TX_VCC_ON
0006 9200        R     MOV     tempTX,C
                                           ; SOURCE LINE # 761
0008 C200        R     CLR     TX_VCC_ON
                                           ; SOURCE LINE # 762
000A C2A7              CLR     txVcc
                                           ; SOURCE LINE # 763
000C C2A3              CLR     txClk
                                           ; SOURCE LINE # 764
000E C2A4              CLR     CE
                                           ; SOURCE LINE # 765
0010 D2A4              SETB    CE
                                           ; SOURCE LINE # 766
0012         ?C0074:
0012 EF                MOV     A,R7
0013 4E                ORL     A,R6
0014 6019              JZ      ?C0075
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 59  

                                           ; SOURCE LINE # 767
0016 E500        R     MOV     A,txState
0018 5E                ANL     A,R6
0019 FC                MOV     R4,A
001A E500        R     MOV     A,txState+01H
001C 5F                ANL     A,R7
001D 4C                ORL     A,R4
001E 24FF              ADD     A,#0FFH
0020 92A2              MOV     txData,C
                                           ; SOURCE LINE # 768
0022 D2A3              SETB    txClk
                                           ; SOURCE LINE # 769
0024 C2A3              CLR     txClk
                                           ; SOURCE LINE # 770
0026 EF                MOV     A,R7
0027 25E0              ADD     A,ACC
0029 FF                MOV     R7,A
002A EE                MOV     A,R6
002B 33                RLC     A
002C FE                MOV     R6,A
002D 80E3              SJMP    ?C0074
002F         ?C0075:
                                           ; SOURCE LINE # 771
002F C2A4              CLR     CE
                                           ; SOURCE LINE # 772
0031 A200        R     MOV     C,tempTX
0033 9200        R     MOV     TX_VCC_ON,C
                                           ; SOURCE LINE # 773
0035 22                RET     
             ; FUNCTION txProg (END)

             ; FUNCTION L?0101 (BEGIN)
0000         L?0102:
0000 C2A5              CLR     LED
0002         L?0103:
0002 74FF              MOV     A,#0FFH
0004 FF                MOV     R7,A
0005 FE                MOV     R6,A
             ; FUNCTION _delay (BEGIN)
                                           ; SOURCE LINE # 776
;---- Variable 'cnt' assigned to Register 'R6/R7' ----
0006         ?C0078:
                                           ; SOURCE LINE # 777
0006 EF                MOV     A,R7
0007 1F                DEC     R7
0008 7001              JNZ     ?C0098
000A 1E                DEC     R6
000B         ?C0098:
000B 14                DEC     A
000C 4E                ORL     A,R6
000D 70F7              JNZ     ?C0078
                                           ; SOURCE LINE # 778
000F         ?C0080:
000F 22                RET     
             ; FUNCTION _delay (END)

C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 60  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


F9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P0M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
periodH0 . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
G9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
P1M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0091H  1
P0M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
txOffSwitch. . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0000H  1
periodH1 . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0001H  1
P2M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
P1M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0092H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
AA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DAH  1
P3M1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
P2M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3M2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
periodL0 . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0002H  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
EI2C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E8H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
periodL1 . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0003H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
station. . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0004H  2
LUTFreq. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  198
CE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
txProg . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  tempTX . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
EC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EAH  1
EWDRT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AEH  1
SPCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E2H  1
txClk. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
SCC0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C1H  1
HLTRN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
txVcc. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
SCC1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C5H  1
FE . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
IEN0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
IEN1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
RxD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
I2EN . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
PI2C . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F8H  1
TxD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
SSTAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
_delay . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0006H  -----
  cnt. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
IP0H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B7H  1
CMP1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
PWDRT. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BEH  1
IP1H . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F7H  1
CMP2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ADH  1
midiFlags. . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0000H  1
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 61  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


PLAYING. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0003H  1
ADCON0 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
Cs10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TMOD20 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
ADCON1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0097H  1
Ds10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TMOD21 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
EIEE . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
Fs10 . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
UPDOWN_OFF . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
SI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DBH  1
EKBI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00E9H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
AUDIO_L_ON . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0000H  1
WFEED1 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C2H  1
sysEx. . . . . . . . . . . . . . . . .  PUBLIC   XDATA  ARRAY    0000H  512
WFEED2 . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C3H  1
updateNote . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  temp . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
  temp2. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0001H  1
  thisDelta. . . . . . . . . . . . . .  AUTO     DATA   U_INT    0002H  2
  thisUp . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  VnotL. . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
  UPDATE_NOTE. . . . . . . . . . . . .  LABEL    CODE   LABEL    -----  -----
deltaLUp . . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0001H  1
deltaTxUp. . . . . . . . . . . . . . .  PUBLIC   DATA   BIT      0002H  1
ECCU . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
sysIx. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0006H  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
C10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PIEE . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
D10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
E10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
F10. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PKBI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00F9H  1
I2SCLH . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DDH  1
DEEADR . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F3H  1
LOOP_SONGS . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0007H  1
ADMODA . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
riff . . . . . . . . . . . . . . . . .  PUBLIC   DATA   PTR      0007H  2
DEEDAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F2H  1
ADMODB . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A1H  1
TX_ON. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STATION_UP . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
I2SCLL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DCH  1
PCCU . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FCH  1
silentSong . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 62  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


DEECON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F1H  1
DIVM . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0095H  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
ESPI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EBH  1
RTCH . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
setup. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
OMNI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0005H  1
BUTT_EN. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0004H  1
NOTE_OFF_MEM . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
TPCR2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
byte . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
RTCL . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
beatSong . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
MOSI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
MISO . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
TPCR2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
I2STAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D9H  1
KBMASK . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
KB0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
PSPI . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FBH  1
TRIM . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
BRGCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
word . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
KB1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
STATION_DOWN . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
KB2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
SONG_DONE. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0006H  1
KB3. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
AD0BH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
AD0DAT0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C5H  1
deltaPos . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0009H  2
midiClk. . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    000BH  2
KB4. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
AD1BH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C4H  1
AD1DAT0. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
AD0DAT1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C6H  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
minorSong. . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
BURST0 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C2H  1
KB5. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
PB0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
KBPATN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0093H  1
AD1DAT1. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
AD0DAT2. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C7H  1
BURST1 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C6H  1
KB6. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
AD1DAT2. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
AD0DAT3. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F4H  1
KB7. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
AD0BL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A6H  1
AD1DAT3. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F5H  1
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 63  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


AD1BL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
songBook . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    00C0H  21
testS1 . . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  21
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
testS2 . . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  21
SPICLK . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
IP0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
EAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EFH  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
IP1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
nextRiff . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    000DH  2
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
RTCCON . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
phaseMode0 . . . . . . . . . . . . . .  ABSBIT   -----  BIT      000CH  1
LUTSIN64 . . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0000H  64
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
TCR20. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
phaseMode1 . . . . . . . . . . . . . .  ABSBIT   -----  BIT      000DH  1
ICA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TCR21. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F9H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
dmbSong. . . . . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
BNDI0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C3H  1
ICB. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
TH2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
numRiffs . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    000FH  2
BNDI1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C7H  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
TL2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
OCA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
I2ADR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DBH  1
STEREO . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0002H  1
OCB. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
wholeToneSong. . . . . . . . . . . . .  EXTERN   CODE   ARRAY    -----  -----
LED. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
uart_init. . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
OCC. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
PAD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FFH  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
I2DAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DAH  1
UP1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCAN0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C0H  1
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 64  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


OCD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
EBO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
UP2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SCAN1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
UP3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HOLD0. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SDA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
lDelta . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0011H  2
HOLD1. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UP4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
txDelta. . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0013H  2
nextNote . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0015H  1
HOLD2. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
UP5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PT0AD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F6H  1
RIFF_T . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  3
  rAddy. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  repeats. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
Riff_s . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  3
  rAddy. . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  repeats. . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
NUM_NOTES. . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
I2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
midButt. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
STATION_UP2. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRA. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
_setFreq . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  freq . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  temp . . . . . . . . . . . . . . . .  AUTO     DATA   U_INT    0000H  2
numNotes . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   0016H  1
STATION_UP3. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRB. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
BRGR0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BEH  1
STATION_UP4. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRC. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
BRGR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BFH  1
STATION_UP5. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CCCRD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EDH  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
audioL . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
STATION_UP6. . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SPSTAT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
SCL. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
stereoTx . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      000BH  1
audioN . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
Fm0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RSTSRC . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DFH  1
Fm1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
curSong. . . . . . . . . . . . . . . .  PUBLIC   DATA   PTR      0017H  3
As1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 65  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


ALTAB. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
TICR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
As2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TDIR2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
TX_VCC_ON. . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0001H  1
As3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
WDL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C1H  1
temp0. . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   001AH  1
TX_OFF . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STA. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DDH  1
TISE2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00DEH  1
TIFR2. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E9H  1
ICRAH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
txData . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
As5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ALTCD. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
ICRBH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AFH  1
DOWN1. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs0. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ESR. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
songNum. . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   001BH  1
DOWN2. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs1. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
XTAL1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
DOWN3. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs2. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
XTAL2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
EST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EEH  1
ICRAL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
SADEN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B9H  1
DOWN4. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
As9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 66  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


Gs3. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
ICRBL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AEH  1
DOWN5. . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Cs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs4. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRAH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EFH  1
KBCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0094H  1
Cs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Ds8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs5. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRBH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
SADDR. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A9H  1
Ds9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs6. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TOR2H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CFH  1
OCRCH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FDH  1
ADINS. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A3H  1
txState. . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0001H  2
STATION_DOWN2. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs7. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRDH. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
test0. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      000EH  1
STATION_DOWN3. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Fs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs8. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PC_. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FAH  1
PCONA. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
OCRAL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EEH  1
AUXR1. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A2H  1
test1. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      000FH  1
hiButt . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
STATION_DOWN4. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
NOTE_OFF . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
Gs9. . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
OCRBL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
STATION_DOWN5. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
TOR2L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CEH  1
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 67  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


OCRCL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
STATION_DOWN6. . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
A5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PSR. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
OCRDL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FEH  1
cnt0 . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   001CH  1
A6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G0 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
STO. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DCH  1
F1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
TAMOD. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
A7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G1 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
PST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00FEH  1
timers_isr0. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
m_in_s . . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  typeChan . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  count. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  controller . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  pitch. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  position . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
A8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G2 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
timers_isr1. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
m_in_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  typeChan . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  count. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  controller . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  pitch. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  position . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
A9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
B8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G3 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
RST. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
C51 COMPILER V8.12   BLINKY                                                                12/05/2015 12:12:15 PAGE 68  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


B9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
C8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G4 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
CRSEL. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D8H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
C9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
D8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G5 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
curRiffCnt . . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   001DH  1
D9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
E8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G6 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
HLTEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
PLLEN. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
WDCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
loButt . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
LUTSIN128. . . . . . . . . . . . . . .  PUBLIC   CODE   ARRAY    0040H  128
E9 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
F8 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
G7 . . . . . . . . . . . . . . . . . .  E_CONST  -----  U_CHAR   -----  1
SPDAT. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1228    ----
   CONSTANT SIZE    =    213    ----
   XDATA SIZE       =    512    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       3
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
