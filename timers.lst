C51 COMPILER V8.12   TIMERS                                                                12/20/2010 05:45:49 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE TIMERS
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE test\timers.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND PRINT(.\timers.lst) SR
                    -C(.\timers.SRC)

line level    source

   1          /***********************************************************************
   2          MODULE:    Timers
   3          VERSION:   1.00
   4          CONTAINS:  Routines for controlling the timers on the Philips
   5                     P89LPC936
   6          COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7          LICENSE:   May be freely used in commercial and non-commercial code
   8                     without royalties provided this copyright notice remains
   9                     in this file and unaltered
  10          WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11                     MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12                     TO CHANGE THE CONTENTS OF THIS FILE
  13          GENERATED: On "Oct 11 2010" at "17:21:42" by Code Architect 2.06
  14          ***********************************************************************/
  15          
  16          // SFR description needs to be included
  17          //#pragma SRC
  18          #include <reg936.h>
  19          #include "itrip.h"
  20          #include "timers.h"
  21          
  22          /********external Globals**************************/
  23          //2 byte timer start value...  t = (0xFFFF - start value) * 271 ns + timer0_isr execution time
  24          //extern volatile byte t0High, t0Low;
  25          
  26          //buffers and iterators and flags
  27          extern volatile byte inputBuf[BUFFER_LENGTH], inBuf[BUFFER_LENGTH], outBuf[BUFFER_LENGTH];
  28          extern volatile byte inputByte, inByte, outByte, inputBitSmoother, smootherCnt;
  29          
  30          extern volatile bit inEmpty, outEmpty, startBit;
  31          
  32          volatile bit outStart = 0, outEnd = 0;
  33          volatile byte curBit = 8, outputSmoother = 3, outputByte = BUFFER_LENGTH, outputBit = 8, *output;
  34          /***********************************************************************
  35          DESC:    Initializes timers
  36                   Timer 0 generates an interrupt every ms
  37                   Timer 1 is not used
  38          RETURNS: Nothing
  39          CAUTION: If interrupts are being used then EA must be set to 1
  40                   after calling this function
  41          ************************************************************************/
  42          void timers_init
  43            (
  44            void
  45            )
  46          {
  47   1        // configure timer 0 and 1
  48   1        TMOD &= 0xF0;
  49   1        TMOD |= 0x01;
  50   1        TAMOD &= 0xFE;
  51   1      
  52   1        // initial timer values
  53   1        TH0 = t0High;
  54   1        TL0 = t0Low;
C51 COMPILER V8.12   TIMERS                                                                12/20/2010 05:45:49 PAGE 2   

  55   1        
  56   1      //  TH1 = t1High;
  57   1      //  TL1 = t1Low;
  58   1        // set timer 1 isr priority to highest, t0 below
  59   1        IP0 &= 0xFD;
  60   1        IP0H &= 0xFD;
  61   1        IP0 |= 0x02;
  62   1        IP0H |= 0x02;
  63   1      
  64   1        // enable timer 0 interrupt
  65   1        ET0 = 1;
  66   1        // enable timer 1 interrupt
  67   1      //  ET1 = 1;
  68   1      //  TR1 = 1;
  69   1        // start timer 0      TODO???
  70   1        //TR0 = 1;
  71   1        inputBuf[inputByte] = inputBuf[inputByte];  //trick assenbler into including inBuf for the interrupt....
             -..
  72   1        inBuf[inByte] = inBuf[inByte];
  73   1        outBuf[outByte] = outBuf[outByte];
  74   1        outEmpty = outEmpty;
  75   1        output = output;
  76   1      } // timers_init
  77          
  78          
  79          /***********************************************************************
  80          DESC:    Timer 0 Interrupt Service Routine
  81                           executes in 4.4, 4.4, 7 or 4.4, 4.4, 12 us
  82          RETURNS: Nothing
  83          CAUTION: timers_init must be called first
  84                   EA must be set to 1
  85          ************************************************************************/
  86          void timers_isr0
  87            (
  88            void
  89            ) interrupt 1 using 3
  90          {
  91   1      // reinitialize
  92   1              TL0 = t0Low;//0xC3;
  93   1              TH0 = t0High;//0xff;
  94   1              --smootherCnt;
  95   1              startBit = 1;
  96   1              #pragma ASM
  97   1                              JB              outEmpty, ONWARD
  98   1                              DEC             outputSmoother
  99   1                              MOV             A, outputSmoother
 100   1                              JNZ             ONWARD
 101   1                              MOV             outputSmoother, #0x03
 102   1                              JB              outStart, STARTED
 103   1                              SETB    audioL
 104   1                              SETB    outStart
 105   1                              MOV             R0, outputByte
 106   1                              MOV             A, #LOW (outBuf - 1)
 107   1                              ADD             A, R0
 108   1                              MOV             output, A
 109   1                              SJMP    ONWARD
 110   1                      STARTED:
 111   1                              JB              outEnd, ENDER
 112   1                              MOV             R0, output 
 113   1                              MOV             A, @R0
 114   1                              ADDC    A, ACC
 115   1                              MOV             @R0, A
C51 COMPILER V8.12   TIMERS                                                                12/20/2010 05:45:49 PAGE 3   

 116   1                              JNC             OUT_0
 117   1                              CPL             audioL
 118   1                      OUT_0:  
 119   1                              DJNZ    outputBit, ONWARD
 120   1                              MOV             outputBit, #0x08
 121   1                              DEC             output
 122   1                              DJNZ    outputByte, ONWARD
 123   1                              MOV             outputByte, #BUFFER_LENGTH
 124   1                              SETB    outEnd
 125   1                              SJMP    ONWARD
 126   1                      ENDER:
 127   1                              CLR             outStart
 128   1                              CLR             audioL
 129   1                              CLR             outEnd
 130   1                              SETB    outEmpty
 131   1                      ONWARD:
 132   1                      #pragma ENDASM
 133   1              inputBitSmoother += rawInput;
 134   1              CMP1 &= ~0x01;
 135   1              if (startBit) {
 136   2                      if (!smootherCnt) {
 137   3                              smootherCnt = SAMPLES_PER_BIT;
 138   3      //                      inBuf[inByte] <<= 1;
 139   3      //                      inBuf[inByte] += inputBitSmoother & 0x01;
 140   3                              #pragma ASM
 141   3                                      MOV     R0, inputByte
 142   3                                      MOV     A, #LOW (inputBuf - 1)
 143   3                                      ADD     A, R0
 144   3                                      MOV     R0, A
 145   3                                      MOV     A, @R0
 146   3                                      ADD     A, ACC
 147   3                                      MOV     @R0, A
 148   3                                      MOV     A, inputBitSmoother
 149   3                                      ANL     A, #0x01
 150   3                                      ADD             A, @R0
 151   3                                      MOV             @R0, A
 152   3                              #pragma ENDASM
 153   3                              if (--curBit == 0) {
 154   4                                      curBit = 8;
 155   4                                      if (inputByte-- == 0) {
 156   5                                              startBit = 0;
 157   5                                              //inByte = BUFFER_LENGTH;
 158   5                                              inEmpty = 0;
 159   5              //                              for (inputByte = 0; inputByte < BUFFER_LENGTH; ++inputByte) {
 160   5              //                                      inBuf[inputByte] = inputBuf[inputByte];
 161   5              //                                      inBuf[inputByte] = 0;
 162   5              //                              }
 163   5                                              #pragma ASM
 164   5                                                              MOV             R2, #0x06
 165   5                                                              MOV     R0, #LOW (inputBuf)
 166   5                                                              MOV             R1, #LOW (inBuf)
 167   5                                                      LOOP:
 168   5                                                              MOV     A,@R0
 169   5                                                              MOV     @R1,A
 170   5                                                              MOV             @R0, #0x00
 171   5                                                              INC             R0
 172   5                                                              INC             R1
 173   5                                                              DJNZ    R2, LOOP
 174   5                                                              MOV             inputByte, #BUFFER_LENGTH
 175   5                                              #pragma ENDASM
 176   5                                      }
 177   4                              }       
C51 COMPILER V8.12   TIMERS                                                                12/20/2010 05:45:49 PAGE 4   

 178   3                      inputBitSmoother = 0;
 179   3                      }               
 180   2              } else {
 181   2                      if (!smootherCnt) {
 182   3                              smootherCnt = SAMPLES_PER_BIT;
 183   3                              if (inputBitSmoother == 4) {
 184   4                                      startBit = 1;
 185   4                              }
 186   3                      inputBitSmoother <<= 1;
 187   3                      }
 188   2              }
 189   1      } // timers_isr0
 190          
 191          
 192          //void timers_isr1
 193          //  (
 194          //  void
 195          //  ) interrupt 3 using 3
 196          //{
 197          //// reinitialize
 198          //      #pragma ASM
 199          //                      PUSH    ACC
 200          //                      PUSH    PSW
 201          //                      MOV     TH1, #t1High
 202          //                      MOV     TL1, #t1Low
 203          //                      JB              outEmpty, ONWARD
 204          //                      JB              outStart, STARTED
 205          //                      SETB    audioL
 206          //                      SETB    outStart
 207          //                      MOV             R0, outByte
 208          //                      MOV             A, #LOW (outBuf - 1)
 209          //                      ADD             A, R0
 210          //                      MOV             output, A
 211          //                      SJMP    ONWARD
 212          //              STARTED:
 213          //                      JB              outEnd, ENDER
 214          //                      MOV             R0, output 
 215          //                      MOV             A, @R0
 216          //                      ADDC    A, ACC
 217          //                      MOV             @R0, A
 218          //                      JNC             OUT_0
 219          //                      CPL             audioL
 220          //              OUT_0:  
 221          //                      DJNZ    outputBit, ONWARD
 222          //                      MOV             outputBit, #0x08
 223          //                      DEC             output
 224          //                      DJNZ    outByte, ONWARD
 225          //                      MOV             outByte, #BUFFER_LENGTH
 226          //                      SETB    outEnd
 227          //                      SJMP    ONWARD
 228          //              ENDER:
 229          //                      CLR             outStart
 230          //                      CLR             audioL
 231          //                      CLR             outEnd
 232          //                      SETB    outEmpty
 233          //              ONWARD:
 234          //                      POP     ACC
 235          //                      POP     PSW
 236          //              #pragma ENDASM
 237          //}
 238          
 239          /***********************************************************************
C51 COMPILER V8.12   TIMERS                                                                12/20/2010 05:45:49 PAGE 5   

 240          DESC:    Starts timer 0
 241          RETURNS: Nothing
 242          CAUTION: timers_init must be called first
 243          ************************************************************************/
 244          void timers_starttimer0
 245            (
 246            void
 247            )
 248          {
 249   1        TR0 = 1;
 250   1      } // timers_starttimer0
 251          
 252          /***********************************************************************
 253          DESC:    Stops timer 0
 254          RETURNS: Nothing
 255          CAUTION: timers_init must be called first
 256          ************************************************************************/
 257          void timers_stoptimer0
 258            (
 259            void
 260            )
 261          {
 262   1        TR0 = 0;
 263   1      } // timers_stoptimer0
 264          
 265          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    348    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
