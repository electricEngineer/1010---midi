/***********************************************************************
MODULE:    Comparators
VERSION:   1.02
CONTAINS:  Routines for controlling the comparators on the Philips
           P89LPC936
COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
LICENSE:   May be freely used in commercial and non-commercial code
           without royalties provided this copyright notice remains
           in this file and unaltered
WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
           MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
           TO CHANGE THE CONTENTS OF THIS FILE
GENERATED: On "Sep 30 2010" at "21:10:55" by Code Architect 2.06
***********************************************************************/

// SFR description needs to be included
#include <reg936.h>
#include "comparators.h"

/***********************************************************************
DESC:    Generates a 13 microsecond delay needed to stabilize a
         comparator output after enabling.
         Note that the datasheet mentions a 10 microsecond delay.
         Because the timer may be clocked from the watchdog timer, which
         can be up to 30% faster than stated, 30% has been added to the
         absolute minimum delay of 10us to give 13us.
         Uses timer 0
         Actual delay: 12.99 us
RETURNS: Nothing
CAUTION: The delay must be an absolute minimum of 10us
************************************************************************/
void comparators_13usdelay
  (
  void
  )
{
  // ensure timer 0 stopped
  TR0 = 0;
  // configure timer 0 as 16-bit timer
  TMOD &= 0xF0;
  TMOD |= 0x01;
  TAMOD &= 0xFE;
  // set reload value
  TH0 = 0xFF;
  TL0 = 0xD0;
  // disable timer interrupt
  ET0 = 0;
  // run timer and wait for overflow
  TF0 = 0;
  TR0 = 1;
  while (!TF0);
  // stop timer and clean up
  TR0 = 0;
  TF0 = 0;
}

/***********************************************************************
DESC:    Initializes a comparator
         Selects the comparator inputs/reference voltage source, enables
         comparator output, enables comparator, configures I/O pins
         needed, enables interrupts
         If a comparator is being enabled then comparators_13usdelay
         is called to provide a 13us delay to stabilize the comparator
RETURNS: Nothing
CAUTION: Set EA to 1 to enable interrupts after calling
************************************************************************/
void comparators_init
  (
  bit compnum,                    // comparator number:     COMP_1 or COMP_2
  unsigned char posinput,         // positive input A or B: COMP_INPUTA or COMP_INPUTB
  unsigned char neginput,         // negative input CMPREF or internal reference:
                                  //                        COMP_INPUTREF, COMP_INTERNALREF
  unsigned char outputenable      // enable or disable output pin:
                                  //                        COMP_OUTPUTDISABLE or COMP_OUTPUTENABLE
  )
{
  bit currenable;

  if (compnum == COMP_1)
  {
    // initialize port pins according to configuration
    if (posinput == COMP_INPUTA)
    {
      // select CIN1A as analog input
      P0M1 |= 0x10;
      P0M2 &= ~0x10;
      PT0AD |= 0x10;
    }
    else
    {
      // select CIN1B as analog input
      P0M1 |= 0x08;
      P0M2 &= ~0x08;
      PT0AD |= 0x08;
    }
    if (neginput == COMP_INPUTREF)
    {
      // select CMPREF as analog input
      P0M1 |= 0x20;
      P0M2 &= ~0x20;
      PT0AD |= 0x20;
    }
    if (outputenable == COMP_OUTPUTENABLE)
    {
      // select CMP1 as push-pull output
      P0M1 &= ~0x40;
      P0M2 |= 0x40;
    }
    // find out if comparator is currently enabled or not
    currenable = CMP1 & 0x20;
    // configure and enable comparator
    // clear interrupt flag
    CMP1 = posinput | neginput | outputenable | 0x20;
    // if comparator just enabled then we need to call a function
    // so the user can generate a 13us delay
    if (!currenable) comparators_13usdelay();
    // clear comparator interrupt flag to avoid spurious interrupt
    CMP1 &= ~0x01;
  }
  else
  {
    // initialize port pins according to configuration
    if (posinput == COMP_INPUTA)
    {
      // select CIN2A as analog input
      P0M1 |= 0x04;
      P0M2 &= ~0x04;
      PT0AD |= 0x04;
    }
    else
    {
      // select CIN2B as analog input
      P0M1 |= 0x02;
      P0M2 &= ~0x02;
      PT0AD |= 0x02;
    }
    if (neginput == COMP_INPUTREF)
    {
      // select CMPREF as analog input
      P0M1 |= 0x20;
      P0M2 &= ~0x20;
      PT0AD |= 0x20;
    }
    if (outputenable == COMP_OUTPUTENABLE)
    {
      // select CMP2 as push-pull output
      P0M1 &= ~0x01;
      P0M2 |= 0x01;
    }
    // find out if comparator is currently enabled or not
    currenable = CMP2 & 0x20;
    // configure and enable comparator
    // clear interrupt flag
    CMP2 = posinput | neginput | outputenable | 0x20;
    // if comparator just enabled then we need to call a function
    // so the user can generate a 13us delay
    if (!currenable) comparators_13usdelay();
    // clear comparator interrupt flag to avoid a spurious interrupt
    CMP2 &= ~0x01;
  }

  // set isr priority to 0
  IP1 &= 0xFB;
  IP1H &= 0xFB;

  // enable comparator interrupt
  EC = 1;
}

/***********************************************************************
DESC:    Comparator Interrupt Service Routine
         Uses register bank 1
RETURNS: Nothing
CAUTION: comparators_init must be called and EA set to 1 to enable
         interrupts.
         Called when the output of any enabled comparator changes
************************************************************************/
void comparators_isr
  (
  void
  ) interrupt 8 using 1
{
  // check if comparator 1 caused interrupt
  if (CMP1 & 0x01)
  {
    // clear interrupt flag
    CMP1 &= ~0x01;
  }
  // check if comparator 2 caused interrupt
  if (CMP2 & 0x01)
  {
    // clear interrupt flag
    CMP2 &= ~0x01;
  }
}

/***********************************************************************
DESC:    Disables a comparator
RETURNS: Nothing
CAUTION: The port pins used by the comparator are not reconfigured to
         be digital inputs or outputs.
************************************************************************/
void comparators_disable
  (
  bit compnum                     // comparator number:     COMP_1 or COMP_2
  )
{
  // disable comparator 1
  if (compnum == COMP_1)
  {
    CMP1 &= ~0x20;
  }
  // disable comparator 2
  else
  {
    CMP2 &= ~0x20;
  }
}

/***********************************************************************
DESC:    Gets the current output of a comparator
RETURNS: Current comparator output
CAUTION: comparators_init must be called first
************************************************************************/
bit comparators_getoutput
  (
  bit compnum                     // comparator number:     COMP_1 or COMP_2
  )
{
  // get output of comparator 1
  if (compnum == COMP_1)
  {
    return (CMP1 >> 1) & 0x01;
  }
  // get output of comparator 2
  else
  {
    return (CMP2 >> 1) & 0x01;
  }
}

/***********************************************************************
DESC:    Selects a positive input source for a comparator
RETURNS: Nothing
CAUTION: comparators_init must be called first.
         The comparator interrupt is disabled while the input is
         changed. This means that the other comparator not being changed
         will also not generate an interrupt.
************************************************************************/
void comparators_selectposinput
  (
  bit compnum,                    // comparator number:     COMP_1 or COMP_2
  unsigned char posinput          // positive input A or B: COMP_INPUTA or COMP_INPUTB
  )
{
  // disable comparator interrupt
  EC = 0;

  // configure comparator 1
  if (compnum == COMP_1)
  {
    // initialize port pins according to configuration
    if (posinput == COMP_INPUTA)
    {
      // select CIN1A as analog input
      P0M1 |= 0x10;
      P0M2 &= ~0x10;
      PT0AD |= 0x10;
    }
    else
    {
      // select CIN1B as analog input
      P0M1 |= 0x08;
      P0M2 &= ~0x08;
      PT0AD |= 0x08;
    }
    // clear input selection
    CMP1 &= ~0x10;
    // select new input
    CMP1 |= posinput;
  }
  // configure comparator 2
  else
  {
    // initialize port pins according to configuration
    if (posinput == COMP_INPUTA)
    {
      // select CIN2A as analog input
      P0M1 |= 0x04;
      P0M2 &= ~0x04;
      PT0AD |= 0x04;
    }
    else
    {
      // select CIN2B as analog input
      P0M1 |= 0x02;
      P0M2 &= ~0x02;
      PT0AD |= 0x02;
    }
    // clear input selection
    CMP2 &= ~0x10;
    // select new input
    CMP2 |= posinput;
  }

  // enable comparator interrupt
  EC = 1;
}


