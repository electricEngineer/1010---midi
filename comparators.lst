C51 COMPILER V8.12   COMPARATORS                                                           12/20/2010 04:59:01 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE COMPARATORS
OBJECT MODULE PLACED IN comparators.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE test\comparators.c ROM(COMPACT) BROWSE DEBUG OBJECTEXTEND PRINT(.\comparato
                    -rs.lst) OBJECT(comparators.obj)

line level    source

   1          /***********************************************************************
   2          MODULE:    Comparators
   3          VERSION:   1.02
   4          CONTAINS:  Routines for controlling the comparators on the Philips
   5                     P89LPC936
   6          COPYRIGHT: Embedded Systems Academy, Inc. - www.esacademy.com
   7          LICENSE:   May be freely used in commercial and non-commercial code
   8                     without royalties provided this copyright notice remains
   9                     in this file and unaltered
  10          WARNING:   IF THIS FILE IS REGENERATED BY CODE ARCHITECT ANY CHANGES
  11                     MADE WILL BE LOST. WHERE POSSIBLE USE ONLY CODE ARCHITECT
  12                     TO CHANGE THE CONTENTS OF THIS FILE
  13          GENERATED: On "Sep 30 2010" at "21:10:55" by Code Architect 2.06
  14          ***********************************************************************/
  15          
  16          // SFR description needs to be included
  17          #include <reg936.h>
  18          #include "iTrip.h"
  19          #include "comparators.h"
  20          #include "CCU.h"
  21          
  22          /********external Globals**************************/
  23          //2 byte timer start value...  t = (0xFFFF - start value) * 271 ns + timer0_isr execution time
  24          //extern volatile byte t0High, t0Low, inputBitSmoother, smootherCnt;
  25          /***********************************************************/
  26          
  27          /***********************************************************************
  28          DESC:    Generates a 13 microsecond delay needed to stabilize a
  29                   comparator output after enabling.
  30                   Note that the datasheet mentions a 10 microsecond delay.
  31                   Because the timer may be clocked from the watchdog timer, which
  32                   can be up to 30% faster than stated, 30% has been added to the
  33                   absolute minimum delay of 10us to give 13us.
  34                   Uses timer 0
  35                   Actual delay: 12.99 us
  36          RETURNS: Nothing
  37          CAUTION: The delay must be an absolute minimum of 10us
  38          ************************************************************************/
  39          void comparators_13usdelay
  40            (
  41            void
  42            )
  43          {
  44   1              // ensure timer 0 stopped
  45   1              TR0 = 0;
  46   1              // set reload value
  47   1              TH0 = 0xFF;
  48   1              TL0 = 0xD0;
  49   1              // disable timer interrupt
  50   1              ET0 = 0;
  51   1              // run timer and wait for overflow
  52   1              TF0 = 0;
  53   1              TR0 = 1;
  54   1              while (!TF0);
C51 COMPILER V8.12   COMPARATORS                                                           12/20/2010 04:59:01 PAGE 2   

  55   1              // stop timer and clean up
  56   1              TF0 = 0;
  57   1              ET0 = 1;
  58   1              TR0 = 1;
  59   1      }
  60          
  61          /***********************************************************************
  62          DESC:    Initializes a comparator
  63                   Selects the comparator inputs/reference voltage source, enables
  64                   comparator output, enables comparator, configures I/O pins
  65                   needed, enables interrupts
  66                   If a comparator is being enabled then comparators_13usdelay
  67                   is called to provide a 13us delay to stabilize the comparator
  68          RETURNS: Nothing
  69          CAUTION: Set EA to 1 to enable interrupts after calling
  70          ************************************************************************/
  71          void comparators_init
  72            (
  73            bit compnum,                    // comparator number:     COMP_1 or COMP_2
  74            unsigned char posinput,         // positive input A or B: COMP_INPUTA or COMP_INPUTB
  75            unsigned char neginput,         // negative input CMPREF or internal reference:
  76                                            //                        COMP_INPUTREF, COMP_INTERNALREF
  77            unsigned char outputenable      // enable or disable output pin:
  78                                            //                        COMP_OUTPUTDISABLE or COMP_OUTPUTENABLE
  79            )
  80          {
  81   1        bit currenable;
  82   1      
  83   1        if (compnum == COMP_1)
  84   1        {
  85   2          // initialize port pins according to configuration
  86   2          if (posinput == COMP_INPUTA)
  87   2          {
  88   3            // select CIN1A as analog input
  89   3            P0M1 |= 0x10;
  90   3            P0M2 &= ~0x10;
  91   3            PT0AD |= 0x10;
  92   3          }
  93   2          else
  94   2          {
  95   3            // select CIN1B as analog input
  96   3            P0M1 |= 0x08;
  97   3            P0M2 &= ~0x08;
  98   3            PT0AD |= 0x08;
  99   3          }
 100   2          if (neginput == COMP_INPUTREF)
 101   2          {
 102   3            // select CMPREF as analog input
 103   3            P0M1 |= 0x20;
 104   3            P0M2 &= ~0x20;
 105   3            PT0AD |= 0x20;
 106   3          }
 107   2          if (outputenable == COMP_OUTPUTENABLE)
 108   2          {
 109   3            // select CMP1 as push-pull output
 110   3            P0M1 &= ~0x40;
 111   3            P0M2 |= 0x40;
 112   3          }
 113   2          // find out if comparator is currently enabled or not
 114   2          currenable = CMP1 & 0x20;
 115   2          // configure and enable comparator
 116   2          // clear interrupt flag
C51 COMPILER V8.12   COMPARATORS                                                           12/20/2010 04:59:01 PAGE 3   

 117   2          CMP1 = posinput | neginput | outputenable | 0x20;
 118   2          // if comparator just enabled then we need to call a function
 119   2          // so the user can generate a 13us delay
 120   2          if (!currenable) comparators_13usdelay();
 121   2          // clear comparator interrupt flag to avoid spurious interrupt
 122   2          CMP1 &= ~0x01;
 123   2        }
 124   1        else
 125   1        {
 126   2          // initialize port pins according to configuration
 127   2          if (posinput == COMP_INPUTA)
 128   2          {
 129   3            // select CIN2A as analog input
 130   3            P0M1 |= 0x04;
 131   3            P0M2 &= ~0x04;
 132   3            PT0AD |= 0x04;
 133   3          }
 134   2          else
 135   2          {
 136   3            // select CIN2B as analog input
 137   3            P0M1 |= 0x02;
 138   3            P0M2 &= ~0x02;
 139   3            PT0AD |= 0x02;
 140   3          }
 141   2          if (neginput == COMP_INPUTREF)
 142   2          {
 143   3            // select CMPREF as analog input
 144   3            P0M1 |= 0x20;
 145   3            P0M2 &= ~0x20;
 146   3            PT0AD |= 0x20;
 147   3          }
 148   2          if (outputenable == COMP_OUTPUTENABLE)
 149   2          {
 150   3            // select CMP2 as push-pull output
 151   3            P0M1 &= ~0x01;
 152   3            P0M2 |= 0x01;
 153   3          }
 154   2          // find out if comparator is currently enabled or not
 155   2          currenable = CMP2 & 0x20;
 156   2          // configure and enable comparator
 157   2          // clear interrupt flag
 158   2          CMP2 = posinput | neginput | outputenable | 0x20;
 159   2          // if comparator just enabled then we need to call a function
 160   2          // so the user can generate a 13us delay
 161   2          if (!currenable) comparators_13usdelay();
 162   2          // clear comparator interrupt flag to avoid a spurious interrupt
 163   2          CMP2 &= ~0x01;
 164   2        }
 165   1      
 166   1        // set isr priority to 0
 167   1        IP1 &= 0xFB;
 168   1        IP1H &= 0xFB;
 169   1      
 170   1        // enable comparator interrupt
 171   1      //  EC = 1;
 172   1      }
 173          
 174          /***********************************************************************
 175          DESC:    Comparator Interrupt Service Routine
 176                   Uses register bank 1
 177          RETURNS: Nothing
 178          CAUTION: comparators_init must be called and EA set to 1 to enable
C51 COMPILER V8.12   COMPARATORS                                                           12/20/2010 04:59:01 PAGE 4   

 179                   interrupts.
 180                   Called when the output of any enabled comparator changes
 181          ************************************************************************/
 182          void comparators_isr
 183            (
 184            void
 185            ) interrupt 8 using 1
 186          {
 187   1        // check if comparator 1 caused interrupt
 188   1        if (CMP1 & 0x01)
 189   1        {
 190   2          // clear interrupt flag
 191   2      //      TL0 = t0Low;//0xb3;
 192   2      //      TH0 = t0High;//0xff;
 193   2      //      TR0 = 1;
 194   2      //      smootherCnt = SAMPLES_PER_BIT;;
 195   2      //      inputBitSmoother += rawInput;
 196   2      //      EC = 0;
 197   2              CMP1 &= ~0x01;
 198   2        }
 199   1      }
 200          
 201          /***********************************************************************
 202          DESC:    Disables a comparator
 203          RETURNS: Nothing
 204          CAUTION: The port pins used by the comparator are not reconfigured to
 205                   be digital inputs or outputs.
 206          ************************************************************************/
 207          void comparators_disable
 208            (
 209            bit compnum                     // comparator number:     COMP_1 or COMP_2
 210            )
 211          {
 212   1        // disable comparator 1
 213   1        if (compnum == COMP_1)
 214   1        {
 215   2          CMP1 &= ~0x20;
 216   2        }
 217   1        // disable comparator 2
 218   1        else
 219   1        {
 220   2          CMP2 &= ~0x20;
 221   2        }
 222   1      }
 223          
 224          /***********************************************************************
 225          DESC:    Gets the current output of a comparator
 226          RETURNS: Current comparator output
 227          CAUTION: comparators_init must be called first
 228          ************************************************************************/
 229          bit comparators_getoutput
 230            (
 231            bit compnum                     // comparator number:     COMP_1 or COMP_2
 232            )
 233          {
 234   1        // get output of comparator 1
 235   1        if (compnum == COMP_1)
 236   1        {
 237   2          return (CMP1 >> 1) & 0x01;
 238   2        }
 239   1        // get output of comparator 2
 240   1        else
C51 COMPILER V8.12   COMPARATORS                                                           12/20/2010 04:59:01 PAGE 5   

 241   1        {
 242   2          return (CMP2 >> 1) & 0x01;
 243   2        }
 244   1      }
 245          
 246          /***********************************************************************
 247          DESC:    Selects a positive input source for a comparator
 248          RETURNS: Nothing
 249          CAUTION: comparators_init must be called first.
 250                   The comparator interrupt is disabled while the input is
 251                   changed. This means that the other comparator not being changed
 252                   will also not generate an interrupt.
 253          ************************************************************************/
 254          void comparators_selectposinput
 255            (
 256            bit compnum,                    // comparator number:     COMP_1 or COMP_2
 257            unsigned char posinput          // positive input A or B: COMP_INPUTA or COMP_INPUTB
 258            )
 259          {
 260   1        // disable comparator interrupt
 261   1        EC = 0;
 262   1      
 263   1        // configure comparator 1
 264   1        if (compnum == COMP_1)
 265   1        {
 266   2          // initialize port pins according to configuration
 267   2          if (posinput == COMP_INPUTA)
 268   2          {
 269   3            // select CIN1A as analog input
 270   3            P0M1 |= 0x10;
 271   3            P0M2 &= ~0x10;
 272   3            PT0AD |= 0x10;
 273   3          }
 274   2          else
 275   2          {
 276   3            // select CIN1B as analog input
 277   3            P0M1 |= 0x08;
 278   3            P0M2 &= ~0x08;
 279   3            PT0AD |= 0x08;
 280   3          }
 281   2          // clear input selection
 282   2          CMP1 &= ~0x10;
 283   2          // select new input
 284   2          CMP1 |= posinput;
 285   2        }
 286   1        // configure comparator 2
 287   1        else
 288   1        {
 289   2          // initialize port pins according to configuration
 290   2          if (posinput == COMP_INPUTA)
 291   2          {
 292   3            // select CIN2A as analog input
 293   3            P0M1 |= 0x04;
 294   3            P0M2 &= ~0x04;
 295   3            PT0AD |= 0x04;
 296   3          }
 297   2          else
 298   2          {
 299   3            // select CIN2B as analog input
 300   3            P0M1 |= 0x02;
 301   3            P0M2 &= ~0x02;
 302   3            PT0AD |= 0x02;
C51 COMPILER V8.12   COMPARATORS                                                           12/20/2010 04:59:01 PAGE 6   

 303   3          }
 304   2          // clear input selection
 305   2          CMP2 &= ~0x10;
 306   2          // select new input
 307   2          CMP2 |= posinput;
 308   2        }
 309   1      
 310   1        // enable comparator interrupt
 311   1      //  EC = 1;
 312   1      }
 313          
 314          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    288    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       5
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
